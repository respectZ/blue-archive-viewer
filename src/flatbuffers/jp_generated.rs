// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod jp {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_PRODUCTION_STEP: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_PRODUCTION_STEP: i32 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_PRODUCTION_STEP: [ProductionStep; 4] = [
  ProductionStep::ToDo,
  ProductionStep::Doing,
  ProductionStep::Complete,
  ProductionStep::Release,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ProductionStep(pub i32);
#[allow(non_upper_case_globals)]
impl ProductionStep {
  pub const ToDo: Self = Self(0);
  pub const Doing: Self = Self(1);
  pub const Complete: Self = Self(2);
  pub const Release: Self = Self(3);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::ToDo,
    Self::Doing,
    Self::Complete,
    Self::Release,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::ToDo => Some("ToDo"),
      Self::Doing => Some("Doing"),
      Self::Complete => Some("Complete"),
      Self::Release => Some("Release"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ProductionStep {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for ProductionStep {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for ProductionStep {
    type Output = ProductionStep;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for ProductionStep {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ProductionStep {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ProductionStep {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_DIALOG_CATEGORY: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_DIALOG_CATEGORY: i32 = 74;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_DIALOG_CATEGORY: [DialogCategory; 75] = [
  DialogCategory::Cafe,
  DialogCategory::Echelon,
  DialogCategory::CharacterSSRNew,
  DialogCategory::CharacterGet,
  DialogCategory::Birthday,
  DialogCategory::Dating,
  DialogCategory::Title,
  DialogCategory::UILobby,
  DialogCategory::UILobbySpecial,
  DialogCategory::UIShop,
  DialogCategory::UIGacha,
  DialogCategory::UIRaidLobby,
  DialogCategory::UIWork,
  DialogCategory::UITitle,
  DialogCategory::UIWeekDungeon,
  DialogCategory::UIAcademyLobby,
  DialogCategory::UIRaidLobbySeasonOff,
  DialogCategory::UIRaidLobbySeasonOn,
  DialogCategory::UIWorkAronaSit,
  DialogCategory::UIWorkAronaSleep,
  DialogCategory::UIWorkAronaWatch,
  DialogCategory::UIGuideMission,
  DialogCategory::UILobby2,
  DialogCategory::UIClanSearchList,
  DialogCategory::UIAttendance,
  DialogCategory::UIAttendanceEvent01,
  DialogCategory::UIEventLobby,
  DialogCategory::UIEventShop,
  DialogCategory::UIEventBoxGachaShop,
  DialogCategory::UIAttendanceEvent02,
  DialogCategory::UIAttendanceEvent03,
  DialogCategory::UIEventCardShop,
  DialogCategory::UISchoolDungeon,
  DialogCategory::UIAttendanceEvent,
  DialogCategory::UISpecialOperationLobby,
  DialogCategory::WeaponGet,
  DialogCategory::UIAttendanceEvent04,
  DialogCategory::UIEventFortuneGachaShop,
  DialogCategory::UIAttendanceEvent05,
  DialogCategory::UIAttendanceEvent06,
  DialogCategory::UIMission,
  DialogCategory::UIEventMission,
  DialogCategory::UIAttendanceEvent08,
  DialogCategory::UIAttendanceEvent07,
  DialogCategory::UIEventMiniGameMission,
  DialogCategory::UIAttendanceEvent09,
  DialogCategory::UIAttendanceEvent10,
  DialogCategory::UIAttendanceEvent11,
  DialogCategory::UIWorkPlanaSit,
  DialogCategory::UIWorkPlanaUmbrella,
  DialogCategory::UIWorkPlanaCabinet,
  DialogCategory::UIWorkCoexist_AronaSleepSit,
  DialogCategory::UIWorkCoexist_PlanaWatchSky,
  DialogCategory::UIWorkCoexist_PlanaSitPeek,
  DialogCategory::UIWorkCoexist_AronaSleepPeek,
  DialogCategory::UIEventArchive,
  DialogCategory::UIAttendanceEvent12,
  DialogCategory::UIAttendanceEvent13,
  DialogCategory::UIAttendanceEvent14,
  DialogCategory::Temp_1,
  DialogCategory::Temp_2,
  DialogCategory::Temp_3,
  DialogCategory::Temp_4,
  DialogCategory::Temp_5,
  DialogCategory::UIAttendanceEvent15,
  DialogCategory::UILobbySpecial2,
  DialogCategory::UIAttendanceEvent16,
  DialogCategory::UIEventTreasure,
  DialogCategory::UIMultiFloorRaid,
  DialogCategory::UIEventMiniGameDreamMaker,
  DialogCategory::UIAttendanceEvent17,
  DialogCategory::UIAttendanceEvent18,
  DialogCategory::UNKNOWN1,
  DialogCategory::UNKNOWN2,
  DialogCategory::UNKNOWN3,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct DialogCategory(pub i32);
#[allow(non_upper_case_globals)]
impl DialogCategory {
  pub const Cafe: Self = Self(0);
  pub const Echelon: Self = Self(1);
  pub const CharacterSSRNew: Self = Self(2);
  pub const CharacterGet: Self = Self(3);
  pub const Birthday: Self = Self(4);
  pub const Dating: Self = Self(5);
  pub const Title: Self = Self(6);
  pub const UILobby: Self = Self(7);
  pub const UILobbySpecial: Self = Self(8);
  pub const UIShop: Self = Self(9);
  pub const UIGacha: Self = Self(10);
  pub const UIRaidLobby: Self = Self(11);
  pub const UIWork: Self = Self(12);
  pub const UITitle: Self = Self(13);
  pub const UIWeekDungeon: Self = Self(14);
  pub const UIAcademyLobby: Self = Self(15);
  pub const UIRaidLobbySeasonOff: Self = Self(16);
  pub const UIRaidLobbySeasonOn: Self = Self(17);
  pub const UIWorkAronaSit: Self = Self(18);
  pub const UIWorkAronaSleep: Self = Self(19);
  pub const UIWorkAronaWatch: Self = Self(20);
  pub const UIGuideMission: Self = Self(21);
  pub const UILobby2: Self = Self(22);
  pub const UIClanSearchList: Self = Self(23);
  pub const UIAttendance: Self = Self(24);
  pub const UIAttendanceEvent01: Self = Self(25);
  pub const UIEventLobby: Self = Self(26);
  pub const UIEventShop: Self = Self(27);
  pub const UIEventBoxGachaShop: Self = Self(28);
  pub const UIAttendanceEvent02: Self = Self(29);
  pub const UIAttendanceEvent03: Self = Self(30);
  pub const UIEventCardShop: Self = Self(31);
  pub const UISchoolDungeon: Self = Self(32);
  pub const UIAttendanceEvent: Self = Self(33);
  pub const UISpecialOperationLobby: Self = Self(34);
  pub const WeaponGet: Self = Self(35);
  pub const UIAttendanceEvent04: Self = Self(36);
  pub const UIEventFortuneGachaShop: Self = Self(37);
  pub const UIAttendanceEvent05: Self = Self(38);
  pub const UIAttendanceEvent06: Self = Self(39);
  pub const UIMission: Self = Self(40);
  pub const UIEventMission: Self = Self(41);
  pub const UIAttendanceEvent08: Self = Self(42);
  pub const UIAttendanceEvent07: Self = Self(43);
  pub const UIEventMiniGameMission: Self = Self(44);
  pub const UIAttendanceEvent09: Self = Self(45);
  pub const UIAttendanceEvent10: Self = Self(46);
  pub const UIAttendanceEvent11: Self = Self(47);
  pub const UIWorkPlanaSit: Self = Self(48);
  pub const UIWorkPlanaUmbrella: Self = Self(49);
  pub const UIWorkPlanaCabinet: Self = Self(50);
  pub const UIWorkCoexist_AronaSleepSit: Self = Self(51);
  pub const UIWorkCoexist_PlanaWatchSky: Self = Self(52);
  pub const UIWorkCoexist_PlanaSitPeek: Self = Self(53);
  pub const UIWorkCoexist_AronaSleepPeek: Self = Self(54);
  pub const UIEventArchive: Self = Self(55);
  pub const UIAttendanceEvent12: Self = Self(56);
  pub const UIAttendanceEvent13: Self = Self(57);
  pub const UIAttendanceEvent14: Self = Self(58);
  pub const Temp_1: Self = Self(59);
  pub const Temp_2: Self = Self(60);
  pub const Temp_3: Self = Self(61);
  pub const Temp_4: Self = Self(62);
  pub const Temp_5: Self = Self(63);
  pub const UIAttendanceEvent15: Self = Self(64);
  pub const UILobbySpecial2: Self = Self(65);
  pub const UIAttendanceEvent16: Self = Self(66);
  pub const UIEventTreasure: Self = Self(67);
  pub const UIMultiFloorRaid: Self = Self(68);
  pub const UIEventMiniGameDreamMaker: Self = Self(69);
  pub const UIAttendanceEvent17: Self = Self(70);
  pub const UIAttendanceEvent18: Self = Self(71);
  pub const UNKNOWN1: Self = Self(72);
  pub const UNKNOWN2: Self = Self(73);
  pub const UNKNOWN3: Self = Self(74);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 74;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Cafe,
    Self::Echelon,
    Self::CharacterSSRNew,
    Self::CharacterGet,
    Self::Birthday,
    Self::Dating,
    Self::Title,
    Self::UILobby,
    Self::UILobbySpecial,
    Self::UIShop,
    Self::UIGacha,
    Self::UIRaidLobby,
    Self::UIWork,
    Self::UITitle,
    Self::UIWeekDungeon,
    Self::UIAcademyLobby,
    Self::UIRaidLobbySeasonOff,
    Self::UIRaidLobbySeasonOn,
    Self::UIWorkAronaSit,
    Self::UIWorkAronaSleep,
    Self::UIWorkAronaWatch,
    Self::UIGuideMission,
    Self::UILobby2,
    Self::UIClanSearchList,
    Self::UIAttendance,
    Self::UIAttendanceEvent01,
    Self::UIEventLobby,
    Self::UIEventShop,
    Self::UIEventBoxGachaShop,
    Self::UIAttendanceEvent02,
    Self::UIAttendanceEvent03,
    Self::UIEventCardShop,
    Self::UISchoolDungeon,
    Self::UIAttendanceEvent,
    Self::UISpecialOperationLobby,
    Self::WeaponGet,
    Self::UIAttendanceEvent04,
    Self::UIEventFortuneGachaShop,
    Self::UIAttendanceEvent05,
    Self::UIAttendanceEvent06,
    Self::UIMission,
    Self::UIEventMission,
    Self::UIAttendanceEvent08,
    Self::UIAttendanceEvent07,
    Self::UIEventMiniGameMission,
    Self::UIAttendanceEvent09,
    Self::UIAttendanceEvent10,
    Self::UIAttendanceEvent11,
    Self::UIWorkPlanaSit,
    Self::UIWorkPlanaUmbrella,
    Self::UIWorkPlanaCabinet,
    Self::UIWorkCoexist_AronaSleepSit,
    Self::UIWorkCoexist_PlanaWatchSky,
    Self::UIWorkCoexist_PlanaSitPeek,
    Self::UIWorkCoexist_AronaSleepPeek,
    Self::UIEventArchive,
    Self::UIAttendanceEvent12,
    Self::UIAttendanceEvent13,
    Self::UIAttendanceEvent14,
    Self::Temp_1,
    Self::Temp_2,
    Self::Temp_3,
    Self::Temp_4,
    Self::Temp_5,
    Self::UIAttendanceEvent15,
    Self::UILobbySpecial2,
    Self::UIAttendanceEvent16,
    Self::UIEventTreasure,
    Self::UIMultiFloorRaid,
    Self::UIEventMiniGameDreamMaker,
    Self::UIAttendanceEvent17,
    Self::UIAttendanceEvent18,
    Self::UNKNOWN1,
    Self::UNKNOWN2,
    Self::UNKNOWN3,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Cafe => Some("Cafe"),
      Self::Echelon => Some("Echelon"),
      Self::CharacterSSRNew => Some("CharacterSSRNew"),
      Self::CharacterGet => Some("CharacterGet"),
      Self::Birthday => Some("Birthday"),
      Self::Dating => Some("Dating"),
      Self::Title => Some("Title"),
      Self::UILobby => Some("UILobby"),
      Self::UILobbySpecial => Some("UILobbySpecial"),
      Self::UIShop => Some("UIShop"),
      Self::UIGacha => Some("UIGacha"),
      Self::UIRaidLobby => Some("UIRaidLobby"),
      Self::UIWork => Some("UIWork"),
      Self::UITitle => Some("UITitle"),
      Self::UIWeekDungeon => Some("UIWeekDungeon"),
      Self::UIAcademyLobby => Some("UIAcademyLobby"),
      Self::UIRaidLobbySeasonOff => Some("UIRaidLobbySeasonOff"),
      Self::UIRaidLobbySeasonOn => Some("UIRaidLobbySeasonOn"),
      Self::UIWorkAronaSit => Some("UIWorkAronaSit"),
      Self::UIWorkAronaSleep => Some("UIWorkAronaSleep"),
      Self::UIWorkAronaWatch => Some("UIWorkAronaWatch"),
      Self::UIGuideMission => Some("UIGuideMission"),
      Self::UILobby2 => Some("UILobby2"),
      Self::UIClanSearchList => Some("UIClanSearchList"),
      Self::UIAttendance => Some("UIAttendance"),
      Self::UIAttendanceEvent01 => Some("UIAttendanceEvent01"),
      Self::UIEventLobby => Some("UIEventLobby"),
      Self::UIEventShop => Some("UIEventShop"),
      Self::UIEventBoxGachaShop => Some("UIEventBoxGachaShop"),
      Self::UIAttendanceEvent02 => Some("UIAttendanceEvent02"),
      Self::UIAttendanceEvent03 => Some("UIAttendanceEvent03"),
      Self::UIEventCardShop => Some("UIEventCardShop"),
      Self::UISchoolDungeon => Some("UISchoolDungeon"),
      Self::UIAttendanceEvent => Some("UIAttendanceEvent"),
      Self::UISpecialOperationLobby => Some("UISpecialOperationLobby"),
      Self::WeaponGet => Some("WeaponGet"),
      Self::UIAttendanceEvent04 => Some("UIAttendanceEvent04"),
      Self::UIEventFortuneGachaShop => Some("UIEventFortuneGachaShop"),
      Self::UIAttendanceEvent05 => Some("UIAttendanceEvent05"),
      Self::UIAttendanceEvent06 => Some("UIAttendanceEvent06"),
      Self::UIMission => Some("UIMission"),
      Self::UIEventMission => Some("UIEventMission"),
      Self::UIAttendanceEvent08 => Some("UIAttendanceEvent08"),
      Self::UIAttendanceEvent07 => Some("UIAttendanceEvent07"),
      Self::UIEventMiniGameMission => Some("UIEventMiniGameMission"),
      Self::UIAttendanceEvent09 => Some("UIAttendanceEvent09"),
      Self::UIAttendanceEvent10 => Some("UIAttendanceEvent10"),
      Self::UIAttendanceEvent11 => Some("UIAttendanceEvent11"),
      Self::UIWorkPlanaSit => Some("UIWorkPlanaSit"),
      Self::UIWorkPlanaUmbrella => Some("UIWorkPlanaUmbrella"),
      Self::UIWorkPlanaCabinet => Some("UIWorkPlanaCabinet"),
      Self::UIWorkCoexist_AronaSleepSit => Some("UIWorkCoexist_AronaSleepSit"),
      Self::UIWorkCoexist_PlanaWatchSky => Some("UIWorkCoexist_PlanaWatchSky"),
      Self::UIWorkCoexist_PlanaSitPeek => Some("UIWorkCoexist_PlanaSitPeek"),
      Self::UIWorkCoexist_AronaSleepPeek => Some("UIWorkCoexist_AronaSleepPeek"),
      Self::UIEventArchive => Some("UIEventArchive"),
      Self::UIAttendanceEvent12 => Some("UIAttendanceEvent12"),
      Self::UIAttendanceEvent13 => Some("UIAttendanceEvent13"),
      Self::UIAttendanceEvent14 => Some("UIAttendanceEvent14"),
      Self::Temp_1 => Some("Temp_1"),
      Self::Temp_2 => Some("Temp_2"),
      Self::Temp_3 => Some("Temp_3"),
      Self::Temp_4 => Some("Temp_4"),
      Self::Temp_5 => Some("Temp_5"),
      Self::UIAttendanceEvent15 => Some("UIAttendanceEvent15"),
      Self::UILobbySpecial2 => Some("UILobbySpecial2"),
      Self::UIAttendanceEvent16 => Some("UIAttendanceEvent16"),
      Self::UIEventTreasure => Some("UIEventTreasure"),
      Self::UIMultiFloorRaid => Some("UIMultiFloorRaid"),
      Self::UIEventMiniGameDreamMaker => Some("UIEventMiniGameDreamMaker"),
      Self::UIAttendanceEvent17 => Some("UIAttendanceEvent17"),
      Self::UIAttendanceEvent18 => Some("UIAttendanceEvent18"),
      Self::UNKNOWN1 => Some("UNKNOWN1"),
      Self::UNKNOWN2 => Some("UNKNOWN2"),
      Self::UNKNOWN3 => Some("UNKNOWN3"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for DialogCategory {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for DialogCategory {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for DialogCategory {
    type Output = DialogCategory;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for DialogCategory {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for DialogCategory {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for DialogCategory {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_DIALOG_CONDITION: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_DIALOG_CONDITION: i32 = 28;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_DIALOG_CONDITION: [DialogCondition; 29] = [
  DialogCondition::Idle,
  DialogCondition::Enter,
  DialogCondition::Exit,
  DialogCondition::Buy,
  DialogCondition::SoldOut,
  DialogCondition::BoxGachaNormal,
  DialogCondition::BoxGachaPrize,
  DialogCondition::Prize0,
  DialogCondition::Prize1,
  DialogCondition::Prize2,
  DialogCondition::Prize3,
  DialogCondition::Interaction,
  DialogCondition::Luck0,
  DialogCondition::Luck1,
  DialogCondition::Luck2,
  DialogCondition::Luck3,
  DialogCondition::Luck4,
  DialogCondition::Luck5,
  DialogCondition::StoryOpen,
  DialogCondition::CollectionOpen,
  DialogCondition::BoxGachaFinish,
  DialogCondition::FindTreasure,
  DialogCondition::GetTreasure,
  DialogCondition::RoundRenewal,
  DialogCondition::MiniGameDreamMakerEnough01,
  DialogCondition::MiniGameDreamMakerEnough02,
  DialogCondition::MiniGameDreamMakerEnough03,
  DialogCondition::MiniGameDreamMakerEnough04,
  DialogCondition::MiniGameDreamMakerDefault,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct DialogCondition(pub i32);
#[allow(non_upper_case_globals)]
impl DialogCondition {
  pub const Idle: Self = Self(0);
  pub const Enter: Self = Self(1);
  pub const Exit: Self = Self(2);
  pub const Buy: Self = Self(3);
  pub const SoldOut: Self = Self(4);
  pub const BoxGachaNormal: Self = Self(5);
  pub const BoxGachaPrize: Self = Self(6);
  pub const Prize0: Self = Self(7);
  pub const Prize1: Self = Self(8);
  pub const Prize2: Self = Self(9);
  pub const Prize3: Self = Self(10);
  pub const Interaction: Self = Self(11);
  pub const Luck0: Self = Self(12);
  pub const Luck1: Self = Self(13);
  pub const Luck2: Self = Self(14);
  pub const Luck3: Self = Self(15);
  pub const Luck4: Self = Self(16);
  pub const Luck5: Self = Self(17);
  pub const StoryOpen: Self = Self(18);
  pub const CollectionOpen: Self = Self(19);
  pub const BoxGachaFinish: Self = Self(20);
  pub const FindTreasure: Self = Self(21);
  pub const GetTreasure: Self = Self(22);
  pub const RoundRenewal: Self = Self(23);
  pub const MiniGameDreamMakerEnough01: Self = Self(24);
  pub const MiniGameDreamMakerEnough02: Self = Self(25);
  pub const MiniGameDreamMakerEnough03: Self = Self(26);
  pub const MiniGameDreamMakerEnough04: Self = Self(27);
  pub const MiniGameDreamMakerDefault: Self = Self(28);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 28;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Idle,
    Self::Enter,
    Self::Exit,
    Self::Buy,
    Self::SoldOut,
    Self::BoxGachaNormal,
    Self::BoxGachaPrize,
    Self::Prize0,
    Self::Prize1,
    Self::Prize2,
    Self::Prize3,
    Self::Interaction,
    Self::Luck0,
    Self::Luck1,
    Self::Luck2,
    Self::Luck3,
    Self::Luck4,
    Self::Luck5,
    Self::StoryOpen,
    Self::CollectionOpen,
    Self::BoxGachaFinish,
    Self::FindTreasure,
    Self::GetTreasure,
    Self::RoundRenewal,
    Self::MiniGameDreamMakerEnough01,
    Self::MiniGameDreamMakerEnough02,
    Self::MiniGameDreamMakerEnough03,
    Self::MiniGameDreamMakerEnough04,
    Self::MiniGameDreamMakerDefault,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Idle => Some("Idle"),
      Self::Enter => Some("Enter"),
      Self::Exit => Some("Exit"),
      Self::Buy => Some("Buy"),
      Self::SoldOut => Some("SoldOut"),
      Self::BoxGachaNormal => Some("BoxGachaNormal"),
      Self::BoxGachaPrize => Some("BoxGachaPrize"),
      Self::Prize0 => Some("Prize0"),
      Self::Prize1 => Some("Prize1"),
      Self::Prize2 => Some("Prize2"),
      Self::Prize3 => Some("Prize3"),
      Self::Interaction => Some("Interaction"),
      Self::Luck0 => Some("Luck0"),
      Self::Luck1 => Some("Luck1"),
      Self::Luck2 => Some("Luck2"),
      Self::Luck3 => Some("Luck3"),
      Self::Luck4 => Some("Luck4"),
      Self::Luck5 => Some("Luck5"),
      Self::StoryOpen => Some("StoryOpen"),
      Self::CollectionOpen => Some("CollectionOpen"),
      Self::BoxGachaFinish => Some("BoxGachaFinish"),
      Self::FindTreasure => Some("FindTreasure"),
      Self::GetTreasure => Some("GetTreasure"),
      Self::RoundRenewal => Some("RoundRenewal"),
      Self::MiniGameDreamMakerEnough01 => Some("MiniGameDreamMakerEnough01"),
      Self::MiniGameDreamMakerEnough02 => Some("MiniGameDreamMakerEnough02"),
      Self::MiniGameDreamMakerEnough03 => Some("MiniGameDreamMakerEnough03"),
      Self::MiniGameDreamMakerEnough04 => Some("MiniGameDreamMakerEnough04"),
      Self::MiniGameDreamMakerDefault => Some("MiniGameDreamMakerDefault"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for DialogCondition {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for DialogCondition {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for DialogCondition {
    type Output = DialogCondition;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for DialogCondition {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for DialogCondition {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for DialogCondition {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ANNIVERSARY: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ANNIVERSARY: i32 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ANNIVERSARY: [Anniversary; 3] = [
  Anniversary::None,
  Anniversary::UserBDay,
  Anniversary::StudentBDay,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Anniversary(pub i32);
#[allow(non_upper_case_globals)]
impl Anniversary {
  pub const None: Self = Self(0);
  pub const UserBDay: Self = Self(1);
  pub const StudentBDay: Self = Self(2);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::UserBDay,
    Self::StudentBDay,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::UserBDay => Some("UserBDay"),
      Self::StudentBDay => Some("StudentBDay"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Anniversary {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Anniversary {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Anniversary {
    type Output = Anniversary;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Anniversary {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Anniversary {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Anniversary {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_DIALOG_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_DIALOG_TYPE: i32 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_DIALOG_TYPE: [DialogType; 3] = [
  DialogType::Talk,
  DialogType::Think,
  DialogType::UITalk,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct DialogType(pub i32);
#[allow(non_upper_case_globals)]
impl DialogType {
  pub const Talk: Self = Self(0);
  pub const Think: Self = Self(1);
  pub const UITalk: Self = Self(2);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Talk,
    Self::Think,
    Self::UITalk,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Talk => Some("Talk"),
      Self::Think => Some("Think"),
      Self::UITalk => Some("UITalk"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for DialogType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for DialogType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for DialogType {
    type Output = DialogType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for DialogType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for DialogType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for DialogType {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_CVCOLLECTION_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_CVCOLLECTION_TYPE: i32 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_CVCOLLECTION_TYPE: [CVCollectionType; 3] = [
  CVCollectionType::CVNormal,
  CVCollectionType::CVEvent,
  CVCollectionType::CVEtc,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct CVCollectionType(pub i32);
#[allow(non_upper_case_globals)]
impl CVCollectionType {
  pub const CVNormal: Self = Self(0);
  pub const CVEvent: Self = Self(1);
  pub const CVEtc: Self = Self(2);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::CVNormal,
    Self::CVEvent,
    Self::CVEtc,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::CVNormal => Some("CVNormal"),
      Self::CVEvent => Some("CVEvent"),
      Self::CVEtc => Some("CVEtc"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for CVCollectionType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for CVCollectionType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for CVCollectionType {
    type Output = CVCollectionType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for CVCollectionType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for CVCollectionType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for CVCollectionType {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_PARCEL_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_PARCEL_TYPE: i32 = 22;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_PARCEL_TYPE: [ParcelType; 23] = [
  ParcelType::None,
  ParcelType::Character,
  ParcelType::Currency,
  ParcelType::Equipment,
  ParcelType::Item,
  ParcelType::GachaGroup,
  ParcelType::Product,
  ParcelType::Shop,
  ParcelType::MemoryLobby,
  ParcelType::AccountExp,
  ParcelType::CharacterExp,
  ParcelType::FavorExp,
  ParcelType::TSS,
  ParcelType::Furniture,
  ParcelType::ShopRefresh,
  ParcelType::LocationExp,
  ParcelType::Recipe,
  ParcelType::CharacterWeapon,
  ParcelType::CharacterGear,
  ParcelType::IdCardBackground,
  ParcelType::Emblem,
  ParcelType::Sticker,
  ParcelType::Costume,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ParcelType(pub i32);
#[allow(non_upper_case_globals)]
impl ParcelType {
  pub const None: Self = Self(0);
  pub const Character: Self = Self(1);
  pub const Currency: Self = Self(2);
  pub const Equipment: Self = Self(3);
  pub const Item: Self = Self(4);
  pub const GachaGroup: Self = Self(5);
  pub const Product: Self = Self(6);
  pub const Shop: Self = Self(7);
  pub const MemoryLobby: Self = Self(8);
  pub const AccountExp: Self = Self(9);
  pub const CharacterExp: Self = Self(10);
  pub const FavorExp: Self = Self(11);
  pub const TSS: Self = Self(12);
  pub const Furniture: Self = Self(13);
  pub const ShopRefresh: Self = Self(14);
  pub const LocationExp: Self = Self(15);
  pub const Recipe: Self = Self(16);
  pub const CharacterWeapon: Self = Self(17);
  pub const CharacterGear: Self = Self(18);
  pub const IdCardBackground: Self = Self(19);
  pub const Emblem: Self = Self(20);
  pub const Sticker: Self = Self(21);
  pub const Costume: Self = Self(22);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 22;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::Character,
    Self::Currency,
    Self::Equipment,
    Self::Item,
    Self::GachaGroup,
    Self::Product,
    Self::Shop,
    Self::MemoryLobby,
    Self::AccountExp,
    Self::CharacterExp,
    Self::FavorExp,
    Self::TSS,
    Self::Furniture,
    Self::ShopRefresh,
    Self::LocationExp,
    Self::Recipe,
    Self::CharacterWeapon,
    Self::CharacterGear,
    Self::IdCardBackground,
    Self::Emblem,
    Self::Sticker,
    Self::Costume,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::Character => Some("Character"),
      Self::Currency => Some("Currency"),
      Self::Equipment => Some("Equipment"),
      Self::Item => Some("Item"),
      Self::GachaGroup => Some("GachaGroup"),
      Self::Product => Some("Product"),
      Self::Shop => Some("Shop"),
      Self::MemoryLobby => Some("MemoryLobby"),
      Self::AccountExp => Some("AccountExp"),
      Self::CharacterExp => Some("CharacterExp"),
      Self::FavorExp => Some("FavorExp"),
      Self::TSS => Some("TSS"),
      Self::Furniture => Some("Furniture"),
      Self::ShopRefresh => Some("ShopRefresh"),
      Self::LocationExp => Some("LocationExp"),
      Self::Recipe => Some("Recipe"),
      Self::CharacterWeapon => Some("CharacterWeapon"),
      Self::CharacterGear => Some("CharacterGear"),
      Self::IdCardBackground => Some("IdCardBackground"),
      Self::Emblem => Some("Emblem"),
      Self::Sticker => Some("Sticker"),
      Self::Costume => Some("Costume"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ParcelType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for ParcelType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for ParcelType {
    type Output = ParcelType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for ParcelType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ParcelType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ParcelType {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_RARITY: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_RARITY: i32 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RARITY: [Rarity; 4] = [
  Rarity::N,
  Rarity::R,
  Rarity::SR,
  Rarity::SSR,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Rarity(pub i32);
#[allow(non_upper_case_globals)]
impl Rarity {
  pub const N: Self = Self(0);
  pub const R: Self = Self(1);
  pub const SR: Self = Self(2);
  pub const SSR: Self = Self(3);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::N,
    Self::R,
    Self::SR,
    Self::SSR,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::N => Some("N"),
      Self::R => Some("R"),
      Self::SR => Some("SR"),
      Self::SSR => Some("SSR"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Rarity {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Rarity {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Rarity {
    type Output = Rarity;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Rarity {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Rarity {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Rarity {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_TACTIC_ENTITY_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_TACTIC_ENTITY_TYPE: i32 = 1024;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_TACTIC_ENTITY_TYPE: [TacticEntityType; 12] = [
  TacticEntityType::None,
  TacticEntityType::Student,
  TacticEntityType::Minion,
  TacticEntityType::Elite,
  TacticEntityType::Champion,
  TacticEntityType::Boss,
  TacticEntityType::Obstacle,
  TacticEntityType::Servant,
  TacticEntityType::Vehicle,
  TacticEntityType::Summoned,
  TacticEntityType::Hallucination,
  TacticEntityType::DestructibleProjectile,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct TacticEntityType(pub i32);
#[allow(non_upper_case_globals)]
impl TacticEntityType {
  pub const None: Self = Self(0);
  pub const Student: Self = Self(1);
  pub const Minion: Self = Self(2);
  pub const Elite: Self = Self(4);
  pub const Champion: Self = Self(8);
  pub const Boss: Self = Self(16);
  pub const Obstacle: Self = Self(32);
  pub const Servant: Self = Self(64);
  pub const Vehicle: Self = Self(128);
  pub const Summoned: Self = Self(256);
  pub const Hallucination: Self = Self(512);
  pub const DestructibleProjectile: Self = Self(1024);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 1024;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::Student,
    Self::Minion,
    Self::Elite,
    Self::Champion,
    Self::Boss,
    Self::Obstacle,
    Self::Servant,
    Self::Vehicle,
    Self::Summoned,
    Self::Hallucination,
    Self::DestructibleProjectile,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::Student => Some("Student"),
      Self::Minion => Some("Minion"),
      Self::Elite => Some("Elite"),
      Self::Champion => Some("Champion"),
      Self::Boss => Some("Boss"),
      Self::Obstacle => Some("Obstacle"),
      Self::Servant => Some("Servant"),
      Self::Vehicle => Some("Vehicle"),
      Self::Summoned => Some("Summoned"),
      Self::Hallucination => Some("Hallucination"),
      Self::DestructibleProjectile => Some("DestructibleProjectile"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for TacticEntityType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for TacticEntityType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for TacticEntityType {
    type Output = TacticEntityType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for TacticEntityType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for TacticEntityType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for TacticEntityType {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_TACTIC_ROLE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_TACTIC_ROLE: i32 = 5;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_TACTIC_ROLE: [TacticRole; 6] = [
  TacticRole::None,
  TacticRole::DamageDealer,
  TacticRole::Tanker,
  TacticRole::Supporter,
  TacticRole::Healer,
  TacticRole::Vehicle,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct TacticRole(pub i32);
#[allow(non_upper_case_globals)]
impl TacticRole {
  pub const None: Self = Self(0);
  pub const DamageDealer: Self = Self(1);
  pub const Tanker: Self = Self(2);
  pub const Supporter: Self = Self(3);
  pub const Healer: Self = Self(4);
  pub const Vehicle: Self = Self(5);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 5;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::DamageDealer,
    Self::Tanker,
    Self::Supporter,
    Self::Healer,
    Self::Vehicle,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::DamageDealer => Some("DamageDealer"),
      Self::Tanker => Some("Tanker"),
      Self::Supporter => Some("Supporter"),
      Self::Healer => Some("Healer"),
      Self::Vehicle => Some("Vehicle"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for TacticRole {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for TacticRole {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for TacticRole {
    type Output = TacticRole;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for TacticRole {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for TacticRole {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for TacticRole {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_WEAPON_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_WEAPON_TYPE: i32 = 20;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_WEAPON_TYPE: [WeaponType; 21] = [
  WeaponType::None,
  WeaponType::SG,
  WeaponType::SMG,
  WeaponType::AR,
  WeaponType::GL,
  WeaponType::HG,
  WeaponType::RL,
  WeaponType::SR,
  WeaponType::DSMG,
  WeaponType::RG,
  WeaponType::DSG,
  WeaponType::Vulcan,
  WeaponType::Missile,
  WeaponType::Cannon,
  WeaponType::Taser,
  WeaponType::MG,
  WeaponType::Binah,
  WeaponType::MT,
  WeaponType::Relic,
  WeaponType::FT,
  WeaponType::Akemi,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct WeaponType(pub i32);
#[allow(non_upper_case_globals)]
impl WeaponType {
  pub const None: Self = Self(0);
  pub const SG: Self = Self(1);
  pub const SMG: Self = Self(2);
  pub const AR: Self = Self(3);
  pub const GL: Self = Self(4);
  pub const HG: Self = Self(5);
  pub const RL: Self = Self(6);
  pub const SR: Self = Self(7);
  pub const DSMG: Self = Self(8);
  pub const RG: Self = Self(9);
  pub const DSG: Self = Self(10);
  pub const Vulcan: Self = Self(11);
  pub const Missile: Self = Self(12);
  pub const Cannon: Self = Self(13);
  pub const Taser: Self = Self(14);
  pub const MG: Self = Self(15);
  pub const Binah: Self = Self(16);
  pub const MT: Self = Self(17);
  pub const Relic: Self = Self(18);
  pub const FT: Self = Self(19);
  pub const Akemi: Self = Self(20);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 20;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::SG,
    Self::SMG,
    Self::AR,
    Self::GL,
    Self::HG,
    Self::RL,
    Self::SR,
    Self::DSMG,
    Self::RG,
    Self::DSG,
    Self::Vulcan,
    Self::Missile,
    Self::Cannon,
    Self::Taser,
    Self::MG,
    Self::Binah,
    Self::MT,
    Self::Relic,
    Self::FT,
    Self::Akemi,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::SG => Some("SG"),
      Self::SMG => Some("SMG"),
      Self::AR => Some("AR"),
      Self::GL => Some("GL"),
      Self::HG => Some("HG"),
      Self::RL => Some("RL"),
      Self::SR => Some("SR"),
      Self::DSMG => Some("DSMG"),
      Self::RG => Some("RG"),
      Self::DSG => Some("DSG"),
      Self::Vulcan => Some("Vulcan"),
      Self::Missile => Some("Missile"),
      Self::Cannon => Some("Cannon"),
      Self::Taser => Some("Taser"),
      Self::MG => Some("MG"),
      Self::Binah => Some("Binah"),
      Self::MT => Some("MT"),
      Self::Relic => Some("Relic"),
      Self::FT => Some("FT"),
      Self::Akemi => Some("Akemi"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for WeaponType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for WeaponType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for WeaponType {
    type Output = WeaponType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for WeaponType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for WeaponType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for WeaponType {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_TACTIC_RANGE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_TACTIC_RANGE: i32 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_TACTIC_RANGE: [TacticRange; 3] = [
  TacticRange::Back,
  TacticRange::Front,
  TacticRange::Middle,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct TacticRange(pub i32);
#[allow(non_upper_case_globals)]
impl TacticRange {
  pub const Back: Self = Self(0);
  pub const Front: Self = Self(1);
  pub const Middle: Self = Self(2);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Back,
    Self::Front,
    Self::Middle,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Back => Some("Back"),
      Self::Front => Some("Front"),
      Self::Middle => Some("Middle"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for TacticRange {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for TacticRange {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for TacticRange {
    type Output = TacticRange;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for TacticRange {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for TacticRange {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for TacticRange {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_BULLET_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_BULLET_TYPE: i32 = 6;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_BULLET_TYPE: [BulletType; 7] = [
  BulletType::Normal,
  BulletType::Pierce,
  BulletType::Explosion,
  BulletType::Siege,
  BulletType::Mystic,
  BulletType::None,
  BulletType::Sonic,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct BulletType(pub i32);
#[allow(non_upper_case_globals)]
impl BulletType {
  pub const Normal: Self = Self(0);
  pub const Pierce: Self = Self(1);
  pub const Explosion: Self = Self(2);
  pub const Siege: Self = Self(3);
  pub const Mystic: Self = Self(4);
  pub const None: Self = Self(5);
  pub const Sonic: Self = Self(6);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 6;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Normal,
    Self::Pierce,
    Self::Explosion,
    Self::Siege,
    Self::Mystic,
    Self::None,
    Self::Sonic,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Normal => Some("Normal"),
      Self::Pierce => Some("Pierce"),
      Self::Explosion => Some("Explosion"),
      Self::Siege => Some("Siege"),
      Self::Mystic => Some("Mystic"),
      Self::None => Some("None"),
      Self::Sonic => Some("Sonic"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for BulletType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for BulletType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for BulletType {
    type Output = BulletType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for BulletType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for BulletType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for BulletType {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ARMOR_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ARMOR_TYPE: i32 = 5;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ARMOR_TYPE: [ArmorType; 6] = [
  ArmorType::LightArmor,
  ArmorType::HeavyArmor,
  ArmorType::Unarmed,
  ArmorType::Structure,
  ArmorType::Normal,
  ArmorType::ElasticArmor,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ArmorType(pub i32);
#[allow(non_upper_case_globals)]
impl ArmorType {
  pub const LightArmor: Self = Self(0);
  pub const HeavyArmor: Self = Self(1);
  pub const Unarmed: Self = Self(2);
  pub const Structure: Self = Self(3);
  pub const Normal: Self = Self(4);
  pub const ElasticArmor: Self = Self(5);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 5;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::LightArmor,
    Self::HeavyArmor,
    Self::Unarmed,
    Self::Structure,
    Self::Normal,
    Self::ElasticArmor,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::LightArmor => Some("LightArmor"),
      Self::HeavyArmor => Some("HeavyArmor"),
      Self::Unarmed => Some("Unarmed"),
      Self::Structure => Some("Structure"),
      Self::Normal => Some("Normal"),
      Self::ElasticArmor => Some("ElasticArmor"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ArmorType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for ArmorType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for ArmorType {
    type Output = ArmorType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for ArmorType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ArmorType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ArmorType {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_AIM_IKTYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_AIM_IKTYPE: i32 = 7;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_AIM_IKTYPE: [AimIKType; 8] = [
  AimIKType::None,
  AimIKType::OneHandRight,
  AimIKType::OneHandLeft,
  AimIKType::TwoHandRight,
  AimIKType::TwoHandLeft,
  AimIKType::Tripod,
  AimIKType::Dual,
  AimIKType::Max,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct AimIKType(pub i32);
#[allow(non_upper_case_globals)]
impl AimIKType {
  pub const None: Self = Self(0);
  pub const OneHandRight: Self = Self(1);
  pub const OneHandLeft: Self = Self(2);
  pub const TwoHandRight: Self = Self(3);
  pub const TwoHandLeft: Self = Self(4);
  pub const Tripod: Self = Self(5);
  pub const Dual: Self = Self(6);
  pub const Max: Self = Self(7);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 7;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::OneHandRight,
    Self::OneHandLeft,
    Self::TwoHandRight,
    Self::TwoHandLeft,
    Self::Tripod,
    Self::Dual,
    Self::Max,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::OneHandRight => Some("OneHandRight"),
      Self::OneHandLeft => Some("OneHandLeft"),
      Self::TwoHandRight => Some("TwoHandRight"),
      Self::TwoHandLeft => Some("TwoHandLeft"),
      Self::Tripod => Some("Tripod"),
      Self::Dual => Some("Dual"),
      Self::Max => Some("Max"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for AimIKType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for AimIKType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for AimIKType {
    type Output = AimIKType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for AimIKType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for AimIKType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for AimIKType {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SCHOOL: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SCHOOL: i32 = 16;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SCHOOL: [School; 17] = [
  School::None,
  School::Hyakkiyako,
  School::RedWinter,
  School::Trinity,
  School::Gehenna,
  School::Abydos,
  School::Millennium,
  School::Arius,
  School::Shanhaijing,
  School::Valkyrie,
  School::WildHunt,
  School::SRT,
  School::SCHALE,
  School::ETC,
  School::Tokiwadai,
  School::Sakugawa,
  School::Highlander,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct School(pub i32);
#[allow(non_upper_case_globals)]
impl School {
  pub const None: Self = Self(0);
  pub const Hyakkiyako: Self = Self(1);
  pub const RedWinter: Self = Self(2);
  pub const Trinity: Self = Self(3);
  pub const Gehenna: Self = Self(4);
  pub const Abydos: Self = Self(5);
  pub const Millennium: Self = Self(6);
  pub const Arius: Self = Self(7);
  pub const Shanhaijing: Self = Self(8);
  pub const Valkyrie: Self = Self(9);
  pub const WildHunt: Self = Self(10);
  pub const SRT: Self = Self(11);
  pub const SCHALE: Self = Self(12);
  pub const ETC: Self = Self(13);
  pub const Tokiwadai: Self = Self(14);
  pub const Sakugawa: Self = Self(15);
  pub const Highlander: Self = Self(16);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 16;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::Hyakkiyako,
    Self::RedWinter,
    Self::Trinity,
    Self::Gehenna,
    Self::Abydos,
    Self::Millennium,
    Self::Arius,
    Self::Shanhaijing,
    Self::Valkyrie,
    Self::WildHunt,
    Self::SRT,
    Self::SCHALE,
    Self::ETC,
    Self::Tokiwadai,
    Self::Sakugawa,
    Self::Highlander,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::Hyakkiyako => Some("Hyakkiyako"),
      Self::RedWinter => Some("RedWinter"),
      Self::Trinity => Some("Trinity"),
      Self::Gehenna => Some("Gehenna"),
      Self::Abydos => Some("Abydos"),
      Self::Millennium => Some("Millennium"),
      Self::Arius => Some("Arius"),
      Self::Shanhaijing => Some("Shanhaijing"),
      Self::Valkyrie => Some("Valkyrie"),
      Self::WildHunt => Some("WildHunt"),
      Self::SRT => Some("SRT"),
      Self::SCHALE => Some("SCHALE"),
      Self::ETC => Some("ETC"),
      Self::Tokiwadai => Some("Tokiwadai"),
      Self::Sakugawa => Some("Sakugawa"),
      Self::Highlander => Some("Highlander"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for School {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for School {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for School {
    type Output = School;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for School {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for School {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for School {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_CLUB: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_CLUB: i32 = 51;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_CLUB: [Club; 52] = [
  Club::None,
  Club::Engineer,
  Club::CleanNClearing,
  Club::KnightsHospitaller,
  Club::IndeGEHENNA,
  Club::IndeMILLENNIUM,
  Club::IndeHyakkiyako,
  Club::IndeShanhaijing,
  Club::IndeTrinity,
  Club::FoodService,
  Club::Countermeasure,
  Club::BookClub,
  Club::MatsuriOffice,
  Club::GourmetClub,
  Club::HoukagoDessert,
  Club::RedwinterSecretary,
  Club::Schale,
  Club::TheSeminar,
  Club::AriusSqud,
  Club::Justice,
  Club::Fuuki,
  Club::Kohshinjo68,
  Club::Meihuayuan,
  Club::SisterHood,
  Club::GameDev,
  Club::anzenkyoku,
  Club::RemedialClass,
  Club::SPTF,
  Club::TrinityVigilance,
  Club::Veritas,
  Club::TrainingClub,
  Club::Onmyobu,
  Club::Shugyobu,
  Club::Endanbou,
  Club::NinpoKenkyubu,
  Club::Class227,
  Club::EmptyClub,
  Club::Emergentology,
  Club::RabbitPlatoon,
  Club::PandemoniumSociety,
  Club::HotSpringsDepartment,
  Club::TeaParty,
  Club::PublicPeaceBureau,
  Club::Genryumon,
  Club::BlackTortoisePromenade,
  Club::LaborParty,
  Club::KnowledgeLiberationFront,
  Club::Hyakkayouran,
  Club::ShinySparkleSociety,
  Club::AbydosStudentCouncil,
  Club::CentralControlCenter,
  Club::FreightLogisticsDepartment,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Club(pub i32);
#[allow(non_upper_case_globals)]
impl Club {
  pub const None: Self = Self(0);
  pub const Engineer: Self = Self(1);
  pub const CleanNClearing: Self = Self(2);
  pub const KnightsHospitaller: Self = Self(3);
  pub const IndeGEHENNA: Self = Self(4);
  pub const IndeMILLENNIUM: Self = Self(5);
  pub const IndeHyakkiyako: Self = Self(6);
  pub const IndeShanhaijing: Self = Self(7);
  pub const IndeTrinity: Self = Self(8);
  pub const FoodService: Self = Self(9);
  pub const Countermeasure: Self = Self(10);
  pub const BookClub: Self = Self(11);
  pub const MatsuriOffice: Self = Self(12);
  pub const GourmetClub: Self = Self(13);
  pub const HoukagoDessert: Self = Self(14);
  pub const RedwinterSecretary: Self = Self(15);
  pub const Schale: Self = Self(16);
  pub const TheSeminar: Self = Self(17);
  pub const AriusSqud: Self = Self(18);
  pub const Justice: Self = Self(19);
  pub const Fuuki: Self = Self(20);
  pub const Kohshinjo68: Self = Self(21);
  pub const Meihuayuan: Self = Self(22);
  pub const SisterHood: Self = Self(23);
  pub const GameDev: Self = Self(24);
  pub const anzenkyoku: Self = Self(25);
  pub const RemedialClass: Self = Self(26);
  pub const SPTF: Self = Self(27);
  pub const TrinityVigilance: Self = Self(28);
  pub const Veritas: Self = Self(29);
  pub const TrainingClub: Self = Self(30);
  pub const Onmyobu: Self = Self(31);
  pub const Shugyobu: Self = Self(32);
  pub const Endanbou: Self = Self(33);
  pub const NinpoKenkyubu: Self = Self(34);
  pub const Class227: Self = Self(35);
  pub const EmptyClub: Self = Self(36);
  pub const Emergentology: Self = Self(37);
  pub const RabbitPlatoon: Self = Self(38);
  pub const PandemoniumSociety: Self = Self(39);
  pub const HotSpringsDepartment: Self = Self(40);
  pub const TeaParty: Self = Self(41);
  pub const PublicPeaceBureau: Self = Self(42);
  pub const Genryumon: Self = Self(43);
  pub const BlackTortoisePromenade: Self = Self(44);
  pub const LaborParty: Self = Self(45);
  pub const KnowledgeLiberationFront: Self = Self(46);
  pub const Hyakkayouran: Self = Self(47);
  pub const ShinySparkleSociety: Self = Self(48);
  pub const AbydosStudentCouncil: Self = Self(49);
  pub const CentralControlCenter: Self = Self(50);
  pub const FreightLogisticsDepartment: Self = Self(51);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 51;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::Engineer,
    Self::CleanNClearing,
    Self::KnightsHospitaller,
    Self::IndeGEHENNA,
    Self::IndeMILLENNIUM,
    Self::IndeHyakkiyako,
    Self::IndeShanhaijing,
    Self::IndeTrinity,
    Self::FoodService,
    Self::Countermeasure,
    Self::BookClub,
    Self::MatsuriOffice,
    Self::GourmetClub,
    Self::HoukagoDessert,
    Self::RedwinterSecretary,
    Self::Schale,
    Self::TheSeminar,
    Self::AriusSqud,
    Self::Justice,
    Self::Fuuki,
    Self::Kohshinjo68,
    Self::Meihuayuan,
    Self::SisterHood,
    Self::GameDev,
    Self::anzenkyoku,
    Self::RemedialClass,
    Self::SPTF,
    Self::TrinityVigilance,
    Self::Veritas,
    Self::TrainingClub,
    Self::Onmyobu,
    Self::Shugyobu,
    Self::Endanbou,
    Self::NinpoKenkyubu,
    Self::Class227,
    Self::EmptyClub,
    Self::Emergentology,
    Self::RabbitPlatoon,
    Self::PandemoniumSociety,
    Self::HotSpringsDepartment,
    Self::TeaParty,
    Self::PublicPeaceBureau,
    Self::Genryumon,
    Self::BlackTortoisePromenade,
    Self::LaborParty,
    Self::KnowledgeLiberationFront,
    Self::Hyakkayouran,
    Self::ShinySparkleSociety,
    Self::AbydosStudentCouncil,
    Self::CentralControlCenter,
    Self::FreightLogisticsDepartment,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::Engineer => Some("Engineer"),
      Self::CleanNClearing => Some("CleanNClearing"),
      Self::KnightsHospitaller => Some("KnightsHospitaller"),
      Self::IndeGEHENNA => Some("IndeGEHENNA"),
      Self::IndeMILLENNIUM => Some("IndeMILLENNIUM"),
      Self::IndeHyakkiyako => Some("IndeHyakkiyako"),
      Self::IndeShanhaijing => Some("IndeShanhaijing"),
      Self::IndeTrinity => Some("IndeTrinity"),
      Self::FoodService => Some("FoodService"),
      Self::Countermeasure => Some("Countermeasure"),
      Self::BookClub => Some("BookClub"),
      Self::MatsuriOffice => Some("MatsuriOffice"),
      Self::GourmetClub => Some("GourmetClub"),
      Self::HoukagoDessert => Some("HoukagoDessert"),
      Self::RedwinterSecretary => Some("RedwinterSecretary"),
      Self::Schale => Some("Schale"),
      Self::TheSeminar => Some("TheSeminar"),
      Self::AriusSqud => Some("AriusSqud"),
      Self::Justice => Some("Justice"),
      Self::Fuuki => Some("Fuuki"),
      Self::Kohshinjo68 => Some("Kohshinjo68"),
      Self::Meihuayuan => Some("Meihuayuan"),
      Self::SisterHood => Some("SisterHood"),
      Self::GameDev => Some("GameDev"),
      Self::anzenkyoku => Some("anzenkyoku"),
      Self::RemedialClass => Some("RemedialClass"),
      Self::SPTF => Some("SPTF"),
      Self::TrinityVigilance => Some("TrinityVigilance"),
      Self::Veritas => Some("Veritas"),
      Self::TrainingClub => Some("TrainingClub"),
      Self::Onmyobu => Some("Onmyobu"),
      Self::Shugyobu => Some("Shugyobu"),
      Self::Endanbou => Some("Endanbou"),
      Self::NinpoKenkyubu => Some("NinpoKenkyubu"),
      Self::Class227 => Some("Class227"),
      Self::EmptyClub => Some("EmptyClub"),
      Self::Emergentology => Some("Emergentology"),
      Self::RabbitPlatoon => Some("RabbitPlatoon"),
      Self::PandemoniumSociety => Some("PandemoniumSociety"),
      Self::HotSpringsDepartment => Some("HotSpringsDepartment"),
      Self::TeaParty => Some("TeaParty"),
      Self::PublicPeaceBureau => Some("PublicPeaceBureau"),
      Self::Genryumon => Some("Genryumon"),
      Self::BlackTortoisePromenade => Some("BlackTortoisePromenade"),
      Self::LaborParty => Some("LaborParty"),
      Self::KnowledgeLiberationFront => Some("KnowledgeLiberationFront"),
      Self::Hyakkayouran => Some("Hyakkayouran"),
      Self::ShinySparkleSociety => Some("ShinySparkleSociety"),
      Self::AbydosStudentCouncil => Some("AbydosStudentCouncil"),
      Self::CentralControlCenter => Some("CentralControlCenter"),
      Self::FreightLogisticsDepartment => Some("FreightLogisticsDepartment"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Club {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Club {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Club {
    type Output = Club;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Club {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Club {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Club {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_STAT_LEVEL_UP_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_STAT_LEVEL_UP_TYPE: i32 = 4;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_STAT_LEVEL_UP_TYPE: [StatLevelUpType; 5] = [
  StatLevelUpType::Standard,
  StatLevelUpType::Premature,
  StatLevelUpType::LateBloom,
  StatLevelUpType::Obstacle,
  StatLevelUpType::TimeAttack,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct StatLevelUpType(pub i32);
#[allow(non_upper_case_globals)]
impl StatLevelUpType {
  pub const Standard: Self = Self(0);
  pub const Premature: Self = Self(1);
  pub const LateBloom: Self = Self(2);
  pub const Obstacle: Self = Self(3);
  pub const TimeAttack: Self = Self(4);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 4;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Standard,
    Self::Premature,
    Self::LateBloom,
    Self::Obstacle,
    Self::TimeAttack,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Standard => Some("Standard"),
      Self::Premature => Some("Premature"),
      Self::LateBloom => Some("LateBloom"),
      Self::Obstacle => Some("Obstacle"),
      Self::TimeAttack => Some("TimeAttack"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for StatLevelUpType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for StatLevelUpType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for StatLevelUpType {
    type Output = StatLevelUpType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for StatLevelUpType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for StatLevelUpType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for StatLevelUpType {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SQUAD_TYPE: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SQUAD_TYPE: i32 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SQUAD_TYPE: [SquadType; 4] = [
  SquadType::None,
  SquadType::Main,
  SquadType::Support,
  SquadType::TSS,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SquadType(pub i32);
#[allow(non_upper_case_globals)]
impl SquadType {
  pub const None: Self = Self(0);
  pub const Main: Self = Self(1);
  pub const Support: Self = Self(2);
  pub const TSS: Self = Self(3);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::Main,
    Self::Support,
    Self::TSS,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::Main => Some("Main"),
      Self::Support => Some("Support"),
      Self::TSS => Some("TSS"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SquadType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SquadType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SquadType {
    type Output = SquadType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SquadType {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SquadType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SquadType {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EQUIPMENT_CATEGORY: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EQUIPMENT_CATEGORY: i32 = 14;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EQUIPMENT_CATEGORY: [EquipmentCategory; 15] = [
  EquipmentCategory::Unable,
  EquipmentCategory::Exp,
  EquipmentCategory::Bag,
  EquipmentCategory::Hat,
  EquipmentCategory::Gloves,
  EquipmentCategory::Shoes,
  EquipmentCategory::Badge,
  EquipmentCategory::Hairpin,
  EquipmentCategory::Charm,
  EquipmentCategory::Watch,
  EquipmentCategory::Necklace,
  EquipmentCategory::WeaponExpGrowthA,
  EquipmentCategory::WeaponExpGrowthB,
  EquipmentCategory::WeaponExpGrowthC,
  EquipmentCategory::WeaponExpGrowthZ,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct EquipmentCategory(pub i32);
#[allow(non_upper_case_globals)]
impl EquipmentCategory {
  pub const Unable: Self = Self(0);
  pub const Exp: Self = Self(1);
  pub const Bag: Self = Self(2);
  pub const Hat: Self = Self(3);
  pub const Gloves: Self = Self(4);
  pub const Shoes: Self = Self(5);
  pub const Badge: Self = Self(6);
  pub const Hairpin: Self = Self(7);
  pub const Charm: Self = Self(8);
  pub const Watch: Self = Self(9);
  pub const Necklace: Self = Self(10);
  pub const WeaponExpGrowthA: Self = Self(11);
  pub const WeaponExpGrowthB: Self = Self(12);
  pub const WeaponExpGrowthC: Self = Self(13);
  pub const WeaponExpGrowthZ: Self = Self(14);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 14;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Unable,
    Self::Exp,
    Self::Bag,
    Self::Hat,
    Self::Gloves,
    Self::Shoes,
    Self::Badge,
    Self::Hairpin,
    Self::Charm,
    Self::Watch,
    Self::Necklace,
    Self::WeaponExpGrowthA,
    Self::WeaponExpGrowthB,
    Self::WeaponExpGrowthC,
    Self::WeaponExpGrowthZ,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Unable => Some("Unable"),
      Self::Exp => Some("Exp"),
      Self::Bag => Some("Bag"),
      Self::Hat => Some("Hat"),
      Self::Gloves => Some("Gloves"),
      Self::Shoes => Some("Shoes"),
      Self::Badge => Some("Badge"),
      Self::Hairpin => Some("Hairpin"),
      Self::Charm => Some("Charm"),
      Self::Watch => Some("Watch"),
      Self::Necklace => Some("Necklace"),
      Self::WeaponExpGrowthA => Some("WeaponExpGrowthA"),
      Self::WeaponExpGrowthB => Some("WeaponExpGrowthB"),
      Self::WeaponExpGrowthC => Some("WeaponExpGrowthC"),
      Self::WeaponExpGrowthZ => Some("WeaponExpGrowthZ"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for EquipmentCategory {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for EquipmentCategory {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for EquipmentCategory {
    type Output = EquipmentCategory;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for EquipmentCategory {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for EquipmentCategory {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for EquipmentCategory {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_TAG: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_TAG: i32 = 3003;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_TAG: [Tag; 3004] = [
  Tag::A,
  Tag::a,
  Tag::B,
  Tag::b,
  Tag::C,
  Tag::c,
  Tag::D,
  Tag::d,
  Tag::E,
  Tag::e,
  Tag::F,
  Tag::f,
  Tag::G,
  Tag::g,
  Tag::H,
  Tag::h,
  Tag::I,
  Tag::i,
  Tag::J,
  Tag::j,
  Tag::K,
  Tag::k,
  Tag::L,
  Tag::l,
  Tag::M,
  Tag::m,
  Tag::N,
  Tag::n,
  Tag::O,
  Tag::o,
  Tag::P,
  Tag::p,
  Tag::Q,
  Tag::q,
  Tag::R,
  Tag::r,
  Tag::S,
  Tag::s,
  Tag::T,
  Tag::t,
  Tag::U,
  Tag::u,
  Tag::V,
  Tag::v,
  Tag::W,
  Tag::w,
  Tag::X,
  Tag::x,
  Tag::Y,
  Tag::y,
  Tag::Z,
  Tag::z,
  Tag::aA,
  Tag::aa,
  Tag::aB,
  Tag::ab,
  Tag::aC,
  Tag::ac,
  Tag::aD,
  Tag::ad,
  Tag::aE,
  Tag::ae,
  Tag::aF,
  Tag::af,
  Tag::aG,
  Tag::ag,
  Tag::aH,
  Tag::ah,
  Tag::aI,
  Tag::ai,
  Tag::aJ,
  Tag::aj,
  Tag::aK,
  Tag::ak,
  Tag::aL,
  Tag::al,
  Tag::aM,
  Tag::am,
  Tag::aN,
  Tag::an,
  Tag::aO,
  Tag::ao,
  Tag::aP,
  Tag::ap,
  Tag::aQ,
  Tag::aq,
  Tag::aR,
  Tag::ar,
  Tag::aS,
  Tag::as_,
  Tag::aT,
  Tag::at,
  Tag::aU,
  Tag::au,
  Tag::aV,
  Tag::av,
  Tag::aW,
  Tag::aw,
  Tag::aX,
  Tag::ax,
  Tag::aY,
  Tag::ay,
  Tag::aZ,
  Tag::az,
  Tag::BA,
  Tag::Ba,
  Tag::BB,
  Tag::Bb,
  Tag::BC,
  Tag::Bc,
  Tag::BD,
  Tag::Bd,
  Tag::BE,
  Tag::Be,
  Tag::BF,
  Tag::Bf,
  Tag::BG,
  Tag::Bg,
  Tag::BH,
  Tag::Bh,
  Tag::BI,
  Tag::Bi,
  Tag::BJ,
  Tag::Bj,
  Tag::BK,
  Tag::Bk,
  Tag::BL,
  Tag::Bl,
  Tag::BM,
  Tag::Bm,
  Tag::BN,
  Tag::Bn,
  Tag::BO,
  Tag::Bo,
  Tag::BP,
  Tag::Bp,
  Tag::BQ,
  Tag::Bq,
  Tag::BR,
  Tag::Br,
  Tag::BS,
  Tag::Bs,
  Tag::BT,
  Tag::Bt,
  Tag::BU,
  Tag::Bu,
  Tag::BV,
  Tag::Bv,
  Tag::BW,
  Tag::Bw,
  Tag::BX,
  Tag::Bx,
  Tag::BY,
  Tag::By,
  Tag::BZ,
  Tag::Bz,
  Tag::bA,
  Tag::ba,
  Tag::bB,
  Tag::bb,
  Tag::bC,
  Tag::bc,
  Tag::bD,
  Tag::bd,
  Tag::bE,
  Tag::be,
  Tag::bF,
  Tag::bf,
  Tag::bG,
  Tag::bg,
  Tag::bH,
  Tag::bh,
  Tag::bI,
  Tag::bi,
  Tag::bJ,
  Tag::bj,
  Tag::bK,
  Tag::bk,
  Tag::bL,
  Tag::bl,
  Tag::bM,
  Tag::bm,
  Tag::bN,
  Tag::bn,
  Tag::bO,
  Tag::bo,
  Tag::bP,
  Tag::bp,
  Tag::bQ,
  Tag::bq,
  Tag::bR,
  Tag::br,
  Tag::bS,
  Tag::bs,
  Tag::bT,
  Tag::bt,
  Tag::bU,
  Tag::bu,
  Tag::bV,
  Tag::bv,
  Tag::bW,
  Tag::bw,
  Tag::bX,
  Tag::bx,
  Tag::bY,
  Tag::by,
  Tag::bZ,
  Tag::bz,
  Tag::CA,
  Tag::Ca,
  Tag::CB,
  Tag::Cb,
  Tag::CC,
  Tag::Cc,
  Tag::CD,
  Tag::Cd,
  Tag::CE,
  Tag::Ce,
  Tag::CF,
  Tag::Cf,
  Tag::CG,
  Tag::Cg,
  Tag::CH,
  Tag::Ch,
  Tag::CI,
  Tag::Ci,
  Tag::CJ,
  Tag::Cj,
  Tag::CK,
  Tag::Ck,
  Tag::CL,
  Tag::Cl,
  Tag::CM,
  Tag::Cm,
  Tag::CN,
  Tag::Cn,
  Tag::CO,
  Tag::Co,
  Tag::CP,
  Tag::Cp,
  Tag::CQ,
  Tag::Cq,
  Tag::CR,
  Tag::Cr,
  Tag::CS,
  Tag::Cs,
  Tag::CT,
  Tag::Ct,
  Tag::CU,
  Tag::Cu,
  Tag::CV,
  Tag::Cv,
  Tag::CW,
  Tag::Cw,
  Tag::CX,
  Tag::Cx,
  Tag::CY,
  Tag::Cy,
  Tag::CZ,
  Tag::Cz,
  Tag::cA,
  Tag::ca,
  Tag::cB,
  Tag::cb,
  Tag::cC,
  Tag::cc,
  Tag::cD,
  Tag::cd,
  Tag::cE,
  Tag::ce,
  Tag::cF,
  Tag::cf,
  Tag::cG,
  Tag::cg,
  Tag::cH,
  Tag::ch,
  Tag::cI,
  Tag::ci,
  Tag::cJ,
  Tag::cj,
  Tag::cK,
  Tag::ck,
  Tag::cL,
  Tag::cl,
  Tag::cM,
  Tag::cm,
  Tag::cN,
  Tag::cn,
  Tag::cO,
  Tag::co,
  Tag::cP,
  Tag::cp,
  Tag::cQ,
  Tag::cq,
  Tag::cR,
  Tag::cr,
  Tag::cS,
  Tag::cs,
  Tag::cT,
  Tag::ct,
  Tag::cU,
  Tag::cu,
  Tag::cV,
  Tag::cv,
  Tag::cW,
  Tag::cw,
  Tag::cX,
  Tag::cx,
  Tag::cY,
  Tag::cy,
  Tag::cZ,
  Tag::cz,
  Tag::DA,
  Tag::Da,
  Tag::DB,
  Tag::Db,
  Tag::DC,
  Tag::Dc,
  Tag::DD,
  Tag::Dd,
  Tag::DE,
  Tag::De,
  Tag::DF,
  Tag::Df,
  Tag::DG,
  Tag::Dg,
  Tag::DH,
  Tag::Dh,
  Tag::DI,
  Tag::Di,
  Tag::DJ,
  Tag::Dj,
  Tag::DK,
  Tag::Dk,
  Tag::DL,
  Tag::Dl,
  Tag::DM,
  Tag::Dm,
  Tag::DN,
  Tag::Dn,
  Tag::DO,
  Tag::Do,
  Tag::DP,
  Tag::Dp,
  Tag::DQ,
  Tag::Dq,
  Tag::DR,
  Tag::Dr,
  Tag::DS,
  Tag::Ds,
  Tag::DT,
  Tag::Dt,
  Tag::DU,
  Tag::Du,
  Tag::DV,
  Tag::Dv,
  Tag::DW,
  Tag::Dw,
  Tag::DX,
  Tag::Dx,
  Tag::DY,
  Tag::Dy,
  Tag::DZ,
  Tag::Dz,
  Tag::dA,
  Tag::da,
  Tag::dB,
  Tag::db,
  Tag::dC,
  Tag::dc,
  Tag::dD,
  Tag::dd,
  Tag::dE,
  Tag::de,
  Tag::dF,
  Tag::df,
  Tag::dG,
  Tag::dg,
  Tag::dH,
  Tag::dh,
  Tag::dI,
  Tag::di,
  Tag::dJ,
  Tag::dj,
  Tag::dK,
  Tag::dk,
  Tag::dL,
  Tag::dl,
  Tag::dM,
  Tag::dm,
  Tag::dN,
  Tag::dn,
  Tag::dO,
  Tag::do_,
  Tag::dP,
  Tag::dp,
  Tag::dQ,
  Tag::dq,
  Tag::dR,
  Tag::dr,
  Tag::dS,
  Tag::ds,
  Tag::dT,
  Tag::dt,
  Tag::dU,
  Tag::du,
  Tag::dV,
  Tag::dv,
  Tag::dW,
  Tag::dw,
  Tag::dX,
  Tag::dx,
  Tag::dY,
  Tag::dy,
  Tag::dZ,
  Tag::dz,
  Tag::EA,
  Tag::Ea,
  Tag::EB,
  Tag::Eb,
  Tag::EC,
  Tag::Ec,
  Tag::ED,
  Tag::Ed,
  Tag::EE,
  Tag::Ee,
  Tag::EF,
  Tag::Ef,
  Tag::EG,
  Tag::Eg,
  Tag::EH,
  Tag::Eh,
  Tag::EI,
  Tag::Ei,
  Tag::EJ,
  Tag::Ej,
  Tag::EK,
  Tag::Ek,
  Tag::EL,
  Tag::El,
  Tag::EM,
  Tag::Em,
  Tag::EN,
  Tag::En,
  Tag::EO,
  Tag::Eo,
  Tag::EP,
  Tag::Ep,
  Tag::EQ,
  Tag::Eq,
  Tag::ER,
  Tag::Er,
  Tag::ES,
  Tag::Es,
  Tag::ET,
  Tag::Et,
  Tag::EU,
  Tag::Eu,
  Tag::EV,
  Tag::Ev,
  Tag::EW,
  Tag::Ew,
  Tag::EX,
  Tag::Ex,
  Tag::EY,
  Tag::Ey,
  Tag::EZ,
  Tag::Ez,
  Tag::eA,
  Tag::ea,
  Tag::eB,
  Tag::eb,
  Tag::eC,
  Tag::ec,
  Tag::eD,
  Tag::ed,
  Tag::eE,
  Tag::ee,
  Tag::eF,
  Tag::ef,
  Tag::eG,
  Tag::eg,
  Tag::eH,
  Tag::eh,
  Tag::eI,
  Tag::ei,
  Tag::eJ,
  Tag::ej,
  Tag::eK,
  Tag::ek,
  Tag::eL,
  Tag::el,
  Tag::eM,
  Tag::em,
  Tag::eN,
  Tag::en,
  Tag::eO,
  Tag::eo,
  Tag::eP,
  Tag::ep,
  Tag::eQ,
  Tag::eq,
  Tag::eR,
  Tag::er,
  Tag::eS,
  Tag::es,
  Tag::eT,
  Tag::et,
  Tag::eU,
  Tag::eu,
  Tag::eV,
  Tag::ev,
  Tag::eW,
  Tag::ew,
  Tag::eX,
  Tag::ex,
  Tag::eY,
  Tag::ey,
  Tag::eZ,
  Tag::ez,
  Tag::FA,
  Tag::Fa,
  Tag::FB,
  Tag::Fb,
  Tag::FC,
  Tag::Fc,
  Tag::FD,
  Tag::Fd,
  Tag::FE,
  Tag::Fe,
  Tag::FF,
  Tag::Ff,
  Tag::FG,
  Tag::Fg,
  Tag::FH,
  Tag::Fh,
  Tag::FI,
  Tag::Fi,
  Tag::FJ,
  Tag::Fj,
  Tag::FK,
  Tag::Fk,
  Tag::FL,
  Tag::Fl,
  Tag::FM,
  Tag::Fm,
  Tag::FN,
  Tag::Fn,
  Tag::FO,
  Tag::Fo,
  Tag::FP,
  Tag::Fp,
  Tag::FQ,
  Tag::Fq,
  Tag::FR,
  Tag::Fr,
  Tag::FS,
  Tag::Fs,
  Tag::FT,
  Tag::Ft,
  Tag::FU,
  Tag::Fu,
  Tag::FV,
  Tag::Fv,
  Tag::FW,
  Tag::Fw,
  Tag::FX,
  Tag::Fx,
  Tag::FY,
  Tag::Fy,
  Tag::FZ,
  Tag::Fz,
  Tag::fA,
  Tag::fa,
  Tag::fB,
  Tag::fb,
  Tag::fC,
  Tag::fc,
  Tag::fD,
  Tag::fd,
  Tag::fE,
  Tag::fe,
  Tag::fF,
  Tag::ff,
  Tag::fG,
  Tag::fg,
  Tag::fH,
  Tag::fh,
  Tag::fI,
  Tag::fi,
  Tag::fJ,
  Tag::fj,
  Tag::fK,
  Tag::fk,
  Tag::fL,
  Tag::fl,
  Tag::fM,
  Tag::fm,
  Tag::fN,
  Tag::fn_,
  Tag::fO,
  Tag::fo,
  Tag::fP,
  Tag::fp,
  Tag::fQ,
  Tag::fq,
  Tag::fR,
  Tag::fr,
  Tag::fS,
  Tag::fs,
  Tag::fT,
  Tag::ft,
  Tag::fU,
  Tag::fu,
  Tag::fV,
  Tag::fv,
  Tag::fW,
  Tag::fw,
  Tag::fX,
  Tag::fx,
  Tag::fY,
  Tag::fy,
  Tag::fZ,
  Tag::fz,
  Tag::GA,
  Tag::Ga,
  Tag::GB,
  Tag::Gb,
  Tag::GC,
  Tag::Gc,
  Tag::GD,
  Tag::Gd,
  Tag::GE,
  Tag::Ge,
  Tag::GF,
  Tag::Gf,
  Tag::GG,
  Tag::Gg,
  Tag::GH,
  Tag::Gh,
  Tag::GI,
  Tag::Gi,
  Tag::GJ,
  Tag::Gj,
  Tag::GK,
  Tag::Gk,
  Tag::GL,
  Tag::Gl,
  Tag::GM,
  Tag::Gm,
  Tag::GN,
  Tag::Gn,
  Tag::GO,
  Tag::Go,
  Tag::GP,
  Tag::Gp,
  Tag::GQ,
  Tag::Gq,
  Tag::GR,
  Tag::Gr,
  Tag::GS,
  Tag::Gs,
  Tag::GT,
  Tag::Gt,
  Tag::GU,
  Tag::Gu,
  Tag::GV,
  Tag::Gv,
  Tag::GW,
  Tag::Gw,
  Tag::GX,
  Tag::Gx,
  Tag::GY,
  Tag::Gy,
  Tag::GZ,
  Tag::Gz,
  Tag::gA,
  Tag::ga,
  Tag::gB,
  Tag::gb,
  Tag::gC,
  Tag::gc,
  Tag::gD,
  Tag::gd,
  Tag::gE,
  Tag::ge,
  Tag::gF,
  Tag::gf,
  Tag::gG,
  Tag::gg,
  Tag::gH,
  Tag::gh,
  Tag::gI,
  Tag::gi,
  Tag::gJ,
  Tag::gj,
  Tag::gK,
  Tag::gk,
  Tag::gL,
  Tag::gl,
  Tag::gM,
  Tag::gm,
  Tag::gN,
  Tag::gn,
  Tag::gO,
  Tag::go,
  Tag::gP,
  Tag::gp,
  Tag::gQ,
  Tag::gq,
  Tag::gR,
  Tag::gr,
  Tag::gS,
  Tag::gs,
  Tag::gT,
  Tag::gt,
  Tag::gU,
  Tag::gu,
  Tag::gV,
  Tag::gv,
  Tag::gW,
  Tag::gw,
  Tag::gX,
  Tag::gx,
  Tag::gY,
  Tag::gy,
  Tag::gZ,
  Tag::gz,
  Tag::HA,
  Tag::Ha,
  Tag::HB,
  Tag::Hb,
  Tag::HC,
  Tag::Hc,
  Tag::HD,
  Tag::Hd,
  Tag::HE,
  Tag::He,
  Tag::HF,
  Tag::Hf,
  Tag::HG,
  Tag::Hg,
  Tag::HH,
  Tag::Hh,
  Tag::HI,
  Tag::Hi,
  Tag::HJ,
  Tag::Hj,
  Tag::HK,
  Tag::Hk,
  Tag::HL,
  Tag::Hl,
  Tag::HM,
  Tag::Hm,
  Tag::HN,
  Tag::Hn,
  Tag::HO,
  Tag::Ho,
  Tag::HP,
  Tag::Hp,
  Tag::HQ,
  Tag::Hq,
  Tag::HR,
  Tag::Hr,
  Tag::HS,
  Tag::Hs,
  Tag::HT,
  Tag::Ht,
  Tag::HU,
  Tag::Hu,
  Tag::HV,
  Tag::Hv,
  Tag::HW,
  Tag::Hw,
  Tag::HX,
  Tag::Hx,
  Tag::HY,
  Tag::Hy,
  Tag::HZ,
  Tag::Hz,
  Tag::hA,
  Tag::ha,
  Tag::hB,
  Tag::hb,
  Tag::hC,
  Tag::hc,
  Tag::hD,
  Tag::hd,
  Tag::hE,
  Tag::he,
  Tag::hF,
  Tag::hf,
  Tag::hG,
  Tag::hg,
  Tag::hH,
  Tag::hh,
  Tag::hI,
  Tag::hi,
  Tag::hJ,
  Tag::hj,
  Tag::hK,
  Tag::hk,
  Tag::hL,
  Tag::hl,
  Tag::hM,
  Tag::hm,
  Tag::hN,
  Tag::hn,
  Tag::hO,
  Tag::ho,
  Tag::hP,
  Tag::hp,
  Tag::hQ,
  Tag::hq,
  Tag::hR,
  Tag::hr,
  Tag::hS,
  Tag::hs,
  Tag::hT,
  Tag::ht,
  Tag::hU,
  Tag::hu,
  Tag::hV,
  Tag::hv,
  Tag::hW,
  Tag::hw,
  Tag::hX,
  Tag::hx,
  Tag::hY,
  Tag::hy,
  Tag::hZ,
  Tag::hz,
  Tag::IA,
  Tag::Ia,
  Tag::IB,
  Tag::Ib,
  Tag::IC,
  Tag::Ic,
  Tag::ID,
  Tag::Id,
  Tag::IE,
  Tag::Ie,
  Tag::IF,
  Tag::If,
  Tag::IG,
  Tag::Ig,
  Tag::IH,
  Tag::Ih,
  Tag::II,
  Tag::Ii,
  Tag::IJ,
  Tag::Ij,
  Tag::IK,
  Tag::Ik,
  Tag::IL,
  Tag::Il,
  Tag::IM,
  Tag::Im,
  Tag::IN,
  Tag::In,
  Tag::IO,
  Tag::Io,
  Tag::IP,
  Tag::Ip,
  Tag::IQ,
  Tag::Iq,
  Tag::IR,
  Tag::Ir,
  Tag::IS,
  Tag::Is,
  Tag::IT,
  Tag::It,
  Tag::IU,
  Tag::Iu,
  Tag::IV,
  Tag::Iv,
  Tag::IW,
  Tag::Iw,
  Tag::IX,
  Tag::Ix,
  Tag::IY,
  Tag::Iy,
  Tag::IZ,
  Tag::Iz,
  Tag::iA,
  Tag::ia,
  Tag::iB,
  Tag::ib,
  Tag::iC,
  Tag::ic,
  Tag::iD,
  Tag::id,
  Tag::iE,
  Tag::ie,
  Tag::iF,
  Tag::if_,
  Tag::iG,
  Tag::ig,
  Tag::iH,
  Tag::ih,
  Tag::iI,
  Tag::ii,
  Tag::iJ,
  Tag::ij,
  Tag::iK,
  Tag::ik,
  Tag::iL,
  Tag::il,
  Tag::iM,
  Tag::im,
  Tag::iN,
  Tag::in_,
  Tag::iO,
  Tag::io,
  Tag::iP,
  Tag::ip,
  Tag::iQ,
  Tag::iq,
  Tag::iR,
  Tag::ir,
  Tag::iS,
  Tag::is,
  Tag::iT,
  Tag::it,
  Tag::iU,
  Tag::iu,
  Tag::iV,
  Tag::iv,
  Tag::iW,
  Tag::iw,
  Tag::iX,
  Tag::ix,
  Tag::iY,
  Tag::iy,
  Tag::iZ,
  Tag::iz,
  Tag::JA,
  Tag::Ja,
  Tag::JB,
  Tag::Jb,
  Tag::JC,
  Tag::Jc,
  Tag::JD,
  Tag::Jd,
  Tag::JE,
  Tag::Je,
  Tag::JF,
  Tag::Jf,
  Tag::JG,
  Tag::Jg,
  Tag::JH,
  Tag::Jh,
  Tag::JI,
  Tag::Ji,
  Tag::JJ,
  Tag::Jj,
  Tag::JK,
  Tag::Jk,
  Tag::JL,
  Tag::Jl,
  Tag::JM,
  Tag::Jm,
  Tag::JN,
  Tag::Jn,
  Tag::JO,
  Tag::Jo,
  Tag::JP,
  Tag::Jp,
  Tag::JQ,
  Tag::Jq,
  Tag::JR,
  Tag::Jr,
  Tag::JS,
  Tag::Js,
  Tag::JT,
  Tag::Jt,
  Tag::JU,
  Tag::Ju,
  Tag::JV,
  Tag::Jv,
  Tag::JW,
  Tag::Jw,
  Tag::JX,
  Tag::Jx,
  Tag::JY,
  Tag::Jy,
  Tag::JZ,
  Tag::Jz,
  Tag::jA,
  Tag::ja,
  Tag::jB,
  Tag::jb,
  Tag::jC,
  Tag::jc,
  Tag::jD,
  Tag::jd,
  Tag::jE,
  Tag::je,
  Tag::jF,
  Tag::jf,
  Tag::jG,
  Tag::jg,
  Tag::jH,
  Tag::jh,
  Tag::jI,
  Tag::ji,
  Tag::jJ,
  Tag::jj,
  Tag::jK,
  Tag::jk,
  Tag::jL,
  Tag::jl,
  Tag::jM,
  Tag::jm,
  Tag::jN,
  Tag::jn,
  Tag::jO,
  Tag::jo,
  Tag::jP,
  Tag::jp,
  Tag::jQ,
  Tag::jq,
  Tag::jR,
  Tag::jr,
  Tag::jS,
  Tag::js,
  Tag::jT,
  Tag::jt,
  Tag::jU,
  Tag::ju,
  Tag::jV,
  Tag::jv,
  Tag::jW,
  Tag::jw,
  Tag::jX,
  Tag::jx,
  Tag::jY,
  Tag::jy,
  Tag::jZ,
  Tag::jz,
  Tag::KA,
  Tag::Ka,
  Tag::KB,
  Tag::Kb,
  Tag::KC,
  Tag::Kc,
  Tag::KD,
  Tag::Kd,
  Tag::KE,
  Tag::Ke,
  Tag::KF,
  Tag::Kf,
  Tag::KG,
  Tag::Kg,
  Tag::KH,
  Tag::Kh,
  Tag::KI,
  Tag::Ki,
  Tag::KJ,
  Tag::Kj,
  Tag::KK,
  Tag::Kk,
  Tag::KL,
  Tag::Kl,
  Tag::KM,
  Tag::Km,
  Tag::KN,
  Tag::Kn,
  Tag::KO,
  Tag::Ko,
  Tag::KP,
  Tag::Kp,
  Tag::KQ,
  Tag::Kq,
  Tag::KR,
  Tag::Kr,
  Tag::KS,
  Tag::Ks,
  Tag::KT,
  Tag::Kt,
  Tag::KU,
  Tag::Ku,
  Tag::KV,
  Tag::Kv,
  Tag::KW,
  Tag::Kw,
  Tag::KX,
  Tag::Kx,
  Tag::KY,
  Tag::Ky,
  Tag::KZ,
  Tag::Kz,
  Tag::kA,
  Tag::ka,
  Tag::kB,
  Tag::kb,
  Tag::kC,
  Tag::kc,
  Tag::kD,
  Tag::kd,
  Tag::kE,
  Tag::ke,
  Tag::kF,
  Tag::kf,
  Tag::kG,
  Tag::kg,
  Tag::kH,
  Tag::kh,
  Tag::kI,
  Tag::ki,
  Tag::kJ,
  Tag::kj,
  Tag::kK,
  Tag::kk,
  Tag::kL,
  Tag::kl,
  Tag::kM,
  Tag::km,
  Tag::kN,
  Tag::kn,
  Tag::kO,
  Tag::ko,
  Tag::kP,
  Tag::kp,
  Tag::kQ,
  Tag::kq,
  Tag::kR,
  Tag::kr,
  Tag::kS,
  Tag::ks,
  Tag::kT,
  Tag::kt,
  Tag::kU,
  Tag::ku,
  Tag::kV,
  Tag::kv,
  Tag::kW,
  Tag::kw,
  Tag::kX,
  Tag::kx,
  Tag::kY,
  Tag::ky,
  Tag::kZ,
  Tag::kz,
  Tag::LA,
  Tag::La,
  Tag::LB,
  Tag::Lb,
  Tag::LC,
  Tag::Lc,
  Tag::LD,
  Tag::Ld,
  Tag::LE,
  Tag::Le,
  Tag::LF,
  Tag::Lf,
  Tag::LG,
  Tag::Lg,
  Tag::LH,
  Tag::Lh,
  Tag::LI,
  Tag::Li,
  Tag::LJ,
  Tag::Lj,
  Tag::LK,
  Tag::Lk,
  Tag::LL,
  Tag::Ll,
  Tag::LM,
  Tag::Lm,
  Tag::LN,
  Tag::Ln,
  Tag::LO,
  Tag::Lo,
  Tag::LP,
  Tag::Lp,
  Tag::LQ,
  Tag::Lq,
  Tag::LR,
  Tag::Lr,
  Tag::LS,
  Tag::Ls,
  Tag::LT,
  Tag::Lt,
  Tag::LU,
  Tag::Lu,
  Tag::LV,
  Tag::Lv,
  Tag::LW,
  Tag::Lw,
  Tag::LX,
  Tag::Lx,
  Tag::LY,
  Tag::Ly,
  Tag::LZ,
  Tag::Lz,
  Tag::lA,
  Tag::la,
  Tag::lB,
  Tag::lb,
  Tag::lC,
  Tag::lc,
  Tag::lD,
  Tag::ld,
  Tag::lE,
  Tag::le,
  Tag::lF,
  Tag::lf,
  Tag::lG,
  Tag::lg,
  Tag::lH,
  Tag::lh,
  Tag::lI,
  Tag::li,
  Tag::lJ,
  Tag::lj,
  Tag::lK,
  Tag::lk,
  Tag::lL,
  Tag::ll,
  Tag::lM,
  Tag::lm,
  Tag::lN,
  Tag::ln,
  Tag::lO,
  Tag::lo,
  Tag::lP,
  Tag::lp,
  Tag::lQ,
  Tag::lq,
  Tag::lR,
  Tag::lr,
  Tag::lS,
  Tag::ls,
  Tag::lT,
  Tag::lt,
  Tag::lU,
  Tag::lu,
  Tag::lV,
  Tag::lv,
  Tag::lW,
  Tag::lw,
  Tag::lX,
  Tag::lx,
  Tag::lY,
  Tag::ly,
  Tag::lZ,
  Tag::lz,
  Tag::MA,
  Tag::Ma,
  Tag::MB,
  Tag::Mb,
  Tag::MC,
  Tag::Mc,
  Tag::MD,
  Tag::Md,
  Tag::ME,
  Tag::Me,
  Tag::MF,
  Tag::Mf,
  Tag::MG,
  Tag::Mg,
  Tag::MH,
  Tag::Mh,
  Tag::MI,
  Tag::Mi,
  Tag::MJ,
  Tag::Mj,
  Tag::MK,
  Tag::Mk,
  Tag::ML,
  Tag::Ml,
  Tag::MM,
  Tag::Mm,
  Tag::MN,
  Tag::Mn,
  Tag::MO,
  Tag::Mo,
  Tag::MP,
  Tag::Mp,
  Tag::MQ,
  Tag::Mq,
  Tag::MR,
  Tag::Mr,
  Tag::MS,
  Tag::Ms,
  Tag::MT,
  Tag::Mt,
  Tag::MU,
  Tag::Mu,
  Tag::MV,
  Tag::Mv,
  Tag::MW,
  Tag::Mw,
  Tag::MX,
  Tag::Mx,
  Tag::MY,
  Tag::My,
  Tag::MZ,
  Tag::Mz,
  Tag::mA,
  Tag::ma,
  Tag::mB,
  Tag::mb,
  Tag::mC,
  Tag::mc,
  Tag::mD,
  Tag::md,
  Tag::mE,
  Tag::me,
  Tag::mF,
  Tag::mf,
  Tag::mG,
  Tag::mg,
  Tag::mH,
  Tag::mh,
  Tag::mI,
  Tag::mi,
  Tag::mJ,
  Tag::mj,
  Tag::mK,
  Tag::mk,
  Tag::mL,
  Tag::ml,
  Tag::mM,
  Tag::mm,
  Tag::mN,
  Tag::mn,
  Tag::mO,
  Tag::mo,
  Tag::mP,
  Tag::mp,
  Tag::mQ,
  Tag::mq,
  Tag::mR,
  Tag::mr,
  Tag::mS,
  Tag::ms,
  Tag::mT,
  Tag::mt,
  Tag::mU,
  Tag::mu,
  Tag::mV,
  Tag::mv,
  Tag::mW,
  Tag::mw,
  Tag::mX,
  Tag::mx,
  Tag::mY,
  Tag::my,
  Tag::mZ,
  Tag::mz,
  Tag::NA,
  Tag::Na,
  Tag::NB,
  Tag::Nb,
  Tag::NC,
  Tag::Nc,
  Tag::ND,
  Tag::Nd,
  Tag::NE,
  Tag::Ne,
  Tag::NF,
  Tag::Nf,
  Tag::NG,
  Tag::Ng,
  Tag::NH,
  Tag::Nh,
  Tag::NI,
  Tag::Ni,
  Tag::NJ,
  Tag::Nj,
  Tag::NK,
  Tag::Nk,
  Tag::NL,
  Tag::Nl,
  Tag::NM,
  Tag::Nm,
  Tag::NN,
  Tag::Nn,
  Tag::NO,
  Tag::No,
  Tag::NP,
  Tag::Np,
  Tag::NQ,
  Tag::Nq,
  Tag::NR,
  Tag::Nr,
  Tag::NS,
  Tag::Ns,
  Tag::NT,
  Tag::Nt,
  Tag::NU,
  Tag::Nu,
  Tag::NV,
  Tag::Nv,
  Tag::NW,
  Tag::Nw,
  Tag::NX,
  Tag::Nx,
  Tag::NY,
  Tag::Ny,
  Tag::NZ,
  Tag::Nz,
  Tag::nA,
  Tag::na,
  Tag::nB,
  Tag::nb,
  Tag::nC,
  Tag::nc,
  Tag::nD,
  Tag::nd,
  Tag::nE,
  Tag::ne,
  Tag::nF,
  Tag::nf,
  Tag::nG,
  Tag::ng,
  Tag::nH,
  Tag::nh,
  Tag::nI,
  Tag::ni,
  Tag::nJ,
  Tag::nj,
  Tag::nK,
  Tag::nk,
  Tag::nL,
  Tag::nl,
  Tag::nM,
  Tag::nm,
  Tag::nN,
  Tag::nn,
  Tag::nO,
  Tag::no,
  Tag::nP,
  Tag::np,
  Tag::nQ,
  Tag::nq,
  Tag::nR,
  Tag::nr,
  Tag::nS,
  Tag::ns,
  Tag::nT,
  Tag::nt,
  Tag::nU,
  Tag::nu,
  Tag::nV,
  Tag::nv,
  Tag::nW,
  Tag::nw,
  Tag::nX,
  Tag::nx,
  Tag::nY,
  Tag::ny,
  Tag::nZ,
  Tag::nz,
  Tag::OA,
  Tag::Oa,
  Tag::OB,
  Tag::Ob,
  Tag::OC,
  Tag::Oc,
  Tag::OD,
  Tag::Od,
  Tag::OE,
  Tag::Oe,
  Tag::OF,
  Tag::Of,
  Tag::OG,
  Tag::Og,
  Tag::OH,
  Tag::Oh,
  Tag::OI,
  Tag::Oi,
  Tag::OJ,
  Tag::Oj,
  Tag::OK,
  Tag::Ok,
  Tag::OL,
  Tag::Ol,
  Tag::OM,
  Tag::Om,
  Tag::ON,
  Tag::On,
  Tag::OO,
  Tag::Oo,
  Tag::OP,
  Tag::Op,
  Tag::OQ,
  Tag::Oq,
  Tag::OR,
  Tag::Or,
  Tag::OS,
  Tag::Os,
  Tag::OT,
  Tag::Ot,
  Tag::OU,
  Tag::Ou,
  Tag::OV,
  Tag::Ov,
  Tag::OW,
  Tag::Ow,
  Tag::OX,
  Tag::Ox,
  Tag::OY,
  Tag::Oy,
  Tag::OZ,
  Tag::Oz,
  Tag::oA,
  Tag::oa,
  Tag::oB,
  Tag::ob,
  Tag::oC,
  Tag::oc,
  Tag::oD,
  Tag::od,
  Tag::oE,
  Tag::oe,
  Tag::oF,
  Tag::of,
  Tag::oG,
  Tag::og,
  Tag::oH,
  Tag::oh,
  Tag::oI,
  Tag::oi,
  Tag::oJ,
  Tag::oj,
  Tag::oK,
  Tag::ok,
  Tag::oL,
  Tag::ol,
  Tag::oM,
  Tag::om,
  Tag::oN,
  Tag::on,
  Tag::oO,
  Tag::oo,
  Tag::oP,
  Tag::op,
  Tag::oQ,
  Tag::oq,
  Tag::oR,
  Tag::or,
  Tag::oS,
  Tag::os,
  Tag::oT,
  Tag::ot,
  Tag::oU,
  Tag::ou,
  Tag::oV,
  Tag::ov,
  Tag::oW,
  Tag::ow,
  Tag::oX,
  Tag::ox,
  Tag::oY,
  Tag::oy,
  Tag::oZ,
  Tag::oz,
  Tag::PA,
  Tag::Pa,
  Tag::PB,
  Tag::Pb,
  Tag::PC,
  Tag::Pc,
  Tag::PD,
  Tag::Pd,
  Tag::PE,
  Tag::Pe,
  Tag::PF,
  Tag::Pf,
  Tag::PG,
  Tag::Pg,
  Tag::PH,
  Tag::Ph,
  Tag::PI,
  Tag::Pi,
  Tag::PJ,
  Tag::Pj,
  Tag::PK,
  Tag::Pk,
  Tag::PL,
  Tag::Pl,
  Tag::PM,
  Tag::Pm,
  Tag::PN,
  Tag::Pn,
  Tag::PO,
  Tag::Po,
  Tag::PP,
  Tag::Pp,
  Tag::PQ,
  Tag::Pq,
  Tag::PR,
  Tag::Pr,
  Tag::PS,
  Tag::Ps,
  Tag::PT,
  Tag::Pt,
  Tag::PU,
  Tag::Pu,
  Tag::PV,
  Tag::Pv,
  Tag::PW,
  Tag::Pw,
  Tag::PX,
  Tag::Px,
  Tag::PY,
  Tag::Py,
  Tag::PZ,
  Tag::Pz,
  Tag::pA,
  Tag::pa,
  Tag::pB,
  Tag::pb,
  Tag::pC,
  Tag::pc,
  Tag::pD,
  Tag::pd,
  Tag::pE,
  Tag::pe,
  Tag::pF,
  Tag::pf,
  Tag::pG,
  Tag::pg,
  Tag::pH,
  Tag::ph,
  Tag::pI,
  Tag::pi,
  Tag::pJ,
  Tag::pj,
  Tag::pK,
  Tag::pk,
  Tag::pL,
  Tag::pl,
  Tag::pM,
  Tag::pm,
  Tag::pN,
  Tag::pn,
  Tag::pO,
  Tag::po,
  Tag::pP,
  Tag::pp,
  Tag::pQ,
  Tag::pq,
  Tag::pR,
  Tag::pr,
  Tag::pS,
  Tag::ps,
  Tag::pT,
  Tag::pt,
  Tag::pU,
  Tag::pu,
  Tag::pV,
  Tag::pv,
  Tag::pW,
  Tag::pw,
  Tag::pX,
  Tag::px,
  Tag::pY,
  Tag::py,
  Tag::pZ,
  Tag::pz,
  Tag::QA,
  Tag::Qa,
  Tag::QB,
  Tag::Qb,
  Tag::QC,
  Tag::Qc,
  Tag::QD,
  Tag::Qd,
  Tag::QE,
  Tag::Qe,
  Tag::QF,
  Tag::Qf,
  Tag::QG,
  Tag::Qg,
  Tag::QH,
  Tag::Qh,
  Tag::QI,
  Tag::Qi,
  Tag::QJ,
  Tag::Qj,
  Tag::QK,
  Tag::Qk,
  Tag::QL,
  Tag::Ql,
  Tag::QM,
  Tag::Qm,
  Tag::QN,
  Tag::Qn,
  Tag::QO,
  Tag::Qo,
  Tag::QP,
  Tag::Qp,
  Tag::QQ,
  Tag::Qq,
  Tag::QR,
  Tag::Qr,
  Tag::QS,
  Tag::Qs,
  Tag::QT,
  Tag::Qt,
  Tag::QU,
  Tag::Qu,
  Tag::QV,
  Tag::Qv,
  Tag::QW,
  Tag::Qw,
  Tag::QX,
  Tag::Qx,
  Tag::QY,
  Tag::Qy,
  Tag::QZ,
  Tag::Qz,
  Tag::qA,
  Tag::qa,
  Tag::qB,
  Tag::qb,
  Tag::qC,
  Tag::qc,
  Tag::qD,
  Tag::qd,
  Tag::qE,
  Tag::qe,
  Tag::qF,
  Tag::qf,
  Tag::qG,
  Tag::qg,
  Tag::qH,
  Tag::qh,
  Tag::qI,
  Tag::qi,
  Tag::qJ,
  Tag::qj,
  Tag::qK,
  Tag::qk,
  Tag::qL,
  Tag::ql,
  Tag::qM,
  Tag::qm,
  Tag::qN,
  Tag::qn,
  Tag::qO,
  Tag::qo,
  Tag::qP,
  Tag::qp,
  Tag::qQ,
  Tag::qq,
  Tag::qR,
  Tag::qr,
  Tag::qS,
  Tag::qs,
  Tag::qT,
  Tag::qt,
  Tag::qU,
  Tag::qu,
  Tag::qV,
  Tag::qv,
  Tag::qW,
  Tag::qw,
  Tag::qX,
  Tag::qx,
  Tag::qY,
  Tag::qy,
  Tag::qZ,
  Tag::qz,
  Tag::RA,
  Tag::Ra,
  Tag::RB,
  Tag::Rb,
  Tag::RC,
  Tag::Rc,
  Tag::RD,
  Tag::Rd,
  Tag::RE,
  Tag::Re,
  Tag::RF,
  Tag::Rf,
  Tag::RG,
  Tag::Rg,
  Tag::RH,
  Tag::Rh,
  Tag::RI,
  Tag::Ri,
  Tag::RJ,
  Tag::Rj,
  Tag::RK,
  Tag::Rk,
  Tag::RL,
  Tag::Rl,
  Tag::RM,
  Tag::Rm,
  Tag::RN,
  Tag::Rn,
  Tag::RO,
  Tag::Ro,
  Tag::RP,
  Tag::Rp,
  Tag::RQ,
  Tag::Rq,
  Tag::RR,
  Tag::Rr,
  Tag::RS,
  Tag::Rs,
  Tag::RT,
  Tag::Rt,
  Tag::RU,
  Tag::Ru,
  Tag::RV,
  Tag::Rv,
  Tag::RW,
  Tag::Rw,
  Tag::RX,
  Tag::Rx,
  Tag::RY,
  Tag::Ry,
  Tag::RZ,
  Tag::Rz,
  Tag::rA,
  Tag::ra,
  Tag::rB,
  Tag::rb,
  Tag::rC,
  Tag::rc,
  Tag::rD,
  Tag::rd,
  Tag::rE,
  Tag::re,
  Tag::rF,
  Tag::rf,
  Tag::rG,
  Tag::rg,
  Tag::rH,
  Tag::rh,
  Tag::rI,
  Tag::ri,
  Tag::rJ,
  Tag::rj,
  Tag::rK,
  Tag::rk,
  Tag::rL,
  Tag::rl,
  Tag::rM,
  Tag::rm,
  Tag::rN,
  Tag::rn,
  Tag::rO,
  Tag::ro,
  Tag::rP,
  Tag::rp,
  Tag::rQ,
  Tag::rq,
  Tag::rR,
  Tag::rr,
  Tag::rS,
  Tag::rs,
  Tag::rT,
  Tag::rt,
  Tag::rU,
  Tag::ru,
  Tag::rV,
  Tag::rv,
  Tag::rW,
  Tag::rw,
  Tag::rX,
  Tag::rx,
  Tag::rY,
  Tag::ry,
  Tag::rZ,
  Tag::rz,
  Tag::SA,
  Tag::Sa,
  Tag::SB,
  Tag::Sb,
  Tag::SC,
  Tag::Sc,
  Tag::SD,
  Tag::Sd,
  Tag::SE,
  Tag::Se,
  Tag::SF,
  Tag::Sf,
  Tag::SG,
  Tag::Sg,
  Tag::SH,
  Tag::Sh,
  Tag::SI,
  Tag::Si,
  Tag::SJ,
  Tag::Sj,
  Tag::SK,
  Tag::Sk,
  Tag::SL,
  Tag::Sl,
  Tag::SM,
  Tag::Sm,
  Tag::SN,
  Tag::Sn,
  Tag::SO,
  Tag::So,
  Tag::SP,
  Tag::Sp,
  Tag::SQ,
  Tag::Sq,
  Tag::SR,
  Tag::Sr,
  Tag::SS,
  Tag::Ss,
  Tag::ST,
  Tag::St,
  Tag::SU,
  Tag::Su,
  Tag::SV,
  Tag::Sv,
  Tag::SW,
  Tag::Sw,
  Tag::SX,
  Tag::Sx,
  Tag::SY,
  Tag::Sy,
  Tag::SZ,
  Tag::Sz,
  Tag::sA,
  Tag::sa,
  Tag::sB,
  Tag::sb,
  Tag::sC,
  Tag::sc,
  Tag::sD,
  Tag::sd,
  Tag::sE,
  Tag::se,
  Tag::sF,
  Tag::sf,
  Tag::sG,
  Tag::sg,
  Tag::sH,
  Tag::sh,
  Tag::sI,
  Tag::si,
  Tag::sJ,
  Tag::sj,
  Tag::sK,
  Tag::sk,
  Tag::sL,
  Tag::sl,
  Tag::sM,
  Tag::sm,
  Tag::sN,
  Tag::sn,
  Tag::sO,
  Tag::so,
  Tag::sP,
  Tag::sp,
  Tag::sQ,
  Tag::sq,
  Tag::sR,
  Tag::sr,
  Tag::sS,
  Tag::ss,
  Tag::sT,
  Tag::st,
  Tag::sU,
  Tag::su,
  Tag::sV,
  Tag::sv,
  Tag::sW,
  Tag::sw,
  Tag::sX,
  Tag::sx,
  Tag::sY,
  Tag::sy,
  Tag::sZ,
  Tag::sz,
  Tag::TA,
  Tag::Ta,
  Tag::TB,
  Tag::Tb,
  Tag::TC,
  Tag::Tc,
  Tag::TD,
  Tag::Td,
  Tag::TE,
  Tag::Te,
  Tag::TF,
  Tag::Tf,
  Tag::TG,
  Tag::Tg,
  Tag::TH,
  Tag::Th,
  Tag::TI,
  Tag::Ti,
  Tag::TJ,
  Tag::Tj,
  Tag::TK,
  Tag::Tk,
  Tag::TL,
  Tag::Tl,
  Tag::TM,
  Tag::Tm,
  Tag::TN,
  Tag::Tn,
  Tag::TO,
  Tag::To,
  Tag::TP,
  Tag::Tp,
  Tag::TQ,
  Tag::Tq,
  Tag::TR,
  Tag::Tr,
  Tag::TS,
  Tag::Ts,
  Tag::TT,
  Tag::Tt,
  Tag::TU,
  Tag::Tu,
  Tag::TV,
  Tag::Tv,
  Tag::TW,
  Tag::Tw,
  Tag::TX,
  Tag::Tx,
  Tag::TY,
  Tag::Ty,
  Tag::TZ,
  Tag::Tz,
  Tag::tA,
  Tag::ta,
  Tag::tB,
  Tag::tb,
  Tag::tC,
  Tag::tc,
  Tag::tD,
  Tag::td,
  Tag::tE,
  Tag::te,
  Tag::tF,
  Tag::tf,
  Tag::tG,
  Tag::tg,
  Tag::tH,
  Tag::th,
  Tag::tI,
  Tag::ti,
  Tag::tJ,
  Tag::tj,
  Tag::tK,
  Tag::tk,
  Tag::tL,
  Tag::tl,
  Tag::tM,
  Tag::tm,
  Tag::tN,
  Tag::tn,
  Tag::tO,
  Tag::to,
  Tag::tP,
  Tag::tp,
  Tag::tQ,
  Tag::tq,
  Tag::tR,
  Tag::tr,
  Tag::tS,
  Tag::ts,
  Tag::tT,
  Tag::tt,
  Tag::tU,
  Tag::tu,
  Tag::tV,
  Tag::tv,
  Tag::tW,
  Tag::tw,
  Tag::tX,
  Tag::tx,
  Tag::tY,
  Tag::ty,
  Tag::tZ,
  Tag::tz,
  Tag::UA,
  Tag::Ua,
  Tag::UB,
  Tag::Ub,
  Tag::UC,
  Tag::Uc,
  Tag::UD,
  Tag::Ud,
  Tag::UE,
  Tag::Ue,
  Tag::UF,
  Tag::Uf,
  Tag::UG,
  Tag::Ug,
  Tag::UH,
  Tag::Uh,
  Tag::UI,
  Tag::Ui,
  Tag::UJ,
  Tag::Uj,
  Tag::UK,
  Tag::Uk,
  Tag::UL,
  Tag::Ul,
  Tag::UM,
  Tag::Um,
  Tag::UN,
  Tag::Un,
  Tag::UO,
  Tag::Uo,
  Tag::UP,
  Tag::Up,
  Tag::UQ,
  Tag::Uq,
  Tag::UR,
  Tag::Ur,
  Tag::US,
  Tag::Us,
  Tag::UT,
  Tag::Ut,
  Tag::UU,
  Tag::Uu,
  Tag::UV,
  Tag::Uv,
  Tag::UW,
  Tag::Uw,
  Tag::UX,
  Tag::Ux,
  Tag::UY,
  Tag::Uy,
  Tag::UZ,
  Tag::Uz,
  Tag::uA,
  Tag::ua,
  Tag::uB,
  Tag::ub,
  Tag::uC,
  Tag::uc,
  Tag::uD,
  Tag::ud,
  Tag::uE,
  Tag::ue,
  Tag::uF,
  Tag::uf,
  Tag::uG,
  Tag::ug,
  Tag::uH,
  Tag::uh,
  Tag::uI,
  Tag::ui,
  Tag::uJ,
  Tag::uj,
  Tag::uK,
  Tag::uk,
  Tag::uL,
  Tag::ul,
  Tag::uM,
  Tag::um,
  Tag::uN,
  Tag::un,
  Tag::uO,
  Tag::uo,
  Tag::uP,
  Tag::up,
  Tag::uQ,
  Tag::uq,
  Tag::uR,
  Tag::ur,
  Tag::uS,
  Tag::us,
  Tag::uT,
  Tag::ut,
  Tag::uU,
  Tag::uu,
  Tag::uV,
  Tag::uv,
  Tag::uW,
  Tag::uw,
  Tag::uX,
  Tag::ux,
  Tag::uY,
  Tag::uy,
  Tag::uZ,
  Tag::uz,
  Tag::VA,
  Tag::Va,
  Tag::VB,
  Tag::Vb,
  Tag::VC,
  Tag::Vc,
  Tag::VD,
  Tag::Vd,
  Tag::VE,
  Tag::Ve,
  Tag::VF,
  Tag::Vf,
  Tag::VG,
  Tag::Vg,
  Tag::VH,
  Tag::Vh,
  Tag::VI,
  Tag::Vi,
  Tag::VJ,
  Tag::Vj,
  Tag::VK,
  Tag::Vk,
  Tag::VL,
  Tag::Vl,
  Tag::VM,
  Tag::Vm,
  Tag::VN,
  Tag::Vn,
  Tag::VO,
  Tag::Vo,
  Tag::VP,
  Tag::Vp,
  Tag::VQ,
  Tag::Vq,
  Tag::VR,
  Tag::Vr,
  Tag::VS,
  Tag::Vs,
  Tag::VT,
  Tag::Vt,
  Tag::VU,
  Tag::Vu,
  Tag::VV,
  Tag::Vv,
  Tag::VW,
  Tag::Vw,
  Tag::VX,
  Tag::Vx,
  Tag::VY,
  Tag::Vy,
  Tag::VZ,
  Tag::Vz,
  Tag::vA,
  Tag::va,
  Tag::vB,
  Tag::vb,
  Tag::vC,
  Tag::vc,
  Tag::vD,
  Tag::vd,
  Tag::vE,
  Tag::ve,
  Tag::vF,
  Tag::vf,
  Tag::vG,
  Tag::vg,
  Tag::vH,
  Tag::vh,
  Tag::vI,
  Tag::vi,
  Tag::vJ,
  Tag::vj,
  Tag::vK,
  Tag::vk,
  Tag::vL,
  Tag::vl,
  Tag::vM,
  Tag::vm,
  Tag::vN,
  Tag::vn,
  Tag::vO,
  Tag::vo,
  Tag::vP,
  Tag::vp,
  Tag::vQ,
  Tag::vq,
  Tag::vR,
  Tag::vr,
  Tag::vS,
  Tag::vs,
  Tag::vT,
  Tag::vt,
  Tag::vU,
  Tag::vu,
  Tag::vV,
  Tag::vv,
  Tag::vW,
  Tag::vw,
  Tag::vX,
  Tag::vx,
  Tag::vY,
  Tag::vy,
  Tag::vZ,
  Tag::vz,
  Tag::WA,
  Tag::Wa,
  Tag::WB,
  Tag::Wb,
  Tag::WC,
  Tag::Wc,
  Tag::WD,
  Tag::Wd,
  Tag::WE,
  Tag::We,
  Tag::WF,
  Tag::Wf,
  Tag::WG,
  Tag::Wg,
  Tag::WH,
  Tag::Wh,
  Tag::WI,
  Tag::Wi,
  Tag::WJ,
  Tag::Wj,
  Tag::WK,
  Tag::Wk,
  Tag::WL,
  Tag::Wl,
  Tag::WM,
  Tag::Wm,
  Tag::WN,
  Tag::Wn,
  Tag::WO,
  Tag::Wo,
  Tag::WP,
  Tag::Wp,
  Tag::WQ,
  Tag::Wq,
  Tag::WR,
  Tag::Wr,
  Tag::WS,
  Tag::Ws,
  Tag::WT,
  Tag::Wt,
  Tag::WU,
  Tag::Wu,
  Tag::WV,
  Tag::Wv,
  Tag::WW,
  Tag::Ww,
  Tag::WX,
  Tag::Wx,
  Tag::WY,
  Tag::Wy,
  Tag::WZ,
  Tag::Wz,
  Tag::wA,
  Tag::wa,
  Tag::wB,
  Tag::wb,
  Tag::wC,
  Tag::wc,
  Tag::wD,
  Tag::wd,
  Tag::wE,
  Tag::we,
  Tag::wF,
  Tag::wf,
  Tag::wG,
  Tag::wg,
  Tag::wH,
  Tag::wh,
  Tag::wI,
  Tag::wi,
  Tag::wJ,
  Tag::wj,
  Tag::wK,
  Tag::wk,
  Tag::wL,
  Tag::wl,
  Tag::wM,
  Tag::wm,
  Tag::wN,
  Tag::wn,
  Tag::wO,
  Tag::wo,
  Tag::wP,
  Tag::wp,
  Tag::wQ,
  Tag::wq,
  Tag::wR,
  Tag::wr,
  Tag::wS,
  Tag::ws,
  Tag::wT,
  Tag::wt,
  Tag::wU,
  Tag::wu,
  Tag::wV,
  Tag::wv,
  Tag::wW,
  Tag::ww,
  Tag::wX,
  Tag::wx,
  Tag::wY,
  Tag::wy,
  Tag::wZ,
  Tag::wz,
  Tag::XA,
  Tag::Xa,
  Tag::XB,
  Tag::Xb,
  Tag::XC,
  Tag::Xc,
  Tag::XD,
  Tag::Xd,
  Tag::XE,
  Tag::Xe,
  Tag::XF,
  Tag::Xf,
  Tag::XG,
  Tag::Xg,
  Tag::XH,
  Tag::Xh,
  Tag::XI,
  Tag::Xi,
  Tag::XJ,
  Tag::Xj,
  Tag::XK,
  Tag::Xk,
  Tag::XL,
  Tag::Xl,
  Tag::XM,
  Tag::Xm,
  Tag::XN,
  Tag::Xn,
  Tag::XO,
  Tag::Xo,
  Tag::XP,
  Tag::Xp,
  Tag::XQ,
  Tag::Xq,
  Tag::XR,
  Tag::Xr,
  Tag::XS,
  Tag::Xs,
  Tag::XT,
  Tag::Xt,
  Tag::XU,
  Tag::Xu,
  Tag::XV,
  Tag::Xv,
  Tag::XW,
  Tag::Xw,
  Tag::XX,
  Tag::Xx,
  Tag::XY,
  Tag::Xy,
  Tag::XZ,
  Tag::Xz,
  Tag::xA,
  Tag::xa,
  Tag::xB,
  Tag::xb,
  Tag::xC,
  Tag::xc,
  Tag::xD,
  Tag::xd,
  Tag::xE,
  Tag::xe,
  Tag::xF,
  Tag::xf,
  Tag::xG,
  Tag::xg,
  Tag::xH,
  Tag::xh,
  Tag::xI,
  Tag::xi,
  Tag::xJ,
  Tag::xj,
  Tag::xK,
  Tag::xk,
  Tag::xL,
  Tag::xl,
  Tag::xM,
  Tag::xm,
  Tag::xN,
  Tag::xn,
  Tag::xO,
  Tag::xo,
  Tag::xP,
  Tag::xp,
  Tag::xQ,
  Tag::xq,
  Tag::xR,
  Tag::xr,
  Tag::xS,
  Tag::xs,
  Tag::xT,
  Tag::xt,
  Tag::xU,
  Tag::xu,
  Tag::xV,
  Tag::xv,
  Tag::xW,
  Tag::xw,
  Tag::xX,
  Tag::xx,
  Tag::xY,
  Tag::xy,
  Tag::xZ,
  Tag::xz,
  Tag::YA,
  Tag::Ya,
  Tag::YB,
  Tag::Yb,
  Tag::YC,
  Tag::Yc,
  Tag::YD,
  Tag::Yd,
  Tag::YE,
  Tag::Ye,
  Tag::YF,
  Tag::Yf,
  Tag::YG,
  Tag::Yg,
  Tag::YH,
  Tag::Yh,
  Tag::YI,
  Tag::Yi,
  Tag::YJ,
  Tag::Yj,
  Tag::YK,
  Tag::Yk,
  Tag::YL,
  Tag::Yl,
  Tag::YM,
  Tag::Ym,
  Tag::YN,
  Tag::Yn,
  Tag::YO,
  Tag::Yo,
  Tag::YP,
  Tag::Yp,
  Tag::YQ,
  Tag::Yq,
  Tag::YR,
  Tag::Yr,
  Tag::YS,
  Tag::Ys,
  Tag::YT,
  Tag::Yt,
  Tag::YU,
  Tag::Yu,
  Tag::YV,
  Tag::Yv,
  Tag::YW,
  Tag::Yw,
  Tag::YX,
  Tag::Yx,
  Tag::YY,
  Tag::Yy,
  Tag::YZ,
  Tag::Yz,
  Tag::yA,
  Tag::ya,
  Tag::yB,
  Tag::yb,
  Tag::yC,
  Tag::yc,
  Tag::yD,
  Tag::yd,
  Tag::yE,
  Tag::ye,
  Tag::yF,
  Tag::yf,
  Tag::yG,
  Tag::yg,
  Tag::yH,
  Tag::yh,
  Tag::yI,
  Tag::yi,
  Tag::yJ,
  Tag::yj,
  Tag::yK,
  Tag::yk,
  Tag::yL,
  Tag::yl,
  Tag::yM,
  Tag::ym,
  Tag::yN,
  Tag::yn,
  Tag::yO,
  Tag::yo,
  Tag::yP,
  Tag::yp,
  Tag::yQ,
  Tag::yq,
  Tag::yR,
  Tag::yr,
  Tag::yS,
  Tag::ys,
  Tag::yT,
  Tag::yt,
  Tag::yU,
  Tag::yu,
  Tag::yV,
  Tag::yv,
  Tag::yW,
  Tag::yw,
  Tag::yX,
  Tag::yx,
  Tag::yY,
  Tag::yy,
  Tag::yZ,
  Tag::yz,
  Tag::ZA,
  Tag::Za,
  Tag::ZB,
  Tag::Zb,
  Tag::ZC,
  Tag::Zc,
  Tag::ZD,
  Tag::Zd,
  Tag::ZE,
  Tag::Ze,
  Tag::ZF,
  Tag::Zf,
  Tag::ZG,
  Tag::Zg,
  Tag::ZH,
  Tag::Zh,
  Tag::ZI,
  Tag::Zi,
  Tag::ZJ,
  Tag::Zj,
  Tag::ZK,
  Tag::Zk,
  Tag::ZL,
  Tag::Zl,
  Tag::ZM,
  Tag::Zm,
  Tag::ZN,
  Tag::Zn,
  Tag::ZO,
  Tag::Zo,
  Tag::ZP,
  Tag::Zp,
  Tag::ZQ,
  Tag::Zq,
  Tag::ZR,
  Tag::Zr,
  Tag::ZS,
  Tag::Zs,
  Tag::ZT,
  Tag::Zt,
  Tag::ZU,
  Tag::Zu,
  Tag::ZV,
  Tag::Zv,
  Tag::ZW,
  Tag::Zw,
  Tag::ZX,
  Tag::Zx,
  Tag::ZY,
  Tag::Zy,
  Tag::ZZ,
  Tag::Zz,
  Tag::zA,
  Tag::za,
  Tag::zB,
  Tag::zb,
  Tag::zC,
  Tag::zc,
  Tag::zD,
  Tag::zd,
  Tag::zE,
  Tag::ze,
  Tag::zF,
  Tag::zf,
  Tag::zG,
  Tag::zg,
  Tag::zH,
  Tag::zh,
  Tag::zI,
  Tag::zi,
  Tag::zJ,
  Tag::zj,
  Tag::zK,
  Tag::zk,
  Tag::zL,
  Tag::zl,
  Tag::zM,
  Tag::zm,
  Tag::zN,
  Tag::zn,
  Tag::zO,
  Tag::zo,
  Tag::zP,
  Tag::zp,
  Tag::zQ,
  Tag::zq,
  Tag::zR,
  Tag::zr,
  Tag::zS,
  Tag::zs,
  Tag::zT,
  Tag::zt,
  Tag::zU,
  Tag::zu,
  Tag::zV,
  Tag::zv,
  Tag::zW,
  Tag::zw,
  Tag::zX,
  Tag::zx,
  Tag::zY,
  Tag::zy,
  Tag::zZ,
  Tag::zz,
  Tag::aAA,
  Tag::aAa,
  Tag::aAB,
  Tag::aAb,
  Tag::aAC,
  Tag::aAc,
  Tag::aAD,
  Tag::aAd,
  Tag::aAE,
  Tag::aAe,
  Tag::aAF,
  Tag::aAf,
  Tag::aAG,
  Tag::aAg,
  Tag::aAH,
  Tag::aAh,
  Tag::aAI,
  Tag::aAi,
  Tag::aAJ,
  Tag::aAj,
  Tag::aAK,
  Tag::aAk,
  Tag::aAL,
  Tag::aAl,
  Tag::aAM,
  Tag::aAm,
  Tag::aAN,
  Tag::aAn,
  Tag::aAO,
  Tag::aAo,
  Tag::aAP,
  Tag::aAp,
  Tag::aAQ,
  Tag::aAq,
  Tag::aAR,
  Tag::aAr,
  Tag::aAS,
  Tag::aAs,
  Tag::aAT,
  Tag::aAt,
  Tag::aAU,
  Tag::aAu,
  Tag::aAV,
  Tag::aAv,
  Tag::aAW,
  Tag::aAw,
  Tag::aAX,
  Tag::aAx,
  Tag::aAY,
  Tag::aAy,
  Tag::aAZ,
  Tag::aAz,
  Tag::aaA,
  Tag::aaa,
  Tag::aaB,
  Tag::aab,
  Tag::aaC,
  Tag::aac,
  Tag::aaD,
  Tag::aad,
  Tag::aaE,
  Tag::aae,
  Tag::aaF,
  Tag::aaf,
  Tag::aaG,
  Tag::aag,
  Tag::aaH,
  Tag::aah,
  Tag::aaI,
  Tag::aai,
  Tag::aaJ,
  Tag::aaj,
  Tag::aaK,
  Tag::aak,
  Tag::aaL,
  Tag::aal,
  Tag::aaM,
  Tag::aam,
  Tag::aaN,
  Tag::aan,
  Tag::aaO,
  Tag::aao,
  Tag::aaP,
  Tag::aap,
  Tag::aaQ,
  Tag::aaq,
  Tag::aaR,
  Tag::aar,
  Tag::aaS,
  Tag::aas,
  Tag::aaT,
  Tag::aat,
  Tag::aaU,
  Tag::aau,
  Tag::aaV,
  Tag::aav,
  Tag::aaW,
  Tag::aaw,
  Tag::aaX,
  Tag::aax,
  Tag::aaY,
  Tag::aay,
  Tag::aaZ,
  Tag::aaz,
  Tag::aBA,
  Tag::aBa,
  Tag::aBB,
  Tag::aBb,
  Tag::aBC,
  Tag::aBc,
  Tag::aBD,
  Tag::aBd,
  Tag::aBE,
  Tag::aBe,
  Tag::aBF,
  Tag::aBf,
  Tag::aBG,
  Tag::aBg,
  Tag::aBH,
  Tag::aBh,
  Tag::aBI,
  Tag::aBi,
  Tag::aBJ,
  Tag::aBj,
  Tag::aBK,
  Tag::aBk,
  Tag::aBL,
  Tag::aBl,
  Tag::aBM,
  Tag::aBm,
  Tag::aBN,
  Tag::aBn,
  Tag::aBO,
  Tag::aBo,
  Tag::aBP,
  Tag::aBp,
  Tag::aBQ,
  Tag::aBq,
  Tag::aBR,
  Tag::aBr,
  Tag::aBS,
  Tag::aBs,
  Tag::aBT,
  Tag::aBt,
  Tag::aBU,
  Tag::aBu,
  Tag::aBV,
  Tag::aBv,
  Tag::aBW,
  Tag::aBw,
  Tag::aBX,
  Tag::aBx,
  Tag::aBY,
  Tag::aBy,
  Tag::aBZ,
  Tag::aBz,
  Tag::abA,
  Tag::aba,
  Tag::abB,
  Tag::abb,
  Tag::abC,
  Tag::abc,
  Tag::abD,
  Tag::abd,
  Tag::abE,
  Tag::abe,
  Tag::abF,
  Tag::abf,
  Tag::abG,
  Tag::abg,
  Tag::abH,
  Tag::abh,
  Tag::abI,
  Tag::abi,
  Tag::abJ,
  Tag::abj,
  Tag::abK,
  Tag::abk,
  Tag::abL,
  Tag::abl,
  Tag::abM,
  Tag::abm,
  Tag::abN,
  Tag::abn,
  Tag::abO,
  Tag::abo,
  Tag::abP,
  Tag::abp,
  Tag::abQ,
  Tag::abq,
  Tag::abR,
  Tag::abr,
  Tag::abS,
  Tag::abs,
  Tag::abT,
  Tag::abt,
  Tag::abU,
  Tag::abu,
  Tag::abV,
  Tag::abv,
  Tag::abW,
  Tag::abw,
  Tag::abX,
  Tag::abx,
  Tag::abY,
  Tag::aby,
  Tag::abZ,
  Tag::abz,
  Tag::aCA,
  Tag::aCa,
  Tag::aCB,
  Tag::aCb,
  Tag::aCC,
  Tag::aCc,
  Tag::aCD,
  Tag::aCd,
  Tag::aCE,
  Tag::aCe,
  Tag::aCF,
  Tag::aCf,
  Tag::aCG,
  Tag::aCg,
  Tag::aCH,
  Tag::aCh,
  Tag::aCI,
  Tag::aCi,
  Tag::aCJ,
  Tag::aCj,
  Tag::aCK,
  Tag::aCk,
  Tag::aCL,
  Tag::aCl,
  Tag::aCM,
  Tag::aCm,
  Tag::aCN,
  Tag::aCn,
  Tag::aCO,
  Tag::aCo,
  Tag::aCP,
  Tag::aCp,
  Tag::aCQ,
  Tag::aCq,
  Tag::aCR,
  Tag::aCr,
  Tag::aCS,
  Tag::aCs,
  Tag::aCT,
  Tag::aCt,
  Tag::aCU,
  Tag::aCu,
  Tag::aCV,
  Tag::aCv,
  Tag::aCW,
  Tag::aCw,
  Tag::aCX,
  Tag::aCx,
  Tag::aCY,
  Tag::aCy,
  Tag::aCZ,
  Tag::aCz,
  Tag::acA,
  Tag::aca,
  Tag::acB,
  Tag::acb,
  Tag::acC,
  Tag::acc,
  Tag::acD,
  Tag::acd,
  Tag::acE,
  Tag::ace,
  Tag::acF,
  Tag::acf,
  Tag::acG,
  Tag::acg,
  Tag::acH,
  Tag::ach,
  Tag::acI,
  Tag::aci,
  Tag::acJ,
  Tag::acj,
  Tag::acK,
  Tag::ack,
  Tag::acL,
  Tag::acl,
  Tag::acM,
  Tag::acm,
  Tag::acN,
  Tag::acn,
  Tag::acO,
  Tag::aco,
  Tag::acP,
  Tag::acp,
  Tag::acQ,
  Tag::acq,
  Tag::acR,
  Tag::acr,
  Tag::acS,
  Tag::acs,
  Tag::acT,
  Tag::act,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Tag(pub i32);
#[allow(non_upper_case_globals)]
impl Tag {
  pub const A: Self = Self(0);
  pub const a: Self = Self(1);
  pub const B: Self = Self(2);
  pub const b: Self = Self(3);
  pub const C: Self = Self(4);
  pub const c: Self = Self(5);
  pub const D: Self = Self(6);
  pub const d: Self = Self(7);
  pub const E: Self = Self(8);
  pub const e: Self = Self(9);
  pub const F: Self = Self(10);
  pub const f: Self = Self(11);
  pub const G: Self = Self(12);
  pub const g: Self = Self(13);
  pub const H: Self = Self(14);
  pub const h: Self = Self(15);
  pub const I: Self = Self(16);
  pub const i: Self = Self(17);
  pub const J: Self = Self(18);
  pub const j: Self = Self(19);
  pub const K: Self = Self(20);
  pub const k: Self = Self(21);
  pub const L: Self = Self(22);
  pub const l: Self = Self(23);
  pub const M: Self = Self(24);
  pub const m: Self = Self(25);
  pub const N: Self = Self(26);
  pub const n: Self = Self(27);
  pub const O: Self = Self(28);
  pub const o: Self = Self(29);
  pub const P: Self = Self(30);
  pub const p: Self = Self(31);
  pub const Q: Self = Self(32);
  pub const q: Self = Self(33);
  pub const R: Self = Self(34);
  pub const r: Self = Self(35);
  pub const S: Self = Self(36);
  pub const s: Self = Self(37);
  pub const T: Self = Self(38);
  pub const t: Self = Self(39);
  pub const U: Self = Self(40);
  pub const u: Self = Self(41);
  pub const V: Self = Self(42);
  pub const v: Self = Self(43);
  pub const W: Self = Self(44);
  pub const w: Self = Self(45);
  pub const X: Self = Self(46);
  pub const x: Self = Self(47);
  pub const Y: Self = Self(48);
  pub const y: Self = Self(49);
  pub const Z: Self = Self(50);
  pub const z: Self = Self(51);
  pub const aA: Self = Self(52);
  pub const aa: Self = Self(53);
  pub const aB: Self = Self(54);
  pub const ab: Self = Self(55);
  pub const aC: Self = Self(56);
  pub const ac: Self = Self(57);
  pub const aD: Self = Self(58);
  pub const ad: Self = Self(59);
  pub const aE: Self = Self(60);
  pub const ae: Self = Self(61);
  pub const aF: Self = Self(62);
  pub const af: Self = Self(63);
  pub const aG: Self = Self(64);
  pub const ag: Self = Self(65);
  pub const aH: Self = Self(66);
  pub const ah: Self = Self(67);
  pub const aI: Self = Self(68);
  pub const ai: Self = Self(69);
  pub const aJ: Self = Self(70);
  pub const aj: Self = Self(71);
  pub const aK: Self = Self(72);
  pub const ak: Self = Self(73);
  pub const aL: Self = Self(74);
  pub const al: Self = Self(75);
  pub const aM: Self = Self(76);
  pub const am: Self = Self(77);
  pub const aN: Self = Self(78);
  pub const an: Self = Self(79);
  pub const aO: Self = Self(80);
  pub const ao: Self = Self(81);
  pub const aP: Self = Self(82);
  pub const ap: Self = Self(83);
  pub const aQ: Self = Self(84);
  pub const aq: Self = Self(85);
  pub const aR: Self = Self(86);
  pub const ar: Self = Self(87);
  pub const aS: Self = Self(88);
  pub const as_: Self = Self(89);
  pub const aT: Self = Self(90);
  pub const at: Self = Self(91);
  pub const aU: Self = Self(92);
  pub const au: Self = Self(93);
  pub const aV: Self = Self(94);
  pub const av: Self = Self(95);
  pub const aW: Self = Self(96);
  pub const aw: Self = Self(97);
  pub const aX: Self = Self(98);
  pub const ax: Self = Self(99);
  pub const aY: Self = Self(100);
  pub const ay: Self = Self(101);
  pub const aZ: Self = Self(102);
  pub const az: Self = Self(103);
  pub const BA: Self = Self(104);
  pub const Ba: Self = Self(105);
  pub const BB: Self = Self(106);
  pub const Bb: Self = Self(107);
  pub const BC: Self = Self(108);
  pub const Bc: Self = Self(109);
  pub const BD: Self = Self(110);
  pub const Bd: Self = Self(111);
  pub const BE: Self = Self(112);
  pub const Be: Self = Self(113);
  pub const BF: Self = Self(114);
  pub const Bf: Self = Self(115);
  pub const BG: Self = Self(116);
  pub const Bg: Self = Self(117);
  pub const BH: Self = Self(118);
  pub const Bh: Self = Self(119);
  pub const BI: Self = Self(120);
  pub const Bi: Self = Self(121);
  pub const BJ: Self = Self(122);
  pub const Bj: Self = Self(123);
  pub const BK: Self = Self(124);
  pub const Bk: Self = Self(125);
  pub const BL: Self = Self(126);
  pub const Bl: Self = Self(127);
  pub const BM: Self = Self(128);
  pub const Bm: Self = Self(129);
  pub const BN: Self = Self(130);
  pub const Bn: Self = Self(131);
  pub const BO: Self = Self(132);
  pub const Bo: Self = Self(133);
  pub const BP: Self = Self(134);
  pub const Bp: Self = Self(135);
  pub const BQ: Self = Self(136);
  pub const Bq: Self = Self(137);
  pub const BR: Self = Self(138);
  pub const Br: Self = Self(139);
  pub const BS: Self = Self(140);
  pub const Bs: Self = Self(141);
  pub const BT: Self = Self(142);
  pub const Bt: Self = Self(143);
  pub const BU: Self = Self(144);
  pub const Bu: Self = Self(145);
  pub const BV: Self = Self(146);
  pub const Bv: Self = Self(147);
  pub const BW: Self = Self(148);
  pub const Bw: Self = Self(149);
  pub const BX: Self = Self(150);
  pub const Bx: Self = Self(151);
  pub const BY: Self = Self(152);
  pub const By: Self = Self(153);
  pub const BZ: Self = Self(154);
  pub const Bz: Self = Self(155);
  pub const bA: Self = Self(156);
  pub const ba: Self = Self(157);
  pub const bB: Self = Self(158);
  pub const bb: Self = Self(159);
  pub const bC: Self = Self(160);
  pub const bc: Self = Self(161);
  pub const bD: Self = Self(162);
  pub const bd: Self = Self(163);
  pub const bE: Self = Self(164);
  pub const be: Self = Self(165);
  pub const bF: Self = Self(166);
  pub const bf: Self = Self(167);
  pub const bG: Self = Self(168);
  pub const bg: Self = Self(169);
  pub const bH: Self = Self(170);
  pub const bh: Self = Self(171);
  pub const bI: Self = Self(172);
  pub const bi: Self = Self(173);
  pub const bJ: Self = Self(174);
  pub const bj: Self = Self(175);
  pub const bK: Self = Self(176);
  pub const bk: Self = Self(177);
  pub const bL: Self = Self(178);
  pub const bl: Self = Self(179);
  pub const bM: Self = Self(180);
  pub const bm: Self = Self(181);
  pub const bN: Self = Self(182);
  pub const bn: Self = Self(183);
  pub const bO: Self = Self(184);
  pub const bo: Self = Self(185);
  pub const bP: Self = Self(186);
  pub const bp: Self = Self(187);
  pub const bQ: Self = Self(188);
  pub const bq: Self = Self(189);
  pub const bR: Self = Self(190);
  pub const br: Self = Self(191);
  pub const bS: Self = Self(192);
  pub const bs: Self = Self(193);
  pub const bT: Self = Self(194);
  pub const bt: Self = Self(195);
  pub const bU: Self = Self(196);
  pub const bu: Self = Self(197);
  pub const bV: Self = Self(198);
  pub const bv: Self = Self(199);
  pub const bW: Self = Self(200);
  pub const bw: Self = Self(201);
  pub const bX: Self = Self(202);
  pub const bx: Self = Self(203);
  pub const bY: Self = Self(204);
  pub const by: Self = Self(205);
  pub const bZ: Self = Self(206);
  pub const bz: Self = Self(207);
  pub const CA: Self = Self(208);
  pub const Ca: Self = Self(209);
  pub const CB: Self = Self(210);
  pub const Cb: Self = Self(211);
  pub const CC: Self = Self(212);
  pub const Cc: Self = Self(213);
  pub const CD: Self = Self(214);
  pub const Cd: Self = Self(215);
  pub const CE: Self = Self(216);
  pub const Ce: Self = Self(217);
  pub const CF: Self = Self(218);
  pub const Cf: Self = Self(219);
  pub const CG: Self = Self(220);
  pub const Cg: Self = Self(221);
  pub const CH: Self = Self(222);
  pub const Ch: Self = Self(223);
  pub const CI: Self = Self(224);
  pub const Ci: Self = Self(225);
  pub const CJ: Self = Self(226);
  pub const Cj: Self = Self(227);
  pub const CK: Self = Self(228);
  pub const Ck: Self = Self(229);
  pub const CL: Self = Self(230);
  pub const Cl: Self = Self(231);
  pub const CM: Self = Self(232);
  pub const Cm: Self = Self(233);
  pub const CN: Self = Self(234);
  pub const Cn: Self = Self(235);
  pub const CO: Self = Self(236);
  pub const Co: Self = Self(237);
  pub const CP: Self = Self(238);
  pub const Cp: Self = Self(239);
  pub const CQ: Self = Self(240);
  pub const Cq: Self = Self(241);
  pub const CR: Self = Self(242);
  pub const Cr: Self = Self(243);
  pub const CS: Self = Self(244);
  pub const Cs: Self = Self(245);
  pub const CT: Self = Self(246);
  pub const Ct: Self = Self(247);
  pub const CU: Self = Self(248);
  pub const Cu: Self = Self(249);
  pub const CV: Self = Self(250);
  pub const Cv: Self = Self(251);
  pub const CW: Self = Self(252);
  pub const Cw: Self = Self(253);
  pub const CX: Self = Self(254);
  pub const Cx: Self = Self(255);
  pub const CY: Self = Self(256);
  pub const Cy: Self = Self(257);
  pub const CZ: Self = Self(258);
  pub const Cz: Self = Self(259);
  pub const cA: Self = Self(260);
  pub const ca: Self = Self(261);
  pub const cB: Self = Self(262);
  pub const cb: Self = Self(263);
  pub const cC: Self = Self(264);
  pub const cc: Self = Self(265);
  pub const cD: Self = Self(266);
  pub const cd: Self = Self(267);
  pub const cE: Self = Self(268);
  pub const ce: Self = Self(269);
  pub const cF: Self = Self(270);
  pub const cf: Self = Self(271);
  pub const cG: Self = Self(272);
  pub const cg: Self = Self(273);
  pub const cH: Self = Self(274);
  pub const ch: Self = Self(275);
  pub const cI: Self = Self(276);
  pub const ci: Self = Self(277);
  pub const cJ: Self = Self(278);
  pub const cj: Self = Self(279);
  pub const cK: Self = Self(280);
  pub const ck: Self = Self(281);
  pub const cL: Self = Self(282);
  pub const cl: Self = Self(283);
  pub const cM: Self = Self(284);
  pub const cm: Self = Self(285);
  pub const cN: Self = Self(286);
  pub const cn: Self = Self(287);
  pub const cO: Self = Self(288);
  pub const co: Self = Self(289);
  pub const cP: Self = Self(290);
  pub const cp: Self = Self(291);
  pub const cQ: Self = Self(292);
  pub const cq: Self = Self(293);
  pub const cR: Self = Self(294);
  pub const cr: Self = Self(295);
  pub const cS: Self = Self(296);
  pub const cs: Self = Self(297);
  pub const cT: Self = Self(298);
  pub const ct: Self = Self(299);
  pub const cU: Self = Self(300);
  pub const cu: Self = Self(301);
  pub const cV: Self = Self(302);
  pub const cv: Self = Self(303);
  pub const cW: Self = Self(304);
  pub const cw: Self = Self(305);
  pub const cX: Self = Self(306);
  pub const cx: Self = Self(307);
  pub const cY: Self = Self(308);
  pub const cy: Self = Self(309);
  pub const cZ: Self = Self(310);
  pub const cz: Self = Self(311);
  pub const DA: Self = Self(312);
  pub const Da: Self = Self(313);
  pub const DB: Self = Self(314);
  pub const Db: Self = Self(315);
  pub const DC: Self = Self(316);
  pub const Dc: Self = Self(317);
  pub const DD: Self = Self(318);
  pub const Dd: Self = Self(319);
  pub const DE: Self = Self(320);
  pub const De: Self = Self(321);
  pub const DF: Self = Self(322);
  pub const Df: Self = Self(323);
  pub const DG: Self = Self(324);
  pub const Dg: Self = Self(325);
  pub const DH: Self = Self(326);
  pub const Dh: Self = Self(327);
  pub const DI: Self = Self(328);
  pub const Di: Self = Self(329);
  pub const DJ: Self = Self(330);
  pub const Dj: Self = Self(331);
  pub const DK: Self = Self(332);
  pub const Dk: Self = Self(333);
  pub const DL: Self = Self(334);
  pub const Dl: Self = Self(335);
  pub const DM: Self = Self(336);
  pub const Dm: Self = Self(337);
  pub const DN: Self = Self(338);
  pub const Dn: Self = Self(339);
  pub const DO: Self = Self(340);
  pub const Do: Self = Self(341);
  pub const DP: Self = Self(342);
  pub const Dp: Self = Self(343);
  pub const DQ: Self = Self(344);
  pub const Dq: Self = Self(345);
  pub const DR: Self = Self(346);
  pub const Dr: Self = Self(347);
  pub const DS: Self = Self(348);
  pub const Ds: Self = Self(349);
  pub const DT: Self = Self(350);
  pub const Dt: Self = Self(351);
  pub const DU: Self = Self(352);
  pub const Du: Self = Self(353);
  pub const DV: Self = Self(354);
  pub const Dv: Self = Self(355);
  pub const DW: Self = Self(356);
  pub const Dw: Self = Self(357);
  pub const DX: Self = Self(358);
  pub const Dx: Self = Self(359);
  pub const DY: Self = Self(360);
  pub const Dy: Self = Self(361);
  pub const DZ: Self = Self(362);
  pub const Dz: Self = Self(363);
  pub const dA: Self = Self(364);
  pub const da: Self = Self(365);
  pub const dB: Self = Self(366);
  pub const db: Self = Self(367);
  pub const dC: Self = Self(368);
  pub const dc: Self = Self(369);
  pub const dD: Self = Self(370);
  pub const dd: Self = Self(371);
  pub const dE: Self = Self(372);
  pub const de: Self = Self(373);
  pub const dF: Self = Self(374);
  pub const df: Self = Self(375);
  pub const dG: Self = Self(376);
  pub const dg: Self = Self(377);
  pub const dH: Self = Self(378);
  pub const dh: Self = Self(379);
  pub const dI: Self = Self(380);
  pub const di: Self = Self(381);
  pub const dJ: Self = Self(382);
  pub const dj: Self = Self(383);
  pub const dK: Self = Self(384);
  pub const dk: Self = Self(385);
  pub const dL: Self = Self(386);
  pub const dl: Self = Self(387);
  pub const dM: Self = Self(388);
  pub const dm: Self = Self(389);
  pub const dN: Self = Self(390);
  pub const dn: Self = Self(391);
  pub const dO: Self = Self(392);
  pub const do_: Self = Self(393);
  pub const dP: Self = Self(394);
  pub const dp: Self = Self(395);
  pub const dQ: Self = Self(396);
  pub const dq: Self = Self(397);
  pub const dR: Self = Self(398);
  pub const dr: Self = Self(399);
  pub const dS: Self = Self(400);
  pub const ds: Self = Self(401);
  pub const dT: Self = Self(402);
  pub const dt: Self = Self(403);
  pub const dU: Self = Self(404);
  pub const du: Self = Self(405);
  pub const dV: Self = Self(406);
  pub const dv: Self = Self(407);
  pub const dW: Self = Self(408);
  pub const dw: Self = Self(409);
  pub const dX: Self = Self(410);
  pub const dx: Self = Self(411);
  pub const dY: Self = Self(412);
  pub const dy: Self = Self(413);
  pub const dZ: Self = Self(414);
  pub const dz: Self = Self(415);
  pub const EA: Self = Self(416);
  pub const Ea: Self = Self(417);
  pub const EB: Self = Self(418);
  pub const Eb: Self = Self(419);
  pub const EC: Self = Self(420);
  pub const Ec: Self = Self(421);
  pub const ED: Self = Self(422);
  pub const Ed: Self = Self(423);
  pub const EE: Self = Self(424);
  pub const Ee: Self = Self(425);
  pub const EF: Self = Self(426);
  pub const Ef: Self = Self(427);
  pub const EG: Self = Self(428);
  pub const Eg: Self = Self(429);
  pub const EH: Self = Self(430);
  pub const Eh: Self = Self(431);
  pub const EI: Self = Self(432);
  pub const Ei: Self = Self(433);
  pub const EJ: Self = Self(434);
  pub const Ej: Self = Self(435);
  pub const EK: Self = Self(436);
  pub const Ek: Self = Self(437);
  pub const EL: Self = Self(438);
  pub const El: Self = Self(439);
  pub const EM: Self = Self(440);
  pub const Em: Self = Self(441);
  pub const EN: Self = Self(442);
  pub const En: Self = Self(443);
  pub const EO: Self = Self(444);
  pub const Eo: Self = Self(445);
  pub const EP: Self = Self(446);
  pub const Ep: Self = Self(447);
  pub const EQ: Self = Self(448);
  pub const Eq: Self = Self(449);
  pub const ER: Self = Self(450);
  pub const Er: Self = Self(451);
  pub const ES: Self = Self(452);
  pub const Es: Self = Self(453);
  pub const ET: Self = Self(454);
  pub const Et: Self = Self(455);
  pub const EU: Self = Self(456);
  pub const Eu: Self = Self(457);
  pub const EV: Self = Self(458);
  pub const Ev: Self = Self(459);
  pub const EW: Self = Self(460);
  pub const Ew: Self = Self(461);
  pub const EX: Self = Self(462);
  pub const Ex: Self = Self(463);
  pub const EY: Self = Self(464);
  pub const Ey: Self = Self(465);
  pub const EZ: Self = Self(466);
  pub const Ez: Self = Self(467);
  pub const eA: Self = Self(468);
  pub const ea: Self = Self(469);
  pub const eB: Self = Self(470);
  pub const eb: Self = Self(471);
  pub const eC: Self = Self(472);
  pub const ec: Self = Self(473);
  pub const eD: Self = Self(474);
  pub const ed: Self = Self(475);
  pub const eE: Self = Self(476);
  pub const ee: Self = Self(477);
  pub const eF: Self = Self(478);
  pub const ef: Self = Self(479);
  pub const eG: Self = Self(480);
  pub const eg: Self = Self(481);
  pub const eH: Self = Self(482);
  pub const eh: Self = Self(483);
  pub const eI: Self = Self(484);
  pub const ei: Self = Self(485);
  pub const eJ: Self = Self(486);
  pub const ej: Self = Self(487);
  pub const eK: Self = Self(488);
  pub const ek: Self = Self(489);
  pub const eL: Self = Self(490);
  pub const el: Self = Self(491);
  pub const eM: Self = Self(492);
  pub const em: Self = Self(493);
  pub const eN: Self = Self(494);
  pub const en: Self = Self(495);
  pub const eO: Self = Self(496);
  pub const eo: Self = Self(497);
  pub const eP: Self = Self(498);
  pub const ep: Self = Self(499);
  pub const eQ: Self = Self(500);
  pub const eq: Self = Self(501);
  pub const eR: Self = Self(502);
  pub const er: Self = Self(503);
  pub const eS: Self = Self(504);
  pub const es: Self = Self(505);
  pub const eT: Self = Self(506);
  pub const et: Self = Self(507);
  pub const eU: Self = Self(508);
  pub const eu: Self = Self(509);
  pub const eV: Self = Self(510);
  pub const ev: Self = Self(511);
  pub const eW: Self = Self(512);
  pub const ew: Self = Self(513);
  pub const eX: Self = Self(514);
  pub const ex: Self = Self(515);
  pub const eY: Self = Self(516);
  pub const ey: Self = Self(517);
  pub const eZ: Self = Self(518);
  pub const ez: Self = Self(519);
  pub const FA: Self = Self(520);
  pub const Fa: Self = Self(521);
  pub const FB: Self = Self(522);
  pub const Fb: Self = Self(523);
  pub const FC: Self = Self(524);
  pub const Fc: Self = Self(525);
  pub const FD: Self = Self(526);
  pub const Fd: Self = Self(527);
  pub const FE: Self = Self(528);
  pub const Fe: Self = Self(529);
  pub const FF: Self = Self(530);
  pub const Ff: Self = Self(531);
  pub const FG: Self = Self(532);
  pub const Fg: Self = Self(533);
  pub const FH: Self = Self(534);
  pub const Fh: Self = Self(535);
  pub const FI: Self = Self(536);
  pub const Fi: Self = Self(537);
  pub const FJ: Self = Self(538);
  pub const Fj: Self = Self(539);
  pub const FK: Self = Self(540);
  pub const Fk: Self = Self(541);
  pub const FL: Self = Self(542);
  pub const Fl: Self = Self(543);
  pub const FM: Self = Self(544);
  pub const Fm: Self = Self(545);
  pub const FN: Self = Self(546);
  pub const Fn: Self = Self(547);
  pub const FO: Self = Self(548);
  pub const Fo: Self = Self(549);
  pub const FP: Self = Self(550);
  pub const Fp: Self = Self(551);
  pub const FQ: Self = Self(552);
  pub const Fq: Self = Self(553);
  pub const FR: Self = Self(554);
  pub const Fr: Self = Self(555);
  pub const FS: Self = Self(556);
  pub const Fs: Self = Self(557);
  pub const FT: Self = Self(558);
  pub const Ft: Self = Self(559);
  pub const FU: Self = Self(560);
  pub const Fu: Self = Self(561);
  pub const FV: Self = Self(562);
  pub const Fv: Self = Self(563);
  pub const FW: Self = Self(564);
  pub const Fw: Self = Self(565);
  pub const FX: Self = Self(566);
  pub const Fx: Self = Self(567);
  pub const FY: Self = Self(568);
  pub const Fy: Self = Self(569);
  pub const FZ: Self = Self(570);
  pub const Fz: Self = Self(571);
  pub const fA: Self = Self(572);
  pub const fa: Self = Self(573);
  pub const fB: Self = Self(574);
  pub const fb: Self = Self(575);
  pub const fC: Self = Self(576);
  pub const fc: Self = Self(577);
  pub const fD: Self = Self(578);
  pub const fd: Self = Self(579);
  pub const fE: Self = Self(580);
  pub const fe: Self = Self(581);
  pub const fF: Self = Self(582);
  pub const ff: Self = Self(583);
  pub const fG: Self = Self(584);
  pub const fg: Self = Self(585);
  pub const fH: Self = Self(586);
  pub const fh: Self = Self(587);
  pub const fI: Self = Self(588);
  pub const fi: Self = Self(589);
  pub const fJ: Self = Self(590);
  pub const fj: Self = Self(591);
  pub const fK: Self = Self(592);
  pub const fk: Self = Self(593);
  pub const fL: Self = Self(594);
  pub const fl: Self = Self(595);
  pub const fM: Self = Self(596);
  pub const fm: Self = Self(597);
  pub const fN: Self = Self(598);
  pub const fn_: Self = Self(599);
  pub const fO: Self = Self(600);
  pub const fo: Self = Self(601);
  pub const fP: Self = Self(602);
  pub const fp: Self = Self(603);
  pub const fQ: Self = Self(604);
  pub const fq: Self = Self(605);
  pub const fR: Self = Self(606);
  pub const fr: Self = Self(607);
  pub const fS: Self = Self(608);
  pub const fs: Self = Self(609);
  pub const fT: Self = Self(610);
  pub const ft: Self = Self(611);
  pub const fU: Self = Self(612);
  pub const fu: Self = Self(613);
  pub const fV: Self = Self(614);
  pub const fv: Self = Self(615);
  pub const fW: Self = Self(616);
  pub const fw: Self = Self(617);
  pub const fX: Self = Self(618);
  pub const fx: Self = Self(619);
  pub const fY: Self = Self(620);
  pub const fy: Self = Self(621);
  pub const fZ: Self = Self(622);
  pub const fz: Self = Self(623);
  pub const GA: Self = Self(624);
  pub const Ga: Self = Self(625);
  pub const GB: Self = Self(626);
  pub const Gb: Self = Self(627);
  pub const GC: Self = Self(628);
  pub const Gc: Self = Self(629);
  pub const GD: Self = Self(630);
  pub const Gd: Self = Self(631);
  pub const GE: Self = Self(632);
  pub const Ge: Self = Self(633);
  pub const GF: Self = Self(634);
  pub const Gf: Self = Self(635);
  pub const GG: Self = Self(636);
  pub const Gg: Self = Self(637);
  pub const GH: Self = Self(638);
  pub const Gh: Self = Self(639);
  pub const GI: Self = Self(640);
  pub const Gi: Self = Self(641);
  pub const GJ: Self = Self(642);
  pub const Gj: Self = Self(643);
  pub const GK: Self = Self(644);
  pub const Gk: Self = Self(645);
  pub const GL: Self = Self(646);
  pub const Gl: Self = Self(647);
  pub const GM: Self = Self(648);
  pub const Gm: Self = Self(649);
  pub const GN: Self = Self(650);
  pub const Gn: Self = Self(651);
  pub const GO: Self = Self(652);
  pub const Go: Self = Self(653);
  pub const GP: Self = Self(654);
  pub const Gp: Self = Self(655);
  pub const GQ: Self = Self(656);
  pub const Gq: Self = Self(657);
  pub const GR: Self = Self(658);
  pub const Gr: Self = Self(659);
  pub const GS: Self = Self(660);
  pub const Gs: Self = Self(661);
  pub const GT: Self = Self(662);
  pub const Gt: Self = Self(663);
  pub const GU: Self = Self(664);
  pub const Gu: Self = Self(665);
  pub const GV: Self = Self(666);
  pub const Gv: Self = Self(667);
  pub const GW: Self = Self(668);
  pub const Gw: Self = Self(669);
  pub const GX: Self = Self(670);
  pub const Gx: Self = Self(671);
  pub const GY: Self = Self(672);
  pub const Gy: Self = Self(673);
  pub const GZ: Self = Self(674);
  pub const Gz: Self = Self(675);
  pub const gA: Self = Self(676);
  pub const ga: Self = Self(677);
  pub const gB: Self = Self(678);
  pub const gb: Self = Self(679);
  pub const gC: Self = Self(680);
  pub const gc: Self = Self(681);
  pub const gD: Self = Self(682);
  pub const gd: Self = Self(683);
  pub const gE: Self = Self(684);
  pub const ge: Self = Self(685);
  pub const gF: Self = Self(686);
  pub const gf: Self = Self(687);
  pub const gG: Self = Self(688);
  pub const gg: Self = Self(689);
  pub const gH: Self = Self(690);
  pub const gh: Self = Self(691);
  pub const gI: Self = Self(692);
  pub const gi: Self = Self(693);
  pub const gJ: Self = Self(694);
  pub const gj: Self = Self(695);
  pub const gK: Self = Self(696);
  pub const gk: Self = Self(697);
  pub const gL: Self = Self(698);
  pub const gl: Self = Self(699);
  pub const gM: Self = Self(700);
  pub const gm: Self = Self(701);
  pub const gN: Self = Self(702);
  pub const gn: Self = Self(703);
  pub const gO: Self = Self(704);
  pub const go: Self = Self(705);
  pub const gP: Self = Self(706);
  pub const gp: Self = Self(707);
  pub const gQ: Self = Self(708);
  pub const gq: Self = Self(709);
  pub const gR: Self = Self(710);
  pub const gr: Self = Self(711);
  pub const gS: Self = Self(712);
  pub const gs: Self = Self(713);
  pub const gT: Self = Self(714);
  pub const gt: Self = Self(715);
  pub const gU: Self = Self(716);
  pub const gu: Self = Self(717);
  pub const gV: Self = Self(718);
  pub const gv: Self = Self(719);
  pub const gW: Self = Self(720);
  pub const gw: Self = Self(721);
  pub const gX: Self = Self(722);
  pub const gx: Self = Self(723);
  pub const gY: Self = Self(724);
  pub const gy: Self = Self(725);
  pub const gZ: Self = Self(726);
  pub const gz: Self = Self(727);
  pub const HA: Self = Self(728);
  pub const Ha: Self = Self(729);
  pub const HB: Self = Self(730);
  pub const Hb: Self = Self(731);
  pub const HC: Self = Self(732);
  pub const Hc: Self = Self(733);
  pub const HD: Self = Self(734);
  pub const Hd: Self = Self(735);
  pub const HE: Self = Self(736);
  pub const He: Self = Self(737);
  pub const HF: Self = Self(738);
  pub const Hf: Self = Self(739);
  pub const HG: Self = Self(740);
  pub const Hg: Self = Self(741);
  pub const HH: Self = Self(742);
  pub const Hh: Self = Self(743);
  pub const HI: Self = Self(744);
  pub const Hi: Self = Self(745);
  pub const HJ: Self = Self(746);
  pub const Hj: Self = Self(747);
  pub const HK: Self = Self(748);
  pub const Hk: Self = Self(749);
  pub const HL: Self = Self(750);
  pub const Hl: Self = Self(751);
  pub const HM: Self = Self(752);
  pub const Hm: Self = Self(753);
  pub const HN: Self = Self(754);
  pub const Hn: Self = Self(755);
  pub const HO: Self = Self(756);
  pub const Ho: Self = Self(757);
  pub const HP: Self = Self(758);
  pub const Hp: Self = Self(759);
  pub const HQ: Self = Self(760);
  pub const Hq: Self = Self(761);
  pub const HR: Self = Self(762);
  pub const Hr: Self = Self(763);
  pub const HS: Self = Self(764);
  pub const Hs: Self = Self(765);
  pub const HT: Self = Self(766);
  pub const Ht: Self = Self(767);
  pub const HU: Self = Self(768);
  pub const Hu: Self = Self(769);
  pub const HV: Self = Self(770);
  pub const Hv: Self = Self(771);
  pub const HW: Self = Self(772);
  pub const Hw: Self = Self(773);
  pub const HX: Self = Self(774);
  pub const Hx: Self = Self(775);
  pub const HY: Self = Self(776);
  pub const Hy: Self = Self(777);
  pub const HZ: Self = Self(778);
  pub const Hz: Self = Self(779);
  pub const hA: Self = Self(780);
  pub const ha: Self = Self(781);
  pub const hB: Self = Self(782);
  pub const hb: Self = Self(783);
  pub const hC: Self = Self(784);
  pub const hc: Self = Self(785);
  pub const hD: Self = Self(786);
  pub const hd: Self = Self(787);
  pub const hE: Self = Self(788);
  pub const he: Self = Self(789);
  pub const hF: Self = Self(790);
  pub const hf: Self = Self(791);
  pub const hG: Self = Self(792);
  pub const hg: Self = Self(793);
  pub const hH: Self = Self(794);
  pub const hh: Self = Self(795);
  pub const hI: Self = Self(796);
  pub const hi: Self = Self(797);
  pub const hJ: Self = Self(798);
  pub const hj: Self = Self(799);
  pub const hK: Self = Self(800);
  pub const hk: Self = Self(801);
  pub const hL: Self = Self(802);
  pub const hl: Self = Self(803);
  pub const hM: Self = Self(804);
  pub const hm: Self = Self(805);
  pub const hN: Self = Self(806);
  pub const hn: Self = Self(807);
  pub const hO: Self = Self(808);
  pub const ho: Self = Self(809);
  pub const hP: Self = Self(810);
  pub const hp: Self = Self(811);
  pub const hQ: Self = Self(812);
  pub const hq: Self = Self(813);
  pub const hR: Self = Self(814);
  pub const hr: Self = Self(815);
  pub const hS: Self = Self(816);
  pub const hs: Self = Self(817);
  pub const hT: Self = Self(818);
  pub const ht: Self = Self(819);
  pub const hU: Self = Self(820);
  pub const hu: Self = Self(821);
  pub const hV: Self = Self(822);
  pub const hv: Self = Self(823);
  pub const hW: Self = Self(824);
  pub const hw: Self = Self(825);
  pub const hX: Self = Self(826);
  pub const hx: Self = Self(827);
  pub const hY: Self = Self(828);
  pub const hy: Self = Self(829);
  pub const hZ: Self = Self(830);
  pub const hz: Self = Self(831);
  pub const IA: Self = Self(832);
  pub const Ia: Self = Self(833);
  pub const IB: Self = Self(834);
  pub const Ib: Self = Self(835);
  pub const IC: Self = Self(836);
  pub const Ic: Self = Self(837);
  pub const ID: Self = Self(838);
  pub const Id: Self = Self(839);
  pub const IE: Self = Self(840);
  pub const Ie: Self = Self(841);
  pub const IF: Self = Self(842);
  pub const If: Self = Self(843);
  pub const IG: Self = Self(844);
  pub const Ig: Self = Self(845);
  pub const IH: Self = Self(846);
  pub const Ih: Self = Self(847);
  pub const II: Self = Self(848);
  pub const Ii: Self = Self(849);
  pub const IJ: Self = Self(850);
  pub const Ij: Self = Self(851);
  pub const IK: Self = Self(852);
  pub const Ik: Self = Self(853);
  pub const IL: Self = Self(854);
  pub const Il: Self = Self(855);
  pub const IM: Self = Self(856);
  pub const Im: Self = Self(857);
  pub const IN: Self = Self(858);
  pub const In: Self = Self(859);
  pub const IO: Self = Self(860);
  pub const Io: Self = Self(861);
  pub const IP: Self = Self(862);
  pub const Ip: Self = Self(863);
  pub const IQ: Self = Self(864);
  pub const Iq: Self = Self(865);
  pub const IR: Self = Self(866);
  pub const Ir: Self = Self(867);
  pub const IS: Self = Self(868);
  pub const Is: Self = Self(869);
  pub const IT: Self = Self(870);
  pub const It: Self = Self(871);
  pub const IU: Self = Self(872);
  pub const Iu: Self = Self(873);
  pub const IV: Self = Self(874);
  pub const Iv: Self = Self(875);
  pub const IW: Self = Self(876);
  pub const Iw: Self = Self(877);
  pub const IX: Self = Self(878);
  pub const Ix: Self = Self(879);
  pub const IY: Self = Self(880);
  pub const Iy: Self = Self(881);
  pub const IZ: Self = Self(882);
  pub const Iz: Self = Self(883);
  pub const iA: Self = Self(884);
  pub const ia: Self = Self(885);
  pub const iB: Self = Self(886);
  pub const ib: Self = Self(887);
  pub const iC: Self = Self(888);
  pub const ic: Self = Self(889);
  pub const iD: Self = Self(890);
  pub const id: Self = Self(891);
  pub const iE: Self = Self(892);
  pub const ie: Self = Self(893);
  pub const iF: Self = Self(894);
  pub const if_: Self = Self(895);
  pub const iG: Self = Self(896);
  pub const ig: Self = Self(897);
  pub const iH: Self = Self(898);
  pub const ih: Self = Self(899);
  pub const iI: Self = Self(900);
  pub const ii: Self = Self(901);
  pub const iJ: Self = Self(902);
  pub const ij: Self = Self(903);
  pub const iK: Self = Self(904);
  pub const ik: Self = Self(905);
  pub const iL: Self = Self(906);
  pub const il: Self = Self(907);
  pub const iM: Self = Self(908);
  pub const im: Self = Self(909);
  pub const iN: Self = Self(910);
  pub const in_: Self = Self(911);
  pub const iO: Self = Self(912);
  pub const io: Self = Self(913);
  pub const iP: Self = Self(914);
  pub const ip: Self = Self(915);
  pub const iQ: Self = Self(916);
  pub const iq: Self = Self(917);
  pub const iR: Self = Self(918);
  pub const ir: Self = Self(919);
  pub const iS: Self = Self(920);
  pub const is: Self = Self(921);
  pub const iT: Self = Self(922);
  pub const it: Self = Self(923);
  pub const iU: Self = Self(924);
  pub const iu: Self = Self(925);
  pub const iV: Self = Self(926);
  pub const iv: Self = Self(927);
  pub const iW: Self = Self(928);
  pub const iw: Self = Self(929);
  pub const iX: Self = Self(930);
  pub const ix: Self = Self(931);
  pub const iY: Self = Self(932);
  pub const iy: Self = Self(933);
  pub const iZ: Self = Self(934);
  pub const iz: Self = Self(935);
  pub const JA: Self = Self(936);
  pub const Ja: Self = Self(937);
  pub const JB: Self = Self(938);
  pub const Jb: Self = Self(939);
  pub const JC: Self = Self(940);
  pub const Jc: Self = Self(941);
  pub const JD: Self = Self(942);
  pub const Jd: Self = Self(943);
  pub const JE: Self = Self(944);
  pub const Je: Self = Self(945);
  pub const JF: Self = Self(946);
  pub const Jf: Self = Self(947);
  pub const JG: Self = Self(948);
  pub const Jg: Self = Self(949);
  pub const JH: Self = Self(950);
  pub const Jh: Self = Self(951);
  pub const JI: Self = Self(952);
  pub const Ji: Self = Self(953);
  pub const JJ: Self = Self(954);
  pub const Jj: Self = Self(955);
  pub const JK: Self = Self(956);
  pub const Jk: Self = Self(957);
  pub const JL: Self = Self(958);
  pub const Jl: Self = Self(959);
  pub const JM: Self = Self(960);
  pub const Jm: Self = Self(961);
  pub const JN: Self = Self(962);
  pub const Jn: Self = Self(963);
  pub const JO: Self = Self(964);
  pub const Jo: Self = Self(965);
  pub const JP: Self = Self(966);
  pub const Jp: Self = Self(967);
  pub const JQ: Self = Self(968);
  pub const Jq: Self = Self(969);
  pub const JR: Self = Self(970);
  pub const Jr: Self = Self(971);
  pub const JS: Self = Self(972);
  pub const Js: Self = Self(973);
  pub const JT: Self = Self(974);
  pub const Jt: Self = Self(975);
  pub const JU: Self = Self(976);
  pub const Ju: Self = Self(977);
  pub const JV: Self = Self(978);
  pub const Jv: Self = Self(979);
  pub const JW: Self = Self(980);
  pub const Jw: Self = Self(981);
  pub const JX: Self = Self(982);
  pub const Jx: Self = Self(983);
  pub const JY: Self = Self(984);
  pub const Jy: Self = Self(985);
  pub const JZ: Self = Self(986);
  pub const Jz: Self = Self(987);
  pub const jA: Self = Self(988);
  pub const ja: Self = Self(989);
  pub const jB: Self = Self(990);
  pub const jb: Self = Self(991);
  pub const jC: Self = Self(992);
  pub const jc: Self = Self(993);
  pub const jD: Self = Self(994);
  pub const jd: Self = Self(995);
  pub const jE: Self = Self(996);
  pub const je: Self = Self(997);
  pub const jF: Self = Self(998);
  pub const jf: Self = Self(999);
  pub const jG: Self = Self(1000);
  pub const jg: Self = Self(1001);
  pub const jH: Self = Self(1002);
  pub const jh: Self = Self(1003);
  pub const jI: Self = Self(1004);
  pub const ji: Self = Self(1005);
  pub const jJ: Self = Self(1006);
  pub const jj: Self = Self(1007);
  pub const jK: Self = Self(1008);
  pub const jk: Self = Self(1009);
  pub const jL: Self = Self(1010);
  pub const jl: Self = Self(1011);
  pub const jM: Self = Self(1012);
  pub const jm: Self = Self(1013);
  pub const jN: Self = Self(1014);
  pub const jn: Self = Self(1015);
  pub const jO: Self = Self(1016);
  pub const jo: Self = Self(1017);
  pub const jP: Self = Self(1018);
  pub const jp: Self = Self(1019);
  pub const jQ: Self = Self(1020);
  pub const jq: Self = Self(1021);
  pub const jR: Self = Self(1022);
  pub const jr: Self = Self(1023);
  pub const jS: Self = Self(1024);
  pub const js: Self = Self(1025);
  pub const jT: Self = Self(1026);
  pub const jt: Self = Self(1027);
  pub const jU: Self = Self(1028);
  pub const ju: Self = Self(1029);
  pub const jV: Self = Self(1030);
  pub const jv: Self = Self(1031);
  pub const jW: Self = Self(1032);
  pub const jw: Self = Self(1033);
  pub const jX: Self = Self(1034);
  pub const jx: Self = Self(1035);
  pub const jY: Self = Self(1036);
  pub const jy: Self = Self(1037);
  pub const jZ: Self = Self(1038);
  pub const jz: Self = Self(1039);
  pub const KA: Self = Self(1040);
  pub const Ka: Self = Self(1041);
  pub const KB: Self = Self(1042);
  pub const Kb: Self = Self(1043);
  pub const KC: Self = Self(1044);
  pub const Kc: Self = Self(1045);
  pub const KD: Self = Self(1046);
  pub const Kd: Self = Self(1047);
  pub const KE: Self = Self(1048);
  pub const Ke: Self = Self(1049);
  pub const KF: Self = Self(1050);
  pub const Kf: Self = Self(1051);
  pub const KG: Self = Self(1052);
  pub const Kg: Self = Self(1053);
  pub const KH: Self = Self(1054);
  pub const Kh: Self = Self(1055);
  pub const KI: Self = Self(1056);
  pub const Ki: Self = Self(1057);
  pub const KJ: Self = Self(1058);
  pub const Kj: Self = Self(1059);
  pub const KK: Self = Self(1060);
  pub const Kk: Self = Self(1061);
  pub const KL: Self = Self(1062);
  pub const Kl: Self = Self(1063);
  pub const KM: Self = Self(1064);
  pub const Km: Self = Self(1065);
  pub const KN: Self = Self(1066);
  pub const Kn: Self = Self(1067);
  pub const KO: Self = Self(1068);
  pub const Ko: Self = Self(1069);
  pub const KP: Self = Self(1070);
  pub const Kp: Self = Self(1071);
  pub const KQ: Self = Self(1072);
  pub const Kq: Self = Self(1073);
  pub const KR: Self = Self(1074);
  pub const Kr: Self = Self(1075);
  pub const KS: Self = Self(1076);
  pub const Ks: Self = Self(1077);
  pub const KT: Self = Self(1078);
  pub const Kt: Self = Self(1079);
  pub const KU: Self = Self(1080);
  pub const Ku: Self = Self(1081);
  pub const KV: Self = Self(1082);
  pub const Kv: Self = Self(1083);
  pub const KW: Self = Self(1084);
  pub const Kw: Self = Self(1085);
  pub const KX: Self = Self(1086);
  pub const Kx: Self = Self(1087);
  pub const KY: Self = Self(1088);
  pub const Ky: Self = Self(1089);
  pub const KZ: Self = Self(1090);
  pub const Kz: Self = Self(1091);
  pub const kA: Self = Self(1092);
  pub const ka: Self = Self(1093);
  pub const kB: Self = Self(1094);
  pub const kb: Self = Self(1095);
  pub const kC: Self = Self(1096);
  pub const kc: Self = Self(1097);
  pub const kD: Self = Self(1098);
  pub const kd: Self = Self(1099);
  pub const kE: Self = Self(1100);
  pub const ke: Self = Self(1101);
  pub const kF: Self = Self(1102);
  pub const kf: Self = Self(1103);
  pub const kG: Self = Self(1104);
  pub const kg: Self = Self(1105);
  pub const kH: Self = Self(1106);
  pub const kh: Self = Self(1107);
  pub const kI: Self = Self(1108);
  pub const ki: Self = Self(1109);
  pub const kJ: Self = Self(1110);
  pub const kj: Self = Self(1111);
  pub const kK: Self = Self(1112);
  pub const kk: Self = Self(1113);
  pub const kL: Self = Self(1114);
  pub const kl: Self = Self(1115);
  pub const kM: Self = Self(1116);
  pub const km: Self = Self(1117);
  pub const kN: Self = Self(1118);
  pub const kn: Self = Self(1119);
  pub const kO: Self = Self(1120);
  pub const ko: Self = Self(1121);
  pub const kP: Self = Self(1122);
  pub const kp: Self = Self(1123);
  pub const kQ: Self = Self(1124);
  pub const kq: Self = Self(1125);
  pub const kR: Self = Self(1126);
  pub const kr: Self = Self(1127);
  pub const kS: Self = Self(1128);
  pub const ks: Self = Self(1129);
  pub const kT: Self = Self(1130);
  pub const kt: Self = Self(1131);
  pub const kU: Self = Self(1132);
  pub const ku: Self = Self(1133);
  pub const kV: Self = Self(1134);
  pub const kv: Self = Self(1135);
  pub const kW: Self = Self(1136);
  pub const kw: Self = Self(1137);
  pub const kX: Self = Self(1138);
  pub const kx: Self = Self(1139);
  pub const kY: Self = Self(1140);
  pub const ky: Self = Self(1141);
  pub const kZ: Self = Self(1142);
  pub const kz: Self = Self(1143);
  pub const LA: Self = Self(1144);
  pub const La: Self = Self(1145);
  pub const LB: Self = Self(1146);
  pub const Lb: Self = Self(1147);
  pub const LC: Self = Self(1148);
  pub const Lc: Self = Self(1149);
  pub const LD: Self = Self(1150);
  pub const Ld: Self = Self(1151);
  pub const LE: Self = Self(1152);
  pub const Le: Self = Self(1153);
  pub const LF: Self = Self(1154);
  pub const Lf: Self = Self(1155);
  pub const LG: Self = Self(1156);
  pub const Lg: Self = Self(1157);
  pub const LH: Self = Self(1158);
  pub const Lh: Self = Self(1159);
  pub const LI: Self = Self(1160);
  pub const Li: Self = Self(1161);
  pub const LJ: Self = Self(1162);
  pub const Lj: Self = Self(1163);
  pub const LK: Self = Self(1164);
  pub const Lk: Self = Self(1165);
  pub const LL: Self = Self(1166);
  pub const Ll: Self = Self(1167);
  pub const LM: Self = Self(1168);
  pub const Lm: Self = Self(1169);
  pub const LN: Self = Self(1170);
  pub const Ln: Self = Self(1171);
  pub const LO: Self = Self(1172);
  pub const Lo: Self = Self(1173);
  pub const LP: Self = Self(1174);
  pub const Lp: Self = Self(1175);
  pub const LQ: Self = Self(1176);
  pub const Lq: Self = Self(1177);
  pub const LR: Self = Self(1178);
  pub const Lr: Self = Self(1179);
  pub const LS: Self = Self(1180);
  pub const Ls: Self = Self(1181);
  pub const LT: Self = Self(1182);
  pub const Lt: Self = Self(1183);
  pub const LU: Self = Self(1184);
  pub const Lu: Self = Self(1185);
  pub const LV: Self = Self(1186);
  pub const Lv: Self = Self(1187);
  pub const LW: Self = Self(1188);
  pub const Lw: Self = Self(1189);
  pub const LX: Self = Self(1190);
  pub const Lx: Self = Self(1191);
  pub const LY: Self = Self(1192);
  pub const Ly: Self = Self(1193);
  pub const LZ: Self = Self(1194);
  pub const Lz: Self = Self(1195);
  pub const lA: Self = Self(1196);
  pub const la: Self = Self(1197);
  pub const lB: Self = Self(1198);
  pub const lb: Self = Self(1199);
  pub const lC: Self = Self(1200);
  pub const lc: Self = Self(1201);
  pub const lD: Self = Self(1202);
  pub const ld: Self = Self(1203);
  pub const lE: Self = Self(1204);
  pub const le: Self = Self(1205);
  pub const lF: Self = Self(1206);
  pub const lf: Self = Self(1207);
  pub const lG: Self = Self(1208);
  pub const lg: Self = Self(1209);
  pub const lH: Self = Self(1210);
  pub const lh: Self = Self(1211);
  pub const lI: Self = Self(1212);
  pub const li: Self = Self(1213);
  pub const lJ: Self = Self(1214);
  pub const lj: Self = Self(1215);
  pub const lK: Self = Self(1216);
  pub const lk: Self = Self(1217);
  pub const lL: Self = Self(1218);
  pub const ll: Self = Self(1219);
  pub const lM: Self = Self(1220);
  pub const lm: Self = Self(1221);
  pub const lN: Self = Self(1222);
  pub const ln: Self = Self(1223);
  pub const lO: Self = Self(1224);
  pub const lo: Self = Self(1225);
  pub const lP: Self = Self(1226);
  pub const lp: Self = Self(1227);
  pub const lQ: Self = Self(1228);
  pub const lq: Self = Self(1229);
  pub const lR: Self = Self(1230);
  pub const lr: Self = Self(1231);
  pub const lS: Self = Self(1232);
  pub const ls: Self = Self(1233);
  pub const lT: Self = Self(1234);
  pub const lt: Self = Self(1235);
  pub const lU: Self = Self(1236);
  pub const lu: Self = Self(1237);
  pub const lV: Self = Self(1238);
  pub const lv: Self = Self(1239);
  pub const lW: Self = Self(1240);
  pub const lw: Self = Self(1241);
  pub const lX: Self = Self(1242);
  pub const lx: Self = Self(1243);
  pub const lY: Self = Self(1244);
  pub const ly: Self = Self(1245);
  pub const lZ: Self = Self(1246);
  pub const lz: Self = Self(1247);
  pub const MA: Self = Self(1248);
  pub const Ma: Self = Self(1249);
  pub const MB: Self = Self(1250);
  pub const Mb: Self = Self(1251);
  pub const MC: Self = Self(1252);
  pub const Mc: Self = Self(1253);
  pub const MD: Self = Self(1254);
  pub const Md: Self = Self(1255);
  pub const ME: Self = Self(1256);
  pub const Me: Self = Self(1257);
  pub const MF: Self = Self(1258);
  pub const Mf: Self = Self(1259);
  pub const MG: Self = Self(1260);
  pub const Mg: Self = Self(1261);
  pub const MH: Self = Self(1262);
  pub const Mh: Self = Self(1263);
  pub const MI: Self = Self(1264);
  pub const Mi: Self = Self(1265);
  pub const MJ: Self = Self(1266);
  pub const Mj: Self = Self(1267);
  pub const MK: Self = Self(1268);
  pub const Mk: Self = Self(1269);
  pub const ML: Self = Self(1270);
  pub const Ml: Self = Self(1271);
  pub const MM: Self = Self(1272);
  pub const Mm: Self = Self(1273);
  pub const MN: Self = Self(1274);
  pub const Mn: Self = Self(1275);
  pub const MO: Self = Self(1276);
  pub const Mo: Self = Self(1277);
  pub const MP: Self = Self(1278);
  pub const Mp: Self = Self(1279);
  pub const MQ: Self = Self(1280);
  pub const Mq: Self = Self(1281);
  pub const MR: Self = Self(1282);
  pub const Mr: Self = Self(1283);
  pub const MS: Self = Self(1284);
  pub const Ms: Self = Self(1285);
  pub const MT: Self = Self(1286);
  pub const Mt: Self = Self(1287);
  pub const MU: Self = Self(1288);
  pub const Mu: Self = Self(1289);
  pub const MV: Self = Self(1290);
  pub const Mv: Self = Self(1291);
  pub const MW: Self = Self(1292);
  pub const Mw: Self = Self(1293);
  pub const MX: Self = Self(1294);
  pub const Mx: Self = Self(1295);
  pub const MY: Self = Self(1296);
  pub const My: Self = Self(1297);
  pub const MZ: Self = Self(1298);
  pub const Mz: Self = Self(1299);
  pub const mA: Self = Self(1300);
  pub const ma: Self = Self(1301);
  pub const mB: Self = Self(1302);
  pub const mb: Self = Self(1303);
  pub const mC: Self = Self(1304);
  pub const mc: Self = Self(1305);
  pub const mD: Self = Self(1306);
  pub const md: Self = Self(1307);
  pub const mE: Self = Self(1308);
  pub const me: Self = Self(1309);
  pub const mF: Self = Self(1310);
  pub const mf: Self = Self(1311);
  pub const mG: Self = Self(1312);
  pub const mg: Self = Self(1313);
  pub const mH: Self = Self(1314);
  pub const mh: Self = Self(1315);
  pub const mI: Self = Self(1316);
  pub const mi: Self = Self(1317);
  pub const mJ: Self = Self(1318);
  pub const mj: Self = Self(1319);
  pub const mK: Self = Self(1320);
  pub const mk: Self = Self(1321);
  pub const mL: Self = Self(1322);
  pub const ml: Self = Self(1323);
  pub const mM: Self = Self(1324);
  pub const mm: Self = Self(1325);
  pub const mN: Self = Self(1326);
  pub const mn: Self = Self(1327);
  pub const mO: Self = Self(1328);
  pub const mo: Self = Self(1329);
  pub const mP: Self = Self(1330);
  pub const mp: Self = Self(1331);
  pub const mQ: Self = Self(1332);
  pub const mq: Self = Self(1333);
  pub const mR: Self = Self(1334);
  pub const mr: Self = Self(1335);
  pub const mS: Self = Self(1336);
  pub const ms: Self = Self(1337);
  pub const mT: Self = Self(1338);
  pub const mt: Self = Self(1339);
  pub const mU: Self = Self(1340);
  pub const mu: Self = Self(1341);
  pub const mV: Self = Self(1342);
  pub const mv: Self = Self(1343);
  pub const mW: Self = Self(1344);
  pub const mw: Self = Self(1345);
  pub const mX: Self = Self(1346);
  pub const mx: Self = Self(1347);
  pub const mY: Self = Self(1348);
  pub const my: Self = Self(1349);
  pub const mZ: Self = Self(1350);
  pub const mz: Self = Self(1351);
  pub const NA: Self = Self(1352);
  pub const Na: Self = Self(1353);
  pub const NB: Self = Self(1354);
  pub const Nb: Self = Self(1355);
  pub const NC: Self = Self(1356);
  pub const Nc: Self = Self(1357);
  pub const ND: Self = Self(1358);
  pub const Nd: Self = Self(1359);
  pub const NE: Self = Self(1360);
  pub const Ne: Self = Self(1361);
  pub const NF: Self = Self(1362);
  pub const Nf: Self = Self(1363);
  pub const NG: Self = Self(1364);
  pub const Ng: Self = Self(1365);
  pub const NH: Self = Self(1366);
  pub const Nh: Self = Self(1367);
  pub const NI: Self = Self(1368);
  pub const Ni: Self = Self(1369);
  pub const NJ: Self = Self(1370);
  pub const Nj: Self = Self(1371);
  pub const NK: Self = Self(1372);
  pub const Nk: Self = Self(1373);
  pub const NL: Self = Self(1374);
  pub const Nl: Self = Self(1375);
  pub const NM: Self = Self(1376);
  pub const Nm: Self = Self(1377);
  pub const NN: Self = Self(1378);
  pub const Nn: Self = Self(1379);
  pub const NO: Self = Self(1380);
  pub const No: Self = Self(1381);
  pub const NP: Self = Self(1382);
  pub const Np: Self = Self(1383);
  pub const NQ: Self = Self(1384);
  pub const Nq: Self = Self(1385);
  pub const NR: Self = Self(1386);
  pub const Nr: Self = Self(1387);
  pub const NS: Self = Self(1388);
  pub const Ns: Self = Self(1389);
  pub const NT: Self = Self(1390);
  pub const Nt: Self = Self(1391);
  pub const NU: Self = Self(1392);
  pub const Nu: Self = Self(1393);
  pub const NV: Self = Self(1394);
  pub const Nv: Self = Self(1395);
  pub const NW: Self = Self(1396);
  pub const Nw: Self = Self(1397);
  pub const NX: Self = Self(1398);
  pub const Nx: Self = Self(1399);
  pub const NY: Self = Self(1400);
  pub const Ny: Self = Self(1401);
  pub const NZ: Self = Self(1402);
  pub const Nz: Self = Self(1403);
  pub const nA: Self = Self(1404);
  pub const na: Self = Self(1405);
  pub const nB: Self = Self(1406);
  pub const nb: Self = Self(1407);
  pub const nC: Self = Self(1408);
  pub const nc: Self = Self(1409);
  pub const nD: Self = Self(1410);
  pub const nd: Self = Self(1411);
  pub const nE: Self = Self(1412);
  pub const ne: Self = Self(1413);
  pub const nF: Self = Self(1414);
  pub const nf: Self = Self(1415);
  pub const nG: Self = Self(1416);
  pub const ng: Self = Self(1417);
  pub const nH: Self = Self(1418);
  pub const nh: Self = Self(1419);
  pub const nI: Self = Self(1420);
  pub const ni: Self = Self(1421);
  pub const nJ: Self = Self(1422);
  pub const nj: Self = Self(1423);
  pub const nK: Self = Self(1424);
  pub const nk: Self = Self(1425);
  pub const nL: Self = Self(1426);
  pub const nl: Self = Self(1427);
  pub const nM: Self = Self(1428);
  pub const nm: Self = Self(1429);
  pub const nN: Self = Self(1430);
  pub const nn: Self = Self(1431);
  pub const nO: Self = Self(1432);
  pub const no: Self = Self(1433);
  pub const nP: Self = Self(1434);
  pub const np: Self = Self(1435);
  pub const nQ: Self = Self(1436);
  pub const nq: Self = Self(1437);
  pub const nR: Self = Self(1438);
  pub const nr: Self = Self(1439);
  pub const nS: Self = Self(1440);
  pub const ns: Self = Self(1441);
  pub const nT: Self = Self(1442);
  pub const nt: Self = Self(1443);
  pub const nU: Self = Self(1444);
  pub const nu: Self = Self(1445);
  pub const nV: Self = Self(1446);
  pub const nv: Self = Self(1447);
  pub const nW: Self = Self(1448);
  pub const nw: Self = Self(1449);
  pub const nX: Self = Self(1450);
  pub const nx: Self = Self(1451);
  pub const nY: Self = Self(1452);
  pub const ny: Self = Self(1453);
  pub const nZ: Self = Self(1454);
  pub const nz: Self = Self(1455);
  pub const OA: Self = Self(1456);
  pub const Oa: Self = Self(1457);
  pub const OB: Self = Self(1458);
  pub const Ob: Self = Self(1459);
  pub const OC: Self = Self(1460);
  pub const Oc: Self = Self(1461);
  pub const OD: Self = Self(1462);
  pub const Od: Self = Self(1463);
  pub const OE: Self = Self(1464);
  pub const Oe: Self = Self(1465);
  pub const OF: Self = Self(1466);
  pub const Of: Self = Self(1467);
  pub const OG: Self = Self(1468);
  pub const Og: Self = Self(1469);
  pub const OH: Self = Self(1470);
  pub const Oh: Self = Self(1471);
  pub const OI: Self = Self(1472);
  pub const Oi: Self = Self(1473);
  pub const OJ: Self = Self(1474);
  pub const Oj: Self = Self(1475);
  pub const OK: Self = Self(1476);
  pub const Ok: Self = Self(1477);
  pub const OL: Self = Self(1478);
  pub const Ol: Self = Self(1479);
  pub const OM: Self = Self(1480);
  pub const Om: Self = Self(1481);
  pub const ON: Self = Self(1482);
  pub const On: Self = Self(1483);
  pub const OO: Self = Self(1484);
  pub const Oo: Self = Self(1485);
  pub const OP: Self = Self(1486);
  pub const Op: Self = Self(1487);
  pub const OQ: Self = Self(1488);
  pub const Oq: Self = Self(1489);
  pub const OR: Self = Self(1490);
  pub const Or: Self = Self(1491);
  pub const OS: Self = Self(1492);
  pub const Os: Self = Self(1493);
  pub const OT: Self = Self(1494);
  pub const Ot: Self = Self(1495);
  pub const OU: Self = Self(1496);
  pub const Ou: Self = Self(1497);
  pub const OV: Self = Self(1498);
  pub const Ov: Self = Self(1499);
  pub const OW: Self = Self(1500);
  pub const Ow: Self = Self(1501);
  pub const OX: Self = Self(1502);
  pub const Ox: Self = Self(1503);
  pub const OY: Self = Self(1504);
  pub const Oy: Self = Self(1505);
  pub const OZ: Self = Self(1506);
  pub const Oz: Self = Self(1507);
  pub const oA: Self = Self(1508);
  pub const oa: Self = Self(1509);
  pub const oB: Self = Self(1510);
  pub const ob: Self = Self(1511);
  pub const oC: Self = Self(1512);
  pub const oc: Self = Self(1513);
  pub const oD: Self = Self(1514);
  pub const od: Self = Self(1515);
  pub const oE: Self = Self(1516);
  pub const oe: Self = Self(1517);
  pub const oF: Self = Self(1518);
  pub const of: Self = Self(1519);
  pub const oG: Self = Self(1520);
  pub const og: Self = Self(1521);
  pub const oH: Self = Self(1522);
  pub const oh: Self = Self(1523);
  pub const oI: Self = Self(1524);
  pub const oi: Self = Self(1525);
  pub const oJ: Self = Self(1526);
  pub const oj: Self = Self(1527);
  pub const oK: Self = Self(1528);
  pub const ok: Self = Self(1529);
  pub const oL: Self = Self(1530);
  pub const ol: Self = Self(1531);
  pub const oM: Self = Self(1532);
  pub const om: Self = Self(1533);
  pub const oN: Self = Self(1534);
  pub const on: Self = Self(1535);
  pub const oO: Self = Self(1536);
  pub const oo: Self = Self(1537);
  pub const oP: Self = Self(1538);
  pub const op: Self = Self(1539);
  pub const oQ: Self = Self(1540);
  pub const oq: Self = Self(1541);
  pub const oR: Self = Self(1542);
  pub const or: Self = Self(1543);
  pub const oS: Self = Self(1544);
  pub const os: Self = Self(1545);
  pub const oT: Self = Self(1546);
  pub const ot: Self = Self(1547);
  pub const oU: Self = Self(1548);
  pub const ou: Self = Self(1549);
  pub const oV: Self = Self(1550);
  pub const ov: Self = Self(1551);
  pub const oW: Self = Self(1552);
  pub const ow: Self = Self(1553);
  pub const oX: Self = Self(1554);
  pub const ox: Self = Self(1555);
  pub const oY: Self = Self(1556);
  pub const oy: Self = Self(1557);
  pub const oZ: Self = Self(1558);
  pub const oz: Self = Self(1559);
  pub const PA: Self = Self(1560);
  pub const Pa: Self = Self(1561);
  pub const PB: Self = Self(1562);
  pub const Pb: Self = Self(1563);
  pub const PC: Self = Self(1564);
  pub const Pc: Self = Self(1565);
  pub const PD: Self = Self(1566);
  pub const Pd: Self = Self(1567);
  pub const PE: Self = Self(1568);
  pub const Pe: Self = Self(1569);
  pub const PF: Self = Self(1570);
  pub const Pf: Self = Self(1571);
  pub const PG: Self = Self(1572);
  pub const Pg: Self = Self(1573);
  pub const PH: Self = Self(1574);
  pub const Ph: Self = Self(1575);
  pub const PI: Self = Self(1576);
  pub const Pi: Self = Self(1577);
  pub const PJ: Self = Self(1578);
  pub const Pj: Self = Self(1579);
  pub const PK: Self = Self(1580);
  pub const Pk: Self = Self(1581);
  pub const PL: Self = Self(1582);
  pub const Pl: Self = Self(1583);
  pub const PM: Self = Self(1584);
  pub const Pm: Self = Self(1585);
  pub const PN: Self = Self(1586);
  pub const Pn: Self = Self(1587);
  pub const PO: Self = Self(1588);
  pub const Po: Self = Self(1589);
  pub const PP: Self = Self(1590);
  pub const Pp: Self = Self(1591);
  pub const PQ: Self = Self(1592);
  pub const Pq: Self = Self(1593);
  pub const PR: Self = Self(1594);
  pub const Pr: Self = Self(1595);
  pub const PS: Self = Self(1596);
  pub const Ps: Self = Self(1597);
  pub const PT: Self = Self(1598);
  pub const Pt: Self = Self(1599);
  pub const PU: Self = Self(1600);
  pub const Pu: Self = Self(1601);
  pub const PV: Self = Self(1602);
  pub const Pv: Self = Self(1603);
  pub const PW: Self = Self(1604);
  pub const Pw: Self = Self(1605);
  pub const PX: Self = Self(1606);
  pub const Px: Self = Self(1607);
  pub const PY: Self = Self(1608);
  pub const Py: Self = Self(1609);
  pub const PZ: Self = Self(1610);
  pub const Pz: Self = Self(1611);
  pub const pA: Self = Self(1612);
  pub const pa: Self = Self(1613);
  pub const pB: Self = Self(1614);
  pub const pb: Self = Self(1615);
  pub const pC: Self = Self(1616);
  pub const pc: Self = Self(1617);
  pub const pD: Self = Self(1618);
  pub const pd: Self = Self(1619);
  pub const pE: Self = Self(1620);
  pub const pe: Self = Self(1621);
  pub const pF: Self = Self(1622);
  pub const pf: Self = Self(1623);
  pub const pG: Self = Self(1624);
  pub const pg: Self = Self(1625);
  pub const pH: Self = Self(1626);
  pub const ph: Self = Self(1627);
  pub const pI: Self = Self(1628);
  pub const pi: Self = Self(1629);
  pub const pJ: Self = Self(1630);
  pub const pj: Self = Self(1631);
  pub const pK: Self = Self(1632);
  pub const pk: Self = Self(1633);
  pub const pL: Self = Self(1634);
  pub const pl: Self = Self(1635);
  pub const pM: Self = Self(1636);
  pub const pm: Self = Self(1637);
  pub const pN: Self = Self(1638);
  pub const pn: Self = Self(1639);
  pub const pO: Self = Self(1640);
  pub const po: Self = Self(1641);
  pub const pP: Self = Self(1642);
  pub const pp: Self = Self(1643);
  pub const pQ: Self = Self(1644);
  pub const pq: Self = Self(1645);
  pub const pR: Self = Self(1646);
  pub const pr: Self = Self(1647);
  pub const pS: Self = Self(1648);
  pub const ps: Self = Self(1649);
  pub const pT: Self = Self(1650);
  pub const pt: Self = Self(1651);
  pub const pU: Self = Self(1652);
  pub const pu: Self = Self(1653);
  pub const pV: Self = Self(1654);
  pub const pv: Self = Self(1655);
  pub const pW: Self = Self(1656);
  pub const pw: Self = Self(1657);
  pub const pX: Self = Self(1658);
  pub const px: Self = Self(1659);
  pub const pY: Self = Self(1660);
  pub const py: Self = Self(1661);
  pub const pZ: Self = Self(1662);
  pub const pz: Self = Self(1663);
  pub const QA: Self = Self(1664);
  pub const Qa: Self = Self(1665);
  pub const QB: Self = Self(1666);
  pub const Qb: Self = Self(1667);
  pub const QC: Self = Self(1668);
  pub const Qc: Self = Self(1669);
  pub const QD: Self = Self(1670);
  pub const Qd: Self = Self(1671);
  pub const QE: Self = Self(1672);
  pub const Qe: Self = Self(1673);
  pub const QF: Self = Self(1674);
  pub const Qf: Self = Self(1675);
  pub const QG: Self = Self(1676);
  pub const Qg: Self = Self(1677);
  pub const QH: Self = Self(1678);
  pub const Qh: Self = Self(1679);
  pub const QI: Self = Self(1680);
  pub const Qi: Self = Self(1681);
  pub const QJ: Self = Self(1682);
  pub const Qj: Self = Self(1683);
  pub const QK: Self = Self(1684);
  pub const Qk: Self = Self(1685);
  pub const QL: Self = Self(1686);
  pub const Ql: Self = Self(1687);
  pub const QM: Self = Self(1688);
  pub const Qm: Self = Self(1689);
  pub const QN: Self = Self(1690);
  pub const Qn: Self = Self(1691);
  pub const QO: Self = Self(1692);
  pub const Qo: Self = Self(1693);
  pub const QP: Self = Self(1694);
  pub const Qp: Self = Self(1695);
  pub const QQ: Self = Self(1696);
  pub const Qq: Self = Self(1697);
  pub const QR: Self = Self(1698);
  pub const Qr: Self = Self(1699);
  pub const QS: Self = Self(1700);
  pub const Qs: Self = Self(1701);
  pub const QT: Self = Self(1702);
  pub const Qt: Self = Self(1703);
  pub const QU: Self = Self(1704);
  pub const Qu: Self = Self(1705);
  pub const QV: Self = Self(1706);
  pub const Qv: Self = Self(1707);
  pub const QW: Self = Self(1708);
  pub const Qw: Self = Self(1709);
  pub const QX: Self = Self(1710);
  pub const Qx: Self = Self(1711);
  pub const QY: Self = Self(1712);
  pub const Qy: Self = Self(1713);
  pub const QZ: Self = Self(1714);
  pub const Qz: Self = Self(1715);
  pub const qA: Self = Self(1716);
  pub const qa: Self = Self(1717);
  pub const qB: Self = Self(1718);
  pub const qb: Self = Self(1719);
  pub const qC: Self = Self(1720);
  pub const qc: Self = Self(1721);
  pub const qD: Self = Self(1722);
  pub const qd: Self = Self(1723);
  pub const qE: Self = Self(1724);
  pub const qe: Self = Self(1725);
  pub const qF: Self = Self(1726);
  pub const qf: Self = Self(1727);
  pub const qG: Self = Self(1728);
  pub const qg: Self = Self(1729);
  pub const qH: Self = Self(1730);
  pub const qh: Self = Self(1731);
  pub const qI: Self = Self(1732);
  pub const qi: Self = Self(1733);
  pub const qJ: Self = Self(1734);
  pub const qj: Self = Self(1735);
  pub const qK: Self = Self(1736);
  pub const qk: Self = Self(1737);
  pub const qL: Self = Self(1738);
  pub const ql: Self = Self(1739);
  pub const qM: Self = Self(1740);
  pub const qm: Self = Self(1741);
  pub const qN: Self = Self(1742);
  pub const qn: Self = Self(1743);
  pub const qO: Self = Self(1744);
  pub const qo: Self = Self(1745);
  pub const qP: Self = Self(1746);
  pub const qp: Self = Self(1747);
  pub const qQ: Self = Self(1748);
  pub const qq: Self = Self(1749);
  pub const qR: Self = Self(1750);
  pub const qr: Self = Self(1751);
  pub const qS: Self = Self(1752);
  pub const qs: Self = Self(1753);
  pub const qT: Self = Self(1754);
  pub const qt: Self = Self(1755);
  pub const qU: Self = Self(1756);
  pub const qu: Self = Self(1757);
  pub const qV: Self = Self(1758);
  pub const qv: Self = Self(1759);
  pub const qW: Self = Self(1760);
  pub const qw: Self = Self(1761);
  pub const qX: Self = Self(1762);
  pub const qx: Self = Self(1763);
  pub const qY: Self = Self(1764);
  pub const qy: Self = Self(1765);
  pub const qZ: Self = Self(1766);
  pub const qz: Self = Self(1767);
  pub const RA: Self = Self(1768);
  pub const Ra: Self = Self(1769);
  pub const RB: Self = Self(1770);
  pub const Rb: Self = Self(1771);
  pub const RC: Self = Self(1772);
  pub const Rc: Self = Self(1773);
  pub const RD: Self = Self(1774);
  pub const Rd: Self = Self(1775);
  pub const RE: Self = Self(1776);
  pub const Re: Self = Self(1777);
  pub const RF: Self = Self(1778);
  pub const Rf: Self = Self(1779);
  pub const RG: Self = Self(1780);
  pub const Rg: Self = Self(1781);
  pub const RH: Self = Self(1782);
  pub const Rh: Self = Self(1783);
  pub const RI: Self = Self(1784);
  pub const Ri: Self = Self(1785);
  pub const RJ: Self = Self(1786);
  pub const Rj: Self = Self(1787);
  pub const RK: Self = Self(1788);
  pub const Rk: Self = Self(1789);
  pub const RL: Self = Self(1790);
  pub const Rl: Self = Self(1791);
  pub const RM: Self = Self(1792);
  pub const Rm: Self = Self(1793);
  pub const RN: Self = Self(1794);
  pub const Rn: Self = Self(1795);
  pub const RO: Self = Self(1796);
  pub const Ro: Self = Self(1797);
  pub const RP: Self = Self(1798);
  pub const Rp: Self = Self(1799);
  pub const RQ: Self = Self(1800);
  pub const Rq: Self = Self(1801);
  pub const RR: Self = Self(1802);
  pub const Rr: Self = Self(1803);
  pub const RS: Self = Self(1804);
  pub const Rs: Self = Self(1805);
  pub const RT: Self = Self(1806);
  pub const Rt: Self = Self(1807);
  pub const RU: Self = Self(1808);
  pub const Ru: Self = Self(1809);
  pub const RV: Self = Self(1810);
  pub const Rv: Self = Self(1811);
  pub const RW: Self = Self(1812);
  pub const Rw: Self = Self(1813);
  pub const RX: Self = Self(1814);
  pub const Rx: Self = Self(1815);
  pub const RY: Self = Self(1816);
  pub const Ry: Self = Self(1817);
  pub const RZ: Self = Self(1818);
  pub const Rz: Self = Self(1819);
  pub const rA: Self = Self(1820);
  pub const ra: Self = Self(1821);
  pub const rB: Self = Self(1822);
  pub const rb: Self = Self(1823);
  pub const rC: Self = Self(1824);
  pub const rc: Self = Self(1825);
  pub const rD: Self = Self(1826);
  pub const rd: Self = Self(1827);
  pub const rE: Self = Self(1828);
  pub const re: Self = Self(1829);
  pub const rF: Self = Self(1830);
  pub const rf: Self = Self(1831);
  pub const rG: Self = Self(1832);
  pub const rg: Self = Self(1833);
  pub const rH: Self = Self(1834);
  pub const rh: Self = Self(1835);
  pub const rI: Self = Self(1836);
  pub const ri: Self = Self(1837);
  pub const rJ: Self = Self(1838);
  pub const rj: Self = Self(1839);
  pub const rK: Self = Self(1840);
  pub const rk: Self = Self(1841);
  pub const rL: Self = Self(1842);
  pub const rl: Self = Self(1843);
  pub const rM: Self = Self(1844);
  pub const rm: Self = Self(1845);
  pub const rN: Self = Self(1846);
  pub const rn: Self = Self(1847);
  pub const rO: Self = Self(1848);
  pub const ro: Self = Self(1849);
  pub const rP: Self = Self(1850);
  pub const rp: Self = Self(1851);
  pub const rQ: Self = Self(1852);
  pub const rq: Self = Self(1853);
  pub const rR: Self = Self(1854);
  pub const rr: Self = Self(1855);
  pub const rS: Self = Self(1856);
  pub const rs: Self = Self(1857);
  pub const rT: Self = Self(1858);
  pub const rt: Self = Self(1859);
  pub const rU: Self = Self(1860);
  pub const ru: Self = Self(1861);
  pub const rV: Self = Self(1862);
  pub const rv: Self = Self(1863);
  pub const rW: Self = Self(1864);
  pub const rw: Self = Self(1865);
  pub const rX: Self = Self(1866);
  pub const rx: Self = Self(1867);
  pub const rY: Self = Self(1868);
  pub const ry: Self = Self(1869);
  pub const rZ: Self = Self(1870);
  pub const rz: Self = Self(1871);
  pub const SA: Self = Self(1872);
  pub const Sa: Self = Self(1873);
  pub const SB: Self = Self(1874);
  pub const Sb: Self = Self(1875);
  pub const SC: Self = Self(1876);
  pub const Sc: Self = Self(1877);
  pub const SD: Self = Self(1878);
  pub const Sd: Self = Self(1879);
  pub const SE: Self = Self(1880);
  pub const Se: Self = Self(1881);
  pub const SF: Self = Self(1882);
  pub const Sf: Self = Self(1883);
  pub const SG: Self = Self(1884);
  pub const Sg: Self = Self(1885);
  pub const SH: Self = Self(1886);
  pub const Sh: Self = Self(1887);
  pub const SI: Self = Self(1888);
  pub const Si: Self = Self(1889);
  pub const SJ: Self = Self(1890);
  pub const Sj: Self = Self(1891);
  pub const SK: Self = Self(1892);
  pub const Sk: Self = Self(1893);
  pub const SL: Self = Self(1894);
  pub const Sl: Self = Self(1895);
  pub const SM: Self = Self(1896);
  pub const Sm: Self = Self(1897);
  pub const SN: Self = Self(1898);
  pub const Sn: Self = Self(1899);
  pub const SO: Self = Self(1900);
  pub const So: Self = Self(1901);
  pub const SP: Self = Self(1902);
  pub const Sp: Self = Self(1903);
  pub const SQ: Self = Self(1904);
  pub const Sq: Self = Self(1905);
  pub const SR: Self = Self(1906);
  pub const Sr: Self = Self(1907);
  pub const SS: Self = Self(1908);
  pub const Ss: Self = Self(1909);
  pub const ST: Self = Self(1910);
  pub const St: Self = Self(1911);
  pub const SU: Self = Self(1912);
  pub const Su: Self = Self(1913);
  pub const SV: Self = Self(1914);
  pub const Sv: Self = Self(1915);
  pub const SW: Self = Self(1916);
  pub const Sw: Self = Self(1917);
  pub const SX: Self = Self(1918);
  pub const Sx: Self = Self(1919);
  pub const SY: Self = Self(1920);
  pub const Sy: Self = Self(1921);
  pub const SZ: Self = Self(1922);
  pub const Sz: Self = Self(1923);
  pub const sA: Self = Self(1924);
  pub const sa: Self = Self(1925);
  pub const sB: Self = Self(1926);
  pub const sb: Self = Self(1927);
  pub const sC: Self = Self(1928);
  pub const sc: Self = Self(1929);
  pub const sD: Self = Self(1930);
  pub const sd: Self = Self(1931);
  pub const sE: Self = Self(1932);
  pub const se: Self = Self(1933);
  pub const sF: Self = Self(1934);
  pub const sf: Self = Self(1935);
  pub const sG: Self = Self(1936);
  pub const sg: Self = Self(1937);
  pub const sH: Self = Self(1938);
  pub const sh: Self = Self(1939);
  pub const sI: Self = Self(1940);
  pub const si: Self = Self(1941);
  pub const sJ: Self = Self(1942);
  pub const sj: Self = Self(1943);
  pub const sK: Self = Self(1944);
  pub const sk: Self = Self(1945);
  pub const sL: Self = Self(1946);
  pub const sl: Self = Self(1947);
  pub const sM: Self = Self(1948);
  pub const sm: Self = Self(1949);
  pub const sN: Self = Self(1950);
  pub const sn: Self = Self(1951);
  pub const sO: Self = Self(1952);
  pub const so: Self = Self(1953);
  pub const sP: Self = Self(1954);
  pub const sp: Self = Self(1955);
  pub const sQ: Self = Self(1956);
  pub const sq: Self = Self(1957);
  pub const sR: Self = Self(1958);
  pub const sr: Self = Self(1959);
  pub const sS: Self = Self(1960);
  pub const ss: Self = Self(1961);
  pub const sT: Self = Self(1962);
  pub const st: Self = Self(1963);
  pub const sU: Self = Self(1964);
  pub const su: Self = Self(1965);
  pub const sV: Self = Self(1966);
  pub const sv: Self = Self(1967);
  pub const sW: Self = Self(1968);
  pub const sw: Self = Self(1969);
  pub const sX: Self = Self(1970);
  pub const sx: Self = Self(1971);
  pub const sY: Self = Self(1972);
  pub const sy: Self = Self(1973);
  pub const sZ: Self = Self(1974);
  pub const sz: Self = Self(1975);
  pub const TA: Self = Self(1976);
  pub const Ta: Self = Self(1977);
  pub const TB: Self = Self(1978);
  pub const Tb: Self = Self(1979);
  pub const TC: Self = Self(1980);
  pub const Tc: Self = Self(1981);
  pub const TD: Self = Self(1982);
  pub const Td: Self = Self(1983);
  pub const TE: Self = Self(1984);
  pub const Te: Self = Self(1985);
  pub const TF: Self = Self(1986);
  pub const Tf: Self = Self(1987);
  pub const TG: Self = Self(1988);
  pub const Tg: Self = Self(1989);
  pub const TH: Self = Self(1990);
  pub const Th: Self = Self(1991);
  pub const TI: Self = Self(1992);
  pub const Ti: Self = Self(1993);
  pub const TJ: Self = Self(1994);
  pub const Tj: Self = Self(1995);
  pub const TK: Self = Self(1996);
  pub const Tk: Self = Self(1997);
  pub const TL: Self = Self(1998);
  pub const Tl: Self = Self(1999);
  pub const TM: Self = Self(2000);
  pub const Tm: Self = Self(2001);
  pub const TN: Self = Self(2002);
  pub const Tn: Self = Self(2003);
  pub const TO: Self = Self(2004);
  pub const To: Self = Self(2005);
  pub const TP: Self = Self(2006);
  pub const Tp: Self = Self(2007);
  pub const TQ: Self = Self(2008);
  pub const Tq: Self = Self(2009);
  pub const TR: Self = Self(2010);
  pub const Tr: Self = Self(2011);
  pub const TS: Self = Self(2012);
  pub const Ts: Self = Self(2013);
  pub const TT: Self = Self(2014);
  pub const Tt: Self = Self(2015);
  pub const TU: Self = Self(2016);
  pub const Tu: Self = Self(2017);
  pub const TV: Self = Self(2018);
  pub const Tv: Self = Self(2019);
  pub const TW: Self = Self(2020);
  pub const Tw: Self = Self(2021);
  pub const TX: Self = Self(2022);
  pub const Tx: Self = Self(2023);
  pub const TY: Self = Self(2024);
  pub const Ty: Self = Self(2025);
  pub const TZ: Self = Self(2026);
  pub const Tz: Self = Self(2027);
  pub const tA: Self = Self(2028);
  pub const ta: Self = Self(2029);
  pub const tB: Self = Self(2030);
  pub const tb: Self = Self(2031);
  pub const tC: Self = Self(2032);
  pub const tc: Self = Self(2033);
  pub const tD: Self = Self(2034);
  pub const td: Self = Self(2035);
  pub const tE: Self = Self(2036);
  pub const te: Self = Self(2037);
  pub const tF: Self = Self(2038);
  pub const tf: Self = Self(2039);
  pub const tG: Self = Self(2040);
  pub const tg: Self = Self(2041);
  pub const tH: Self = Self(2042);
  pub const th: Self = Self(2043);
  pub const tI: Self = Self(2044);
  pub const ti: Self = Self(2045);
  pub const tJ: Self = Self(2046);
  pub const tj: Self = Self(2047);
  pub const tK: Self = Self(2048);
  pub const tk: Self = Self(2049);
  pub const tL: Self = Self(2050);
  pub const tl: Self = Self(2051);
  pub const tM: Self = Self(2052);
  pub const tm: Self = Self(2053);
  pub const tN: Self = Self(2054);
  pub const tn: Self = Self(2055);
  pub const tO: Self = Self(2056);
  pub const to: Self = Self(2057);
  pub const tP: Self = Self(2058);
  pub const tp: Self = Self(2059);
  pub const tQ: Self = Self(2060);
  pub const tq: Self = Self(2061);
  pub const tR: Self = Self(2062);
  pub const tr: Self = Self(2063);
  pub const tS: Self = Self(2064);
  pub const ts: Self = Self(2065);
  pub const tT: Self = Self(2066);
  pub const tt: Self = Self(2067);
  pub const tU: Self = Self(2068);
  pub const tu: Self = Self(2069);
  pub const tV: Self = Self(2070);
  pub const tv: Self = Self(2071);
  pub const tW: Self = Self(2072);
  pub const tw: Self = Self(2073);
  pub const tX: Self = Self(2074);
  pub const tx: Self = Self(2075);
  pub const tY: Self = Self(2076);
  pub const ty: Self = Self(2077);
  pub const tZ: Self = Self(2078);
  pub const tz: Self = Self(2079);
  pub const UA: Self = Self(2080);
  pub const Ua: Self = Self(2081);
  pub const UB: Self = Self(2082);
  pub const Ub: Self = Self(2083);
  pub const UC: Self = Self(2084);
  pub const Uc: Self = Self(2085);
  pub const UD: Self = Self(2086);
  pub const Ud: Self = Self(2087);
  pub const UE: Self = Self(2088);
  pub const Ue: Self = Self(2089);
  pub const UF: Self = Self(2090);
  pub const Uf: Self = Self(2091);
  pub const UG: Self = Self(2092);
  pub const Ug: Self = Self(2093);
  pub const UH: Self = Self(2094);
  pub const Uh: Self = Self(2095);
  pub const UI: Self = Self(2096);
  pub const Ui: Self = Self(2097);
  pub const UJ: Self = Self(2098);
  pub const Uj: Self = Self(2099);
  pub const UK: Self = Self(2100);
  pub const Uk: Self = Self(2101);
  pub const UL: Self = Self(2102);
  pub const Ul: Self = Self(2103);
  pub const UM: Self = Self(2104);
  pub const Um: Self = Self(2105);
  pub const UN: Self = Self(2106);
  pub const Un: Self = Self(2107);
  pub const UO: Self = Self(2108);
  pub const Uo: Self = Self(2109);
  pub const UP: Self = Self(2110);
  pub const Up: Self = Self(2111);
  pub const UQ: Self = Self(2112);
  pub const Uq: Self = Self(2113);
  pub const UR: Self = Self(2114);
  pub const Ur: Self = Self(2115);
  pub const US: Self = Self(2116);
  pub const Us: Self = Self(2117);
  pub const UT: Self = Self(2118);
  pub const Ut: Self = Self(2119);
  pub const UU: Self = Self(2120);
  pub const Uu: Self = Self(2121);
  pub const UV: Self = Self(2122);
  pub const Uv: Self = Self(2123);
  pub const UW: Self = Self(2124);
  pub const Uw: Self = Self(2125);
  pub const UX: Self = Self(2126);
  pub const Ux: Self = Self(2127);
  pub const UY: Self = Self(2128);
  pub const Uy: Self = Self(2129);
  pub const UZ: Self = Self(2130);
  pub const Uz: Self = Self(2131);
  pub const uA: Self = Self(2132);
  pub const ua: Self = Self(2133);
  pub const uB: Self = Self(2134);
  pub const ub: Self = Self(2135);
  pub const uC: Self = Self(2136);
  pub const uc: Self = Self(2137);
  pub const uD: Self = Self(2138);
  pub const ud: Self = Self(2139);
  pub const uE: Self = Self(2140);
  pub const ue: Self = Self(2141);
  pub const uF: Self = Self(2142);
  pub const uf: Self = Self(2143);
  pub const uG: Self = Self(2144);
  pub const ug: Self = Self(2145);
  pub const uH: Self = Self(2146);
  pub const uh: Self = Self(2147);
  pub const uI: Self = Self(2148);
  pub const ui: Self = Self(2149);
  pub const uJ: Self = Self(2150);
  pub const uj: Self = Self(2151);
  pub const uK: Self = Self(2152);
  pub const uk: Self = Self(2153);
  pub const uL: Self = Self(2154);
  pub const ul: Self = Self(2155);
  pub const uM: Self = Self(2156);
  pub const um: Self = Self(2157);
  pub const uN: Self = Self(2158);
  pub const un: Self = Self(2159);
  pub const uO: Self = Self(2160);
  pub const uo: Self = Self(2161);
  pub const uP: Self = Self(2162);
  pub const up: Self = Self(2163);
  pub const uQ: Self = Self(2164);
  pub const uq: Self = Self(2165);
  pub const uR: Self = Self(2166);
  pub const ur: Self = Self(2167);
  pub const uS: Self = Self(2168);
  pub const us: Self = Self(2169);
  pub const uT: Self = Self(2170);
  pub const ut: Self = Self(2171);
  pub const uU: Self = Self(2172);
  pub const uu: Self = Self(2173);
  pub const uV: Self = Self(2174);
  pub const uv: Self = Self(2175);
  pub const uW: Self = Self(2176);
  pub const uw: Self = Self(2177);
  pub const uX: Self = Self(2178);
  pub const ux: Self = Self(2179);
  pub const uY: Self = Self(2180);
  pub const uy: Self = Self(2181);
  pub const uZ: Self = Self(2182);
  pub const uz: Self = Self(2183);
  pub const VA: Self = Self(2184);
  pub const Va: Self = Self(2185);
  pub const VB: Self = Self(2186);
  pub const Vb: Self = Self(2187);
  pub const VC: Self = Self(2188);
  pub const Vc: Self = Self(2189);
  pub const VD: Self = Self(2190);
  pub const Vd: Self = Self(2191);
  pub const VE: Self = Self(2192);
  pub const Ve: Self = Self(2193);
  pub const VF: Self = Self(2194);
  pub const Vf: Self = Self(2195);
  pub const VG: Self = Self(2196);
  pub const Vg: Self = Self(2197);
  pub const VH: Self = Self(2198);
  pub const Vh: Self = Self(2199);
  pub const VI: Self = Self(2200);
  pub const Vi: Self = Self(2201);
  pub const VJ: Self = Self(2202);
  pub const Vj: Self = Self(2203);
  pub const VK: Self = Self(2204);
  pub const Vk: Self = Self(2205);
  pub const VL: Self = Self(2206);
  pub const Vl: Self = Self(2207);
  pub const VM: Self = Self(2208);
  pub const Vm: Self = Self(2209);
  pub const VN: Self = Self(2210);
  pub const Vn: Self = Self(2211);
  pub const VO: Self = Self(2212);
  pub const Vo: Self = Self(2213);
  pub const VP: Self = Self(2214);
  pub const Vp: Self = Self(2215);
  pub const VQ: Self = Self(2216);
  pub const Vq: Self = Self(2217);
  pub const VR: Self = Self(2218);
  pub const Vr: Self = Self(2219);
  pub const VS: Self = Self(2220);
  pub const Vs: Self = Self(2221);
  pub const VT: Self = Self(2222);
  pub const Vt: Self = Self(2223);
  pub const VU: Self = Self(2224);
  pub const Vu: Self = Self(2225);
  pub const VV: Self = Self(2226);
  pub const Vv: Self = Self(2227);
  pub const VW: Self = Self(2228);
  pub const Vw: Self = Self(2229);
  pub const VX: Self = Self(2230);
  pub const Vx: Self = Self(2231);
  pub const VY: Self = Self(2232);
  pub const Vy: Self = Self(2233);
  pub const VZ: Self = Self(2234);
  pub const Vz: Self = Self(2235);
  pub const vA: Self = Self(2236);
  pub const va: Self = Self(2237);
  pub const vB: Self = Self(2238);
  pub const vb: Self = Self(2239);
  pub const vC: Self = Self(2240);
  pub const vc: Self = Self(2241);
  pub const vD: Self = Self(2242);
  pub const vd: Self = Self(2243);
  pub const vE: Self = Self(2244);
  pub const ve: Self = Self(2245);
  pub const vF: Self = Self(2246);
  pub const vf: Self = Self(2247);
  pub const vG: Self = Self(2248);
  pub const vg: Self = Self(2249);
  pub const vH: Self = Self(2250);
  pub const vh: Self = Self(2251);
  pub const vI: Self = Self(2252);
  pub const vi: Self = Self(2253);
  pub const vJ: Self = Self(2254);
  pub const vj: Self = Self(2255);
  pub const vK: Self = Self(2256);
  pub const vk: Self = Self(2257);
  pub const vL: Self = Self(2258);
  pub const vl: Self = Self(2259);
  pub const vM: Self = Self(2260);
  pub const vm: Self = Self(2261);
  pub const vN: Self = Self(2262);
  pub const vn: Self = Self(2263);
  pub const vO: Self = Self(2264);
  pub const vo: Self = Self(2265);
  pub const vP: Self = Self(2266);
  pub const vp: Self = Self(2267);
  pub const vQ: Self = Self(2268);
  pub const vq: Self = Self(2269);
  pub const vR: Self = Self(2270);
  pub const vr: Self = Self(2271);
  pub const vS: Self = Self(2272);
  pub const vs: Self = Self(2273);
  pub const vT: Self = Self(2274);
  pub const vt: Self = Self(2275);
  pub const vU: Self = Self(2276);
  pub const vu: Self = Self(2277);
  pub const vV: Self = Self(2278);
  pub const vv: Self = Self(2279);
  pub const vW: Self = Self(2280);
  pub const vw: Self = Self(2281);
  pub const vX: Self = Self(2282);
  pub const vx: Self = Self(2283);
  pub const vY: Self = Self(2284);
  pub const vy: Self = Self(2285);
  pub const vZ: Self = Self(2286);
  pub const vz: Self = Self(2287);
  pub const WA: Self = Self(2288);
  pub const Wa: Self = Self(2289);
  pub const WB: Self = Self(2290);
  pub const Wb: Self = Self(2291);
  pub const WC: Self = Self(2292);
  pub const Wc: Self = Self(2293);
  pub const WD: Self = Self(2294);
  pub const Wd: Self = Self(2295);
  pub const WE: Self = Self(2296);
  pub const We: Self = Self(2297);
  pub const WF: Self = Self(2298);
  pub const Wf: Self = Self(2299);
  pub const WG: Self = Self(2300);
  pub const Wg: Self = Self(2301);
  pub const WH: Self = Self(2302);
  pub const Wh: Self = Self(2303);
  pub const WI: Self = Self(2304);
  pub const Wi: Self = Self(2305);
  pub const WJ: Self = Self(2306);
  pub const Wj: Self = Self(2307);
  pub const WK: Self = Self(2308);
  pub const Wk: Self = Self(2309);
  pub const WL: Self = Self(2310);
  pub const Wl: Self = Self(2311);
  pub const WM: Self = Self(2312);
  pub const Wm: Self = Self(2313);
  pub const WN: Self = Self(2314);
  pub const Wn: Self = Self(2315);
  pub const WO: Self = Self(2316);
  pub const Wo: Self = Self(2317);
  pub const WP: Self = Self(2318);
  pub const Wp: Self = Self(2319);
  pub const WQ: Self = Self(2320);
  pub const Wq: Self = Self(2321);
  pub const WR: Self = Self(2322);
  pub const Wr: Self = Self(2323);
  pub const WS: Self = Self(2324);
  pub const Ws: Self = Self(2325);
  pub const WT: Self = Self(2326);
  pub const Wt: Self = Self(2327);
  pub const WU: Self = Self(2328);
  pub const Wu: Self = Self(2329);
  pub const WV: Self = Self(2330);
  pub const Wv: Self = Self(2331);
  pub const WW: Self = Self(2332);
  pub const Ww: Self = Self(2333);
  pub const WX: Self = Self(2334);
  pub const Wx: Self = Self(2335);
  pub const WY: Self = Self(2336);
  pub const Wy: Self = Self(2337);
  pub const WZ: Self = Self(2338);
  pub const Wz: Self = Self(2339);
  pub const wA: Self = Self(2340);
  pub const wa: Self = Self(2341);
  pub const wB: Self = Self(2342);
  pub const wb: Self = Self(2343);
  pub const wC: Self = Self(2344);
  pub const wc: Self = Self(2345);
  pub const wD: Self = Self(2346);
  pub const wd: Self = Self(2347);
  pub const wE: Self = Self(2348);
  pub const we: Self = Self(2349);
  pub const wF: Self = Self(2350);
  pub const wf: Self = Self(2351);
  pub const wG: Self = Self(2352);
  pub const wg: Self = Self(2353);
  pub const wH: Self = Self(2354);
  pub const wh: Self = Self(2355);
  pub const wI: Self = Self(2356);
  pub const wi: Self = Self(2357);
  pub const wJ: Self = Self(2358);
  pub const wj: Self = Self(2359);
  pub const wK: Self = Self(2360);
  pub const wk: Self = Self(2361);
  pub const wL: Self = Self(2362);
  pub const wl: Self = Self(2363);
  pub const wM: Self = Self(2364);
  pub const wm: Self = Self(2365);
  pub const wN: Self = Self(2366);
  pub const wn: Self = Self(2367);
  pub const wO: Self = Self(2368);
  pub const wo: Self = Self(2369);
  pub const wP: Self = Self(2370);
  pub const wp: Self = Self(2371);
  pub const wQ: Self = Self(2372);
  pub const wq: Self = Self(2373);
  pub const wR: Self = Self(2374);
  pub const wr: Self = Self(2375);
  pub const wS: Self = Self(2376);
  pub const ws: Self = Self(2377);
  pub const wT: Self = Self(2378);
  pub const wt: Self = Self(2379);
  pub const wU: Self = Self(2380);
  pub const wu: Self = Self(2381);
  pub const wV: Self = Self(2382);
  pub const wv: Self = Self(2383);
  pub const wW: Self = Self(2384);
  pub const ww: Self = Self(2385);
  pub const wX: Self = Self(2386);
  pub const wx: Self = Self(2387);
  pub const wY: Self = Self(2388);
  pub const wy: Self = Self(2389);
  pub const wZ: Self = Self(2390);
  pub const wz: Self = Self(2391);
  pub const XA: Self = Self(2392);
  pub const Xa: Self = Self(2393);
  pub const XB: Self = Self(2394);
  pub const Xb: Self = Self(2395);
  pub const XC: Self = Self(2396);
  pub const Xc: Self = Self(2397);
  pub const XD: Self = Self(2398);
  pub const Xd: Self = Self(2399);
  pub const XE: Self = Self(2400);
  pub const Xe: Self = Self(2401);
  pub const XF: Self = Self(2402);
  pub const Xf: Self = Self(2403);
  pub const XG: Self = Self(2404);
  pub const Xg: Self = Self(2405);
  pub const XH: Self = Self(2406);
  pub const Xh: Self = Self(2407);
  pub const XI: Self = Self(2408);
  pub const Xi: Self = Self(2409);
  pub const XJ: Self = Self(2410);
  pub const Xj: Self = Self(2411);
  pub const XK: Self = Self(2412);
  pub const Xk: Self = Self(2413);
  pub const XL: Self = Self(2414);
  pub const Xl: Self = Self(2415);
  pub const XM: Self = Self(2416);
  pub const Xm: Self = Self(2417);
  pub const XN: Self = Self(2418);
  pub const Xn: Self = Self(2419);
  pub const XO: Self = Self(2420);
  pub const Xo: Self = Self(2421);
  pub const XP: Self = Self(2422);
  pub const Xp: Self = Self(2423);
  pub const XQ: Self = Self(2424);
  pub const Xq: Self = Self(2425);
  pub const XR: Self = Self(2426);
  pub const Xr: Self = Self(2427);
  pub const XS: Self = Self(2428);
  pub const Xs: Self = Self(2429);
  pub const XT: Self = Self(2430);
  pub const Xt: Self = Self(2431);
  pub const XU: Self = Self(2432);
  pub const Xu: Self = Self(2433);
  pub const XV: Self = Self(2434);
  pub const Xv: Self = Self(2435);
  pub const XW: Self = Self(2436);
  pub const Xw: Self = Self(2437);
  pub const XX: Self = Self(2438);
  pub const Xx: Self = Self(2439);
  pub const XY: Self = Self(2440);
  pub const Xy: Self = Self(2441);
  pub const XZ: Self = Self(2442);
  pub const Xz: Self = Self(2443);
  pub const xA: Self = Self(2444);
  pub const xa: Self = Self(2445);
  pub const xB: Self = Self(2446);
  pub const xb: Self = Self(2447);
  pub const xC: Self = Self(2448);
  pub const xc: Self = Self(2449);
  pub const xD: Self = Self(2450);
  pub const xd: Self = Self(2451);
  pub const xE: Self = Self(2452);
  pub const xe: Self = Self(2453);
  pub const xF: Self = Self(2454);
  pub const xf: Self = Self(2455);
  pub const xG: Self = Self(2456);
  pub const xg: Self = Self(2457);
  pub const xH: Self = Self(2458);
  pub const xh: Self = Self(2459);
  pub const xI: Self = Self(2460);
  pub const xi: Self = Self(2461);
  pub const xJ: Self = Self(2462);
  pub const xj: Self = Self(2463);
  pub const xK: Self = Self(2464);
  pub const xk: Self = Self(2465);
  pub const xL: Self = Self(2466);
  pub const xl: Self = Self(2467);
  pub const xM: Self = Self(2468);
  pub const xm: Self = Self(2469);
  pub const xN: Self = Self(2470);
  pub const xn: Self = Self(2471);
  pub const xO: Self = Self(2472);
  pub const xo: Self = Self(2473);
  pub const xP: Self = Self(2474);
  pub const xp: Self = Self(2475);
  pub const xQ: Self = Self(2476);
  pub const xq: Self = Self(2477);
  pub const xR: Self = Self(2478);
  pub const xr: Self = Self(2479);
  pub const xS: Self = Self(2480);
  pub const xs: Self = Self(2481);
  pub const xT: Self = Self(2482);
  pub const xt: Self = Self(2483);
  pub const xU: Self = Self(2484);
  pub const xu: Self = Self(2485);
  pub const xV: Self = Self(2486);
  pub const xv: Self = Self(2487);
  pub const xW: Self = Self(2488);
  pub const xw: Self = Self(2489);
  pub const xX: Self = Self(2490);
  pub const xx: Self = Self(2491);
  pub const xY: Self = Self(2492);
  pub const xy: Self = Self(2493);
  pub const xZ: Self = Self(2494);
  pub const xz: Self = Self(2495);
  pub const YA: Self = Self(2496);
  pub const Ya: Self = Self(2497);
  pub const YB: Self = Self(2498);
  pub const Yb: Self = Self(2499);
  pub const YC: Self = Self(2500);
  pub const Yc: Self = Self(2501);
  pub const YD: Self = Self(2502);
  pub const Yd: Self = Self(2503);
  pub const YE: Self = Self(2504);
  pub const Ye: Self = Self(2505);
  pub const YF: Self = Self(2506);
  pub const Yf: Self = Self(2507);
  pub const YG: Self = Self(2508);
  pub const Yg: Self = Self(2509);
  pub const YH: Self = Self(2510);
  pub const Yh: Self = Self(2511);
  pub const YI: Self = Self(2512);
  pub const Yi: Self = Self(2513);
  pub const YJ: Self = Self(2514);
  pub const Yj: Self = Self(2515);
  pub const YK: Self = Self(2516);
  pub const Yk: Self = Self(2517);
  pub const YL: Self = Self(2518);
  pub const Yl: Self = Self(2519);
  pub const YM: Self = Self(2520);
  pub const Ym: Self = Self(2521);
  pub const YN: Self = Self(2522);
  pub const Yn: Self = Self(2523);
  pub const YO: Self = Self(2524);
  pub const Yo: Self = Self(2525);
  pub const YP: Self = Self(2526);
  pub const Yp: Self = Self(2527);
  pub const YQ: Self = Self(2528);
  pub const Yq: Self = Self(2529);
  pub const YR: Self = Self(2530);
  pub const Yr: Self = Self(2531);
  pub const YS: Self = Self(2532);
  pub const Ys: Self = Self(2533);
  pub const YT: Self = Self(2534);
  pub const Yt: Self = Self(2535);
  pub const YU: Self = Self(2536);
  pub const Yu: Self = Self(2537);
  pub const YV: Self = Self(2538);
  pub const Yv: Self = Self(2539);
  pub const YW: Self = Self(2540);
  pub const Yw: Self = Self(2541);
  pub const YX: Self = Self(2542);
  pub const Yx: Self = Self(2543);
  pub const YY: Self = Self(2544);
  pub const Yy: Self = Self(2545);
  pub const YZ: Self = Self(2546);
  pub const Yz: Self = Self(2547);
  pub const yA: Self = Self(2548);
  pub const ya: Self = Self(2549);
  pub const yB: Self = Self(2550);
  pub const yb: Self = Self(2551);
  pub const yC: Self = Self(2552);
  pub const yc: Self = Self(2553);
  pub const yD: Self = Self(2554);
  pub const yd: Self = Self(2555);
  pub const yE: Self = Self(2556);
  pub const ye: Self = Self(2557);
  pub const yF: Self = Self(2558);
  pub const yf: Self = Self(2559);
  pub const yG: Self = Self(2560);
  pub const yg: Self = Self(2561);
  pub const yH: Self = Self(2562);
  pub const yh: Self = Self(2563);
  pub const yI: Self = Self(2564);
  pub const yi: Self = Self(2565);
  pub const yJ: Self = Self(2566);
  pub const yj: Self = Self(2567);
  pub const yK: Self = Self(2568);
  pub const yk: Self = Self(2569);
  pub const yL: Self = Self(2570);
  pub const yl: Self = Self(2571);
  pub const yM: Self = Self(2572);
  pub const ym: Self = Self(2573);
  pub const yN: Self = Self(2574);
  pub const yn: Self = Self(2575);
  pub const yO: Self = Self(2576);
  pub const yo: Self = Self(2577);
  pub const yP: Self = Self(2578);
  pub const yp: Self = Self(2579);
  pub const yQ: Self = Self(2580);
  pub const yq: Self = Self(2581);
  pub const yR: Self = Self(2582);
  pub const yr: Self = Self(2583);
  pub const yS: Self = Self(2584);
  pub const ys: Self = Self(2585);
  pub const yT: Self = Self(2586);
  pub const yt: Self = Self(2587);
  pub const yU: Self = Self(2588);
  pub const yu: Self = Self(2589);
  pub const yV: Self = Self(2590);
  pub const yv: Self = Self(2591);
  pub const yW: Self = Self(2592);
  pub const yw: Self = Self(2593);
  pub const yX: Self = Self(2594);
  pub const yx: Self = Self(2595);
  pub const yY: Self = Self(2596);
  pub const yy: Self = Self(2597);
  pub const yZ: Self = Self(2598);
  pub const yz: Self = Self(2599);
  pub const ZA: Self = Self(2600);
  pub const Za: Self = Self(2601);
  pub const ZB: Self = Self(2602);
  pub const Zb: Self = Self(2603);
  pub const ZC: Self = Self(2604);
  pub const Zc: Self = Self(2605);
  pub const ZD: Self = Self(2606);
  pub const Zd: Self = Self(2607);
  pub const ZE: Self = Self(2608);
  pub const Ze: Self = Self(2609);
  pub const ZF: Self = Self(2610);
  pub const Zf: Self = Self(2611);
  pub const ZG: Self = Self(2612);
  pub const Zg: Self = Self(2613);
  pub const ZH: Self = Self(2614);
  pub const Zh: Self = Self(2615);
  pub const ZI: Self = Self(2616);
  pub const Zi: Self = Self(2617);
  pub const ZJ: Self = Self(2618);
  pub const Zj: Self = Self(2619);
  pub const ZK: Self = Self(2620);
  pub const Zk: Self = Self(2621);
  pub const ZL: Self = Self(2622);
  pub const Zl: Self = Self(2623);
  pub const ZM: Self = Self(2624);
  pub const Zm: Self = Self(2625);
  pub const ZN: Self = Self(2626);
  pub const Zn: Self = Self(2627);
  pub const ZO: Self = Self(2628);
  pub const Zo: Self = Self(2629);
  pub const ZP: Self = Self(2630);
  pub const Zp: Self = Self(2631);
  pub const ZQ: Self = Self(2632);
  pub const Zq: Self = Self(2633);
  pub const ZR: Self = Self(2634);
  pub const Zr: Self = Self(2635);
  pub const ZS: Self = Self(2636);
  pub const Zs: Self = Self(2637);
  pub const ZT: Self = Self(2638);
  pub const Zt: Self = Self(2639);
  pub const ZU: Self = Self(2640);
  pub const Zu: Self = Self(2641);
  pub const ZV: Self = Self(2642);
  pub const Zv: Self = Self(2643);
  pub const ZW: Self = Self(2644);
  pub const Zw: Self = Self(2645);
  pub const ZX: Self = Self(2646);
  pub const Zx: Self = Self(2647);
  pub const ZY: Self = Self(2648);
  pub const Zy: Self = Self(2649);
  pub const ZZ: Self = Self(2650);
  pub const Zz: Self = Self(2651);
  pub const zA: Self = Self(2652);
  pub const za: Self = Self(2653);
  pub const zB: Self = Self(2654);
  pub const zb: Self = Self(2655);
  pub const zC: Self = Self(2656);
  pub const zc: Self = Self(2657);
  pub const zD: Self = Self(2658);
  pub const zd: Self = Self(2659);
  pub const zE: Self = Self(2660);
  pub const ze: Self = Self(2661);
  pub const zF: Self = Self(2662);
  pub const zf: Self = Self(2663);
  pub const zG: Self = Self(2664);
  pub const zg: Self = Self(2665);
  pub const zH: Self = Self(2666);
  pub const zh: Self = Self(2667);
  pub const zI: Self = Self(2668);
  pub const zi: Self = Self(2669);
  pub const zJ: Self = Self(2670);
  pub const zj: Self = Self(2671);
  pub const zK: Self = Self(2672);
  pub const zk: Self = Self(2673);
  pub const zL: Self = Self(2674);
  pub const zl: Self = Self(2675);
  pub const zM: Self = Self(2676);
  pub const zm: Self = Self(2677);
  pub const zN: Self = Self(2678);
  pub const zn: Self = Self(2679);
  pub const zO: Self = Self(2680);
  pub const zo: Self = Self(2681);
  pub const zP: Self = Self(2682);
  pub const zp: Self = Self(2683);
  pub const zQ: Self = Self(2684);
  pub const zq: Self = Self(2685);
  pub const zR: Self = Self(2686);
  pub const zr: Self = Self(2687);
  pub const zS: Self = Self(2688);
  pub const zs: Self = Self(2689);
  pub const zT: Self = Self(2690);
  pub const zt: Self = Self(2691);
  pub const zU: Self = Self(2692);
  pub const zu: Self = Self(2693);
  pub const zV: Self = Self(2694);
  pub const zv: Self = Self(2695);
  pub const zW: Self = Self(2696);
  pub const zw: Self = Self(2697);
  pub const zX: Self = Self(2698);
  pub const zx: Self = Self(2699);
  pub const zY: Self = Self(2700);
  pub const zy: Self = Self(2701);
  pub const zZ: Self = Self(2702);
  pub const zz: Self = Self(2703);
  pub const aAA: Self = Self(2704);
  pub const aAa: Self = Self(2705);
  pub const aAB: Self = Self(2706);
  pub const aAb: Self = Self(2707);
  pub const aAC: Self = Self(2708);
  pub const aAc: Self = Self(2709);
  pub const aAD: Self = Self(2710);
  pub const aAd: Self = Self(2711);
  pub const aAE: Self = Self(2712);
  pub const aAe: Self = Self(2713);
  pub const aAF: Self = Self(2714);
  pub const aAf: Self = Self(2715);
  pub const aAG: Self = Self(2716);
  pub const aAg: Self = Self(2717);
  pub const aAH: Self = Self(2718);
  pub const aAh: Self = Self(2719);
  pub const aAI: Self = Self(2720);
  pub const aAi: Self = Self(2721);
  pub const aAJ: Self = Self(2722);
  pub const aAj: Self = Self(2723);
  pub const aAK: Self = Self(2724);
  pub const aAk: Self = Self(2725);
  pub const aAL: Self = Self(2726);
  pub const aAl: Self = Self(2727);
  pub const aAM: Self = Self(2728);
  pub const aAm: Self = Self(2729);
  pub const aAN: Self = Self(2730);
  pub const aAn: Self = Self(2731);
  pub const aAO: Self = Self(2732);
  pub const aAo: Self = Self(2733);
  pub const aAP: Self = Self(2734);
  pub const aAp: Self = Self(2735);
  pub const aAQ: Self = Self(2736);
  pub const aAq: Self = Self(2737);
  pub const aAR: Self = Self(2738);
  pub const aAr: Self = Self(2739);
  pub const aAS: Self = Self(2740);
  pub const aAs: Self = Self(2741);
  pub const aAT: Self = Self(2742);
  pub const aAt: Self = Self(2743);
  pub const aAU: Self = Self(2744);
  pub const aAu: Self = Self(2745);
  pub const aAV: Self = Self(2746);
  pub const aAv: Self = Self(2747);
  pub const aAW: Self = Self(2748);
  pub const aAw: Self = Self(2749);
  pub const aAX: Self = Self(2750);
  pub const aAx: Self = Self(2751);
  pub const aAY: Self = Self(2752);
  pub const aAy: Self = Self(2753);
  pub const aAZ: Self = Self(2754);
  pub const aAz: Self = Self(2755);
  pub const aaA: Self = Self(2756);
  pub const aaa: Self = Self(2757);
  pub const aaB: Self = Self(2758);
  pub const aab: Self = Self(2759);
  pub const aaC: Self = Self(2760);
  pub const aac: Self = Self(2761);
  pub const aaD: Self = Self(2762);
  pub const aad: Self = Self(2763);
  pub const aaE: Self = Self(2764);
  pub const aae: Self = Self(2765);
  pub const aaF: Self = Self(2766);
  pub const aaf: Self = Self(2767);
  pub const aaG: Self = Self(2768);
  pub const aag: Self = Self(2769);
  pub const aaH: Self = Self(2770);
  pub const aah: Self = Self(2771);
  pub const aaI: Self = Self(2772);
  pub const aai: Self = Self(2773);
  pub const aaJ: Self = Self(2774);
  pub const aaj: Self = Self(2775);
  pub const aaK: Self = Self(2776);
  pub const aak: Self = Self(2777);
  pub const aaL: Self = Self(2778);
  pub const aal: Self = Self(2779);
  pub const aaM: Self = Self(2780);
  pub const aam: Self = Self(2781);
  pub const aaN: Self = Self(2782);
  pub const aan: Self = Self(2783);
  pub const aaO: Self = Self(2784);
  pub const aao: Self = Self(2785);
  pub const aaP: Self = Self(2786);
  pub const aap: Self = Self(2787);
  pub const aaQ: Self = Self(2788);
  pub const aaq: Self = Self(2789);
  pub const aaR: Self = Self(2790);
  pub const aar: Self = Self(2791);
  pub const aaS: Self = Self(2792);
  pub const aas: Self = Self(2793);
  pub const aaT: Self = Self(2794);
  pub const aat: Self = Self(2795);
  pub const aaU: Self = Self(2796);
  pub const aau: Self = Self(2797);
  pub const aaV: Self = Self(2798);
  pub const aav: Self = Self(2799);
  pub const aaW: Self = Self(2800);
  pub const aaw: Self = Self(2801);
  pub const aaX: Self = Self(2802);
  pub const aax: Self = Self(2803);
  pub const aaY: Self = Self(2804);
  pub const aay: Self = Self(2805);
  pub const aaZ: Self = Self(2806);
  pub const aaz: Self = Self(2807);
  pub const aBA: Self = Self(2808);
  pub const aBa: Self = Self(2809);
  pub const aBB: Self = Self(2810);
  pub const aBb: Self = Self(2811);
  pub const aBC: Self = Self(2812);
  pub const aBc: Self = Self(2813);
  pub const aBD: Self = Self(2814);
  pub const aBd: Self = Self(2815);
  pub const aBE: Self = Self(2816);
  pub const aBe: Self = Self(2817);
  pub const aBF: Self = Self(2818);
  pub const aBf: Self = Self(2819);
  pub const aBG: Self = Self(2820);
  pub const aBg: Self = Self(2821);
  pub const aBH: Self = Self(2822);
  pub const aBh: Self = Self(2823);
  pub const aBI: Self = Self(2824);
  pub const aBi: Self = Self(2825);
  pub const aBJ: Self = Self(2826);
  pub const aBj: Self = Self(2827);
  pub const aBK: Self = Self(2828);
  pub const aBk: Self = Self(2829);
  pub const aBL: Self = Self(2830);
  pub const aBl: Self = Self(2831);
  pub const aBM: Self = Self(2832);
  pub const aBm: Self = Self(2833);
  pub const aBN: Self = Self(2834);
  pub const aBn: Self = Self(2835);
  pub const aBO: Self = Self(2836);
  pub const aBo: Self = Self(2837);
  pub const aBP: Self = Self(2838);
  pub const aBp: Self = Self(2839);
  pub const aBQ: Self = Self(2840);
  pub const aBq: Self = Self(2841);
  pub const aBR: Self = Self(2842);
  pub const aBr: Self = Self(2843);
  pub const aBS: Self = Self(2844);
  pub const aBs: Self = Self(2845);
  pub const aBT: Self = Self(2846);
  pub const aBt: Self = Self(2847);
  pub const aBU: Self = Self(2848);
  pub const aBu: Self = Self(2849);
  pub const aBV: Self = Self(2850);
  pub const aBv: Self = Self(2851);
  pub const aBW: Self = Self(2852);
  pub const aBw: Self = Self(2853);
  pub const aBX: Self = Self(2854);
  pub const aBx: Self = Self(2855);
  pub const aBY: Self = Self(2856);
  pub const aBy: Self = Self(2857);
  pub const aBZ: Self = Self(2858);
  pub const aBz: Self = Self(2859);
  pub const abA: Self = Self(2860);
  pub const aba: Self = Self(2861);
  pub const abB: Self = Self(2862);
  pub const abb: Self = Self(2863);
  pub const abC: Self = Self(2864);
  pub const abc: Self = Self(2865);
  pub const abD: Self = Self(2866);
  pub const abd: Self = Self(2867);
  pub const abE: Self = Self(2868);
  pub const abe: Self = Self(2869);
  pub const abF: Self = Self(2870);
  pub const abf: Self = Self(2871);
  pub const abG: Self = Self(2872);
  pub const abg: Self = Self(2873);
  pub const abH: Self = Self(2874);
  pub const abh: Self = Self(2875);
  pub const abI: Self = Self(2876);
  pub const abi: Self = Self(2877);
  pub const abJ: Self = Self(2878);
  pub const abj: Self = Self(2879);
  pub const abK: Self = Self(2880);
  pub const abk: Self = Self(2881);
  pub const abL: Self = Self(2882);
  pub const abl: Self = Self(2883);
  pub const abM: Self = Self(2884);
  pub const abm: Self = Self(2885);
  pub const abN: Self = Self(2886);
  pub const abn: Self = Self(2887);
  pub const abO: Self = Self(2888);
  pub const abo: Self = Self(2889);
  pub const abP: Self = Self(2890);
  pub const abp: Self = Self(2891);
  pub const abQ: Self = Self(2892);
  pub const abq: Self = Self(2893);
  pub const abR: Self = Self(2894);
  pub const abr: Self = Self(2895);
  pub const abS: Self = Self(2896);
  pub const abs: Self = Self(2897);
  pub const abT: Self = Self(2898);
  pub const abt: Self = Self(2899);
  pub const abU: Self = Self(2900);
  pub const abu: Self = Self(2901);
  pub const abV: Self = Self(2902);
  pub const abv: Self = Self(2903);
  pub const abW: Self = Self(2904);
  pub const abw: Self = Self(2905);
  pub const abX: Self = Self(2906);
  pub const abx: Self = Self(2907);
  pub const abY: Self = Self(2908);
  pub const aby: Self = Self(2909);
  pub const abZ: Self = Self(2910);
  pub const abz: Self = Self(2911);
  pub const aCA: Self = Self(2912);
  pub const aCa: Self = Self(2913);
  pub const aCB: Self = Self(2914);
  pub const aCb: Self = Self(2915);
  pub const aCC: Self = Self(2916);
  pub const aCc: Self = Self(2917);
  pub const aCD: Self = Self(2918);
  pub const aCd: Self = Self(2919);
  pub const aCE: Self = Self(2920);
  pub const aCe: Self = Self(2921);
  pub const aCF: Self = Self(2922);
  pub const aCf: Self = Self(2923);
  pub const aCG: Self = Self(2924);
  pub const aCg: Self = Self(2925);
  pub const aCH: Self = Self(2926);
  pub const aCh: Self = Self(2927);
  pub const aCI: Self = Self(2928);
  pub const aCi: Self = Self(2929);
  pub const aCJ: Self = Self(2930);
  pub const aCj: Self = Self(2931);
  pub const aCK: Self = Self(2932);
  pub const aCk: Self = Self(2933);
  pub const aCL: Self = Self(2934);
  pub const aCl: Self = Self(2935);
  pub const aCM: Self = Self(2936);
  pub const aCm: Self = Self(2937);
  pub const aCN: Self = Self(2938);
  pub const aCn: Self = Self(2939);
  pub const aCO: Self = Self(2940);
  pub const aCo: Self = Self(2941);
  pub const aCP: Self = Self(2942);
  pub const aCp: Self = Self(2943);
  pub const aCQ: Self = Self(2944);
  pub const aCq: Self = Self(2945);
  pub const aCR: Self = Self(2946);
  pub const aCr: Self = Self(2947);
  pub const aCS: Self = Self(2948);
  pub const aCs: Self = Self(2949);
  pub const aCT: Self = Self(2950);
  pub const aCt: Self = Self(2951);
  pub const aCU: Self = Self(2952);
  pub const aCu: Self = Self(2953);
  pub const aCV: Self = Self(2954);
  pub const aCv: Self = Self(2955);
  pub const aCW: Self = Self(2956);
  pub const aCw: Self = Self(2957);
  pub const aCX: Self = Self(2958);
  pub const aCx: Self = Self(2959);
  pub const aCY: Self = Self(2960);
  pub const aCy: Self = Self(2961);
  pub const aCZ: Self = Self(2962);
  pub const aCz: Self = Self(2963);
  pub const acA: Self = Self(2964);
  pub const aca: Self = Self(2965);
  pub const acB: Self = Self(2966);
  pub const acb: Self = Self(2967);
  pub const acC: Self = Self(2968);
  pub const acc: Self = Self(2969);
  pub const acD: Self = Self(2970);
  pub const acd: Self = Self(2971);
  pub const acE: Self = Self(2972);
  pub const ace: Self = Self(2973);
  pub const acF: Self = Self(2974);
  pub const acf: Self = Self(2975);
  pub const acG: Self = Self(2976);
  pub const acg: Self = Self(2977);
  pub const acH: Self = Self(2978);
  pub const ach: Self = Self(2979);
  pub const acI: Self = Self(2980);
  pub const aci: Self = Self(2981);
  pub const acJ: Self = Self(2982);
  pub const acj: Self = Self(2983);
  pub const acK: Self = Self(2984);
  pub const ack: Self = Self(2985);
  pub const acL: Self = Self(2986);
  pub const acl: Self = Self(2987);
  pub const acM: Self = Self(2988);
  pub const acm: Self = Self(2989);
  pub const acN: Self = Self(2990);
  pub const acn: Self = Self(2991);
  pub const acO: Self = Self(2992);
  pub const aco: Self = Self(2993);
  pub const acP: Self = Self(2994);
  pub const acp: Self = Self(2995);
  pub const acQ: Self = Self(2996);
  pub const acq: Self = Self(2997);
  pub const acR: Self = Self(2998);
  pub const acr: Self = Self(2999);
  pub const acS: Self = Self(3000);
  pub const acs: Self = Self(3001);
  pub const acT: Self = Self(3002);
  pub const act: Self = Self(3003);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 3003;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::A,
    Self::a,
    Self::B,
    Self::b,
    Self::C,
    Self::c,
    Self::D,
    Self::d,
    Self::E,
    Self::e,
    Self::F,
    Self::f,
    Self::G,
    Self::g,
    Self::H,
    Self::h,
    Self::I,
    Self::i,
    Self::J,
    Self::j,
    Self::K,
    Self::k,
    Self::L,
    Self::l,
    Self::M,
    Self::m,
    Self::N,
    Self::n,
    Self::O,
    Self::o,
    Self::P,
    Self::p,
    Self::Q,
    Self::q,
    Self::R,
    Self::r,
    Self::S,
    Self::s,
    Self::T,
    Self::t,
    Self::U,
    Self::u,
    Self::V,
    Self::v,
    Self::W,
    Self::w,
    Self::X,
    Self::x,
    Self::Y,
    Self::y,
    Self::Z,
    Self::z,
    Self::aA,
    Self::aa,
    Self::aB,
    Self::ab,
    Self::aC,
    Self::ac,
    Self::aD,
    Self::ad,
    Self::aE,
    Self::ae,
    Self::aF,
    Self::af,
    Self::aG,
    Self::ag,
    Self::aH,
    Self::ah,
    Self::aI,
    Self::ai,
    Self::aJ,
    Self::aj,
    Self::aK,
    Self::ak,
    Self::aL,
    Self::al,
    Self::aM,
    Self::am,
    Self::aN,
    Self::an,
    Self::aO,
    Self::ao,
    Self::aP,
    Self::ap,
    Self::aQ,
    Self::aq,
    Self::aR,
    Self::ar,
    Self::aS,
    Self::as_,
    Self::aT,
    Self::at,
    Self::aU,
    Self::au,
    Self::aV,
    Self::av,
    Self::aW,
    Self::aw,
    Self::aX,
    Self::ax,
    Self::aY,
    Self::ay,
    Self::aZ,
    Self::az,
    Self::BA,
    Self::Ba,
    Self::BB,
    Self::Bb,
    Self::BC,
    Self::Bc,
    Self::BD,
    Self::Bd,
    Self::BE,
    Self::Be,
    Self::BF,
    Self::Bf,
    Self::BG,
    Self::Bg,
    Self::BH,
    Self::Bh,
    Self::BI,
    Self::Bi,
    Self::BJ,
    Self::Bj,
    Self::BK,
    Self::Bk,
    Self::BL,
    Self::Bl,
    Self::BM,
    Self::Bm,
    Self::BN,
    Self::Bn,
    Self::BO,
    Self::Bo,
    Self::BP,
    Self::Bp,
    Self::BQ,
    Self::Bq,
    Self::BR,
    Self::Br,
    Self::BS,
    Self::Bs,
    Self::BT,
    Self::Bt,
    Self::BU,
    Self::Bu,
    Self::BV,
    Self::Bv,
    Self::BW,
    Self::Bw,
    Self::BX,
    Self::Bx,
    Self::BY,
    Self::By,
    Self::BZ,
    Self::Bz,
    Self::bA,
    Self::ba,
    Self::bB,
    Self::bb,
    Self::bC,
    Self::bc,
    Self::bD,
    Self::bd,
    Self::bE,
    Self::be,
    Self::bF,
    Self::bf,
    Self::bG,
    Self::bg,
    Self::bH,
    Self::bh,
    Self::bI,
    Self::bi,
    Self::bJ,
    Self::bj,
    Self::bK,
    Self::bk,
    Self::bL,
    Self::bl,
    Self::bM,
    Self::bm,
    Self::bN,
    Self::bn,
    Self::bO,
    Self::bo,
    Self::bP,
    Self::bp,
    Self::bQ,
    Self::bq,
    Self::bR,
    Self::br,
    Self::bS,
    Self::bs,
    Self::bT,
    Self::bt,
    Self::bU,
    Self::bu,
    Self::bV,
    Self::bv,
    Self::bW,
    Self::bw,
    Self::bX,
    Self::bx,
    Self::bY,
    Self::by,
    Self::bZ,
    Self::bz,
    Self::CA,
    Self::Ca,
    Self::CB,
    Self::Cb,
    Self::CC,
    Self::Cc,
    Self::CD,
    Self::Cd,
    Self::CE,
    Self::Ce,
    Self::CF,
    Self::Cf,
    Self::CG,
    Self::Cg,
    Self::CH,
    Self::Ch,
    Self::CI,
    Self::Ci,
    Self::CJ,
    Self::Cj,
    Self::CK,
    Self::Ck,
    Self::CL,
    Self::Cl,
    Self::CM,
    Self::Cm,
    Self::CN,
    Self::Cn,
    Self::CO,
    Self::Co,
    Self::CP,
    Self::Cp,
    Self::CQ,
    Self::Cq,
    Self::CR,
    Self::Cr,
    Self::CS,
    Self::Cs,
    Self::CT,
    Self::Ct,
    Self::CU,
    Self::Cu,
    Self::CV,
    Self::Cv,
    Self::CW,
    Self::Cw,
    Self::CX,
    Self::Cx,
    Self::CY,
    Self::Cy,
    Self::CZ,
    Self::Cz,
    Self::cA,
    Self::ca,
    Self::cB,
    Self::cb,
    Self::cC,
    Self::cc,
    Self::cD,
    Self::cd,
    Self::cE,
    Self::ce,
    Self::cF,
    Self::cf,
    Self::cG,
    Self::cg,
    Self::cH,
    Self::ch,
    Self::cI,
    Self::ci,
    Self::cJ,
    Self::cj,
    Self::cK,
    Self::ck,
    Self::cL,
    Self::cl,
    Self::cM,
    Self::cm,
    Self::cN,
    Self::cn,
    Self::cO,
    Self::co,
    Self::cP,
    Self::cp,
    Self::cQ,
    Self::cq,
    Self::cR,
    Self::cr,
    Self::cS,
    Self::cs,
    Self::cT,
    Self::ct,
    Self::cU,
    Self::cu,
    Self::cV,
    Self::cv,
    Self::cW,
    Self::cw,
    Self::cX,
    Self::cx,
    Self::cY,
    Self::cy,
    Self::cZ,
    Self::cz,
    Self::DA,
    Self::Da,
    Self::DB,
    Self::Db,
    Self::DC,
    Self::Dc,
    Self::DD,
    Self::Dd,
    Self::DE,
    Self::De,
    Self::DF,
    Self::Df,
    Self::DG,
    Self::Dg,
    Self::DH,
    Self::Dh,
    Self::DI,
    Self::Di,
    Self::DJ,
    Self::Dj,
    Self::DK,
    Self::Dk,
    Self::DL,
    Self::Dl,
    Self::DM,
    Self::Dm,
    Self::DN,
    Self::Dn,
    Self::DO,
    Self::Do,
    Self::DP,
    Self::Dp,
    Self::DQ,
    Self::Dq,
    Self::DR,
    Self::Dr,
    Self::DS,
    Self::Ds,
    Self::DT,
    Self::Dt,
    Self::DU,
    Self::Du,
    Self::DV,
    Self::Dv,
    Self::DW,
    Self::Dw,
    Self::DX,
    Self::Dx,
    Self::DY,
    Self::Dy,
    Self::DZ,
    Self::Dz,
    Self::dA,
    Self::da,
    Self::dB,
    Self::db,
    Self::dC,
    Self::dc,
    Self::dD,
    Self::dd,
    Self::dE,
    Self::de,
    Self::dF,
    Self::df,
    Self::dG,
    Self::dg,
    Self::dH,
    Self::dh,
    Self::dI,
    Self::di,
    Self::dJ,
    Self::dj,
    Self::dK,
    Self::dk,
    Self::dL,
    Self::dl,
    Self::dM,
    Self::dm,
    Self::dN,
    Self::dn,
    Self::dO,
    Self::do_,
    Self::dP,
    Self::dp,
    Self::dQ,
    Self::dq,
    Self::dR,
    Self::dr,
    Self::dS,
    Self::ds,
    Self::dT,
    Self::dt,
    Self::dU,
    Self::du,
    Self::dV,
    Self::dv,
    Self::dW,
    Self::dw,
    Self::dX,
    Self::dx,
    Self::dY,
    Self::dy,
    Self::dZ,
    Self::dz,
    Self::EA,
    Self::Ea,
    Self::EB,
    Self::Eb,
    Self::EC,
    Self::Ec,
    Self::ED,
    Self::Ed,
    Self::EE,
    Self::Ee,
    Self::EF,
    Self::Ef,
    Self::EG,
    Self::Eg,
    Self::EH,
    Self::Eh,
    Self::EI,
    Self::Ei,
    Self::EJ,
    Self::Ej,
    Self::EK,
    Self::Ek,
    Self::EL,
    Self::El,
    Self::EM,
    Self::Em,
    Self::EN,
    Self::En,
    Self::EO,
    Self::Eo,
    Self::EP,
    Self::Ep,
    Self::EQ,
    Self::Eq,
    Self::ER,
    Self::Er,
    Self::ES,
    Self::Es,
    Self::ET,
    Self::Et,
    Self::EU,
    Self::Eu,
    Self::EV,
    Self::Ev,
    Self::EW,
    Self::Ew,
    Self::EX,
    Self::Ex,
    Self::EY,
    Self::Ey,
    Self::EZ,
    Self::Ez,
    Self::eA,
    Self::ea,
    Self::eB,
    Self::eb,
    Self::eC,
    Self::ec,
    Self::eD,
    Self::ed,
    Self::eE,
    Self::ee,
    Self::eF,
    Self::ef,
    Self::eG,
    Self::eg,
    Self::eH,
    Self::eh,
    Self::eI,
    Self::ei,
    Self::eJ,
    Self::ej,
    Self::eK,
    Self::ek,
    Self::eL,
    Self::el,
    Self::eM,
    Self::em,
    Self::eN,
    Self::en,
    Self::eO,
    Self::eo,
    Self::eP,
    Self::ep,
    Self::eQ,
    Self::eq,
    Self::eR,
    Self::er,
    Self::eS,
    Self::es,
    Self::eT,
    Self::et,
    Self::eU,
    Self::eu,
    Self::eV,
    Self::ev,
    Self::eW,
    Self::ew,
    Self::eX,
    Self::ex,
    Self::eY,
    Self::ey,
    Self::eZ,
    Self::ez,
    Self::FA,
    Self::Fa,
    Self::FB,
    Self::Fb,
    Self::FC,
    Self::Fc,
    Self::FD,
    Self::Fd,
    Self::FE,
    Self::Fe,
    Self::FF,
    Self::Ff,
    Self::FG,
    Self::Fg,
    Self::FH,
    Self::Fh,
    Self::FI,
    Self::Fi,
    Self::FJ,
    Self::Fj,
    Self::FK,
    Self::Fk,
    Self::FL,
    Self::Fl,
    Self::FM,
    Self::Fm,
    Self::FN,
    Self::Fn,
    Self::FO,
    Self::Fo,
    Self::FP,
    Self::Fp,
    Self::FQ,
    Self::Fq,
    Self::FR,
    Self::Fr,
    Self::FS,
    Self::Fs,
    Self::FT,
    Self::Ft,
    Self::FU,
    Self::Fu,
    Self::FV,
    Self::Fv,
    Self::FW,
    Self::Fw,
    Self::FX,
    Self::Fx,
    Self::FY,
    Self::Fy,
    Self::FZ,
    Self::Fz,
    Self::fA,
    Self::fa,
    Self::fB,
    Self::fb,
    Self::fC,
    Self::fc,
    Self::fD,
    Self::fd,
    Self::fE,
    Self::fe,
    Self::fF,
    Self::ff,
    Self::fG,
    Self::fg,
    Self::fH,
    Self::fh,
    Self::fI,
    Self::fi,
    Self::fJ,
    Self::fj,
    Self::fK,
    Self::fk,
    Self::fL,
    Self::fl,
    Self::fM,
    Self::fm,
    Self::fN,
    Self::fn_,
    Self::fO,
    Self::fo,
    Self::fP,
    Self::fp,
    Self::fQ,
    Self::fq,
    Self::fR,
    Self::fr,
    Self::fS,
    Self::fs,
    Self::fT,
    Self::ft,
    Self::fU,
    Self::fu,
    Self::fV,
    Self::fv,
    Self::fW,
    Self::fw,
    Self::fX,
    Self::fx,
    Self::fY,
    Self::fy,
    Self::fZ,
    Self::fz,
    Self::GA,
    Self::Ga,
    Self::GB,
    Self::Gb,
    Self::GC,
    Self::Gc,
    Self::GD,
    Self::Gd,
    Self::GE,
    Self::Ge,
    Self::GF,
    Self::Gf,
    Self::GG,
    Self::Gg,
    Self::GH,
    Self::Gh,
    Self::GI,
    Self::Gi,
    Self::GJ,
    Self::Gj,
    Self::GK,
    Self::Gk,
    Self::GL,
    Self::Gl,
    Self::GM,
    Self::Gm,
    Self::GN,
    Self::Gn,
    Self::GO,
    Self::Go,
    Self::GP,
    Self::Gp,
    Self::GQ,
    Self::Gq,
    Self::GR,
    Self::Gr,
    Self::GS,
    Self::Gs,
    Self::GT,
    Self::Gt,
    Self::GU,
    Self::Gu,
    Self::GV,
    Self::Gv,
    Self::GW,
    Self::Gw,
    Self::GX,
    Self::Gx,
    Self::GY,
    Self::Gy,
    Self::GZ,
    Self::Gz,
    Self::gA,
    Self::ga,
    Self::gB,
    Self::gb,
    Self::gC,
    Self::gc,
    Self::gD,
    Self::gd,
    Self::gE,
    Self::ge,
    Self::gF,
    Self::gf,
    Self::gG,
    Self::gg,
    Self::gH,
    Self::gh,
    Self::gI,
    Self::gi,
    Self::gJ,
    Self::gj,
    Self::gK,
    Self::gk,
    Self::gL,
    Self::gl,
    Self::gM,
    Self::gm,
    Self::gN,
    Self::gn,
    Self::gO,
    Self::go,
    Self::gP,
    Self::gp,
    Self::gQ,
    Self::gq,
    Self::gR,
    Self::gr,
    Self::gS,
    Self::gs,
    Self::gT,
    Self::gt,
    Self::gU,
    Self::gu,
    Self::gV,
    Self::gv,
    Self::gW,
    Self::gw,
    Self::gX,
    Self::gx,
    Self::gY,
    Self::gy,
    Self::gZ,
    Self::gz,
    Self::HA,
    Self::Ha,
    Self::HB,
    Self::Hb,
    Self::HC,
    Self::Hc,
    Self::HD,
    Self::Hd,
    Self::HE,
    Self::He,
    Self::HF,
    Self::Hf,
    Self::HG,
    Self::Hg,
    Self::HH,
    Self::Hh,
    Self::HI,
    Self::Hi,
    Self::HJ,
    Self::Hj,
    Self::HK,
    Self::Hk,
    Self::HL,
    Self::Hl,
    Self::HM,
    Self::Hm,
    Self::HN,
    Self::Hn,
    Self::HO,
    Self::Ho,
    Self::HP,
    Self::Hp,
    Self::HQ,
    Self::Hq,
    Self::HR,
    Self::Hr,
    Self::HS,
    Self::Hs,
    Self::HT,
    Self::Ht,
    Self::HU,
    Self::Hu,
    Self::HV,
    Self::Hv,
    Self::HW,
    Self::Hw,
    Self::HX,
    Self::Hx,
    Self::HY,
    Self::Hy,
    Self::HZ,
    Self::Hz,
    Self::hA,
    Self::ha,
    Self::hB,
    Self::hb,
    Self::hC,
    Self::hc,
    Self::hD,
    Self::hd,
    Self::hE,
    Self::he,
    Self::hF,
    Self::hf,
    Self::hG,
    Self::hg,
    Self::hH,
    Self::hh,
    Self::hI,
    Self::hi,
    Self::hJ,
    Self::hj,
    Self::hK,
    Self::hk,
    Self::hL,
    Self::hl,
    Self::hM,
    Self::hm,
    Self::hN,
    Self::hn,
    Self::hO,
    Self::ho,
    Self::hP,
    Self::hp,
    Self::hQ,
    Self::hq,
    Self::hR,
    Self::hr,
    Self::hS,
    Self::hs,
    Self::hT,
    Self::ht,
    Self::hU,
    Self::hu,
    Self::hV,
    Self::hv,
    Self::hW,
    Self::hw,
    Self::hX,
    Self::hx,
    Self::hY,
    Self::hy,
    Self::hZ,
    Self::hz,
    Self::IA,
    Self::Ia,
    Self::IB,
    Self::Ib,
    Self::IC,
    Self::Ic,
    Self::ID,
    Self::Id,
    Self::IE,
    Self::Ie,
    Self::IF,
    Self::If,
    Self::IG,
    Self::Ig,
    Self::IH,
    Self::Ih,
    Self::II,
    Self::Ii,
    Self::IJ,
    Self::Ij,
    Self::IK,
    Self::Ik,
    Self::IL,
    Self::Il,
    Self::IM,
    Self::Im,
    Self::IN,
    Self::In,
    Self::IO,
    Self::Io,
    Self::IP,
    Self::Ip,
    Self::IQ,
    Self::Iq,
    Self::IR,
    Self::Ir,
    Self::IS,
    Self::Is,
    Self::IT,
    Self::It,
    Self::IU,
    Self::Iu,
    Self::IV,
    Self::Iv,
    Self::IW,
    Self::Iw,
    Self::IX,
    Self::Ix,
    Self::IY,
    Self::Iy,
    Self::IZ,
    Self::Iz,
    Self::iA,
    Self::ia,
    Self::iB,
    Self::ib,
    Self::iC,
    Self::ic,
    Self::iD,
    Self::id,
    Self::iE,
    Self::ie,
    Self::iF,
    Self::if_,
    Self::iG,
    Self::ig,
    Self::iH,
    Self::ih,
    Self::iI,
    Self::ii,
    Self::iJ,
    Self::ij,
    Self::iK,
    Self::ik,
    Self::iL,
    Self::il,
    Self::iM,
    Self::im,
    Self::iN,
    Self::in_,
    Self::iO,
    Self::io,
    Self::iP,
    Self::ip,
    Self::iQ,
    Self::iq,
    Self::iR,
    Self::ir,
    Self::iS,
    Self::is,
    Self::iT,
    Self::it,
    Self::iU,
    Self::iu,
    Self::iV,
    Self::iv,
    Self::iW,
    Self::iw,
    Self::iX,
    Self::ix,
    Self::iY,
    Self::iy,
    Self::iZ,
    Self::iz,
    Self::JA,
    Self::Ja,
    Self::JB,
    Self::Jb,
    Self::JC,
    Self::Jc,
    Self::JD,
    Self::Jd,
    Self::JE,
    Self::Je,
    Self::JF,
    Self::Jf,
    Self::JG,
    Self::Jg,
    Self::JH,
    Self::Jh,
    Self::JI,
    Self::Ji,
    Self::JJ,
    Self::Jj,
    Self::JK,
    Self::Jk,
    Self::JL,
    Self::Jl,
    Self::JM,
    Self::Jm,
    Self::JN,
    Self::Jn,
    Self::JO,
    Self::Jo,
    Self::JP,
    Self::Jp,
    Self::JQ,
    Self::Jq,
    Self::JR,
    Self::Jr,
    Self::JS,
    Self::Js,
    Self::JT,
    Self::Jt,
    Self::JU,
    Self::Ju,
    Self::JV,
    Self::Jv,
    Self::JW,
    Self::Jw,
    Self::JX,
    Self::Jx,
    Self::JY,
    Self::Jy,
    Self::JZ,
    Self::Jz,
    Self::jA,
    Self::ja,
    Self::jB,
    Self::jb,
    Self::jC,
    Self::jc,
    Self::jD,
    Self::jd,
    Self::jE,
    Self::je,
    Self::jF,
    Self::jf,
    Self::jG,
    Self::jg,
    Self::jH,
    Self::jh,
    Self::jI,
    Self::ji,
    Self::jJ,
    Self::jj,
    Self::jK,
    Self::jk,
    Self::jL,
    Self::jl,
    Self::jM,
    Self::jm,
    Self::jN,
    Self::jn,
    Self::jO,
    Self::jo,
    Self::jP,
    Self::jp,
    Self::jQ,
    Self::jq,
    Self::jR,
    Self::jr,
    Self::jS,
    Self::js,
    Self::jT,
    Self::jt,
    Self::jU,
    Self::ju,
    Self::jV,
    Self::jv,
    Self::jW,
    Self::jw,
    Self::jX,
    Self::jx,
    Self::jY,
    Self::jy,
    Self::jZ,
    Self::jz,
    Self::KA,
    Self::Ka,
    Self::KB,
    Self::Kb,
    Self::KC,
    Self::Kc,
    Self::KD,
    Self::Kd,
    Self::KE,
    Self::Ke,
    Self::KF,
    Self::Kf,
    Self::KG,
    Self::Kg,
    Self::KH,
    Self::Kh,
    Self::KI,
    Self::Ki,
    Self::KJ,
    Self::Kj,
    Self::KK,
    Self::Kk,
    Self::KL,
    Self::Kl,
    Self::KM,
    Self::Km,
    Self::KN,
    Self::Kn,
    Self::KO,
    Self::Ko,
    Self::KP,
    Self::Kp,
    Self::KQ,
    Self::Kq,
    Self::KR,
    Self::Kr,
    Self::KS,
    Self::Ks,
    Self::KT,
    Self::Kt,
    Self::KU,
    Self::Ku,
    Self::KV,
    Self::Kv,
    Self::KW,
    Self::Kw,
    Self::KX,
    Self::Kx,
    Self::KY,
    Self::Ky,
    Self::KZ,
    Self::Kz,
    Self::kA,
    Self::ka,
    Self::kB,
    Self::kb,
    Self::kC,
    Self::kc,
    Self::kD,
    Self::kd,
    Self::kE,
    Self::ke,
    Self::kF,
    Self::kf,
    Self::kG,
    Self::kg,
    Self::kH,
    Self::kh,
    Self::kI,
    Self::ki,
    Self::kJ,
    Self::kj,
    Self::kK,
    Self::kk,
    Self::kL,
    Self::kl,
    Self::kM,
    Self::km,
    Self::kN,
    Self::kn,
    Self::kO,
    Self::ko,
    Self::kP,
    Self::kp,
    Self::kQ,
    Self::kq,
    Self::kR,
    Self::kr,
    Self::kS,
    Self::ks,
    Self::kT,
    Self::kt,
    Self::kU,
    Self::ku,
    Self::kV,
    Self::kv,
    Self::kW,
    Self::kw,
    Self::kX,
    Self::kx,
    Self::kY,
    Self::ky,
    Self::kZ,
    Self::kz,
    Self::LA,
    Self::La,
    Self::LB,
    Self::Lb,
    Self::LC,
    Self::Lc,
    Self::LD,
    Self::Ld,
    Self::LE,
    Self::Le,
    Self::LF,
    Self::Lf,
    Self::LG,
    Self::Lg,
    Self::LH,
    Self::Lh,
    Self::LI,
    Self::Li,
    Self::LJ,
    Self::Lj,
    Self::LK,
    Self::Lk,
    Self::LL,
    Self::Ll,
    Self::LM,
    Self::Lm,
    Self::LN,
    Self::Ln,
    Self::LO,
    Self::Lo,
    Self::LP,
    Self::Lp,
    Self::LQ,
    Self::Lq,
    Self::LR,
    Self::Lr,
    Self::LS,
    Self::Ls,
    Self::LT,
    Self::Lt,
    Self::LU,
    Self::Lu,
    Self::LV,
    Self::Lv,
    Self::LW,
    Self::Lw,
    Self::LX,
    Self::Lx,
    Self::LY,
    Self::Ly,
    Self::LZ,
    Self::Lz,
    Self::lA,
    Self::la,
    Self::lB,
    Self::lb,
    Self::lC,
    Self::lc,
    Self::lD,
    Self::ld,
    Self::lE,
    Self::le,
    Self::lF,
    Self::lf,
    Self::lG,
    Self::lg,
    Self::lH,
    Self::lh,
    Self::lI,
    Self::li,
    Self::lJ,
    Self::lj,
    Self::lK,
    Self::lk,
    Self::lL,
    Self::ll,
    Self::lM,
    Self::lm,
    Self::lN,
    Self::ln,
    Self::lO,
    Self::lo,
    Self::lP,
    Self::lp,
    Self::lQ,
    Self::lq,
    Self::lR,
    Self::lr,
    Self::lS,
    Self::ls,
    Self::lT,
    Self::lt,
    Self::lU,
    Self::lu,
    Self::lV,
    Self::lv,
    Self::lW,
    Self::lw,
    Self::lX,
    Self::lx,
    Self::lY,
    Self::ly,
    Self::lZ,
    Self::lz,
    Self::MA,
    Self::Ma,
    Self::MB,
    Self::Mb,
    Self::MC,
    Self::Mc,
    Self::MD,
    Self::Md,
    Self::ME,
    Self::Me,
    Self::MF,
    Self::Mf,
    Self::MG,
    Self::Mg,
    Self::MH,
    Self::Mh,
    Self::MI,
    Self::Mi,
    Self::MJ,
    Self::Mj,
    Self::MK,
    Self::Mk,
    Self::ML,
    Self::Ml,
    Self::MM,
    Self::Mm,
    Self::MN,
    Self::Mn,
    Self::MO,
    Self::Mo,
    Self::MP,
    Self::Mp,
    Self::MQ,
    Self::Mq,
    Self::MR,
    Self::Mr,
    Self::MS,
    Self::Ms,
    Self::MT,
    Self::Mt,
    Self::MU,
    Self::Mu,
    Self::MV,
    Self::Mv,
    Self::MW,
    Self::Mw,
    Self::MX,
    Self::Mx,
    Self::MY,
    Self::My,
    Self::MZ,
    Self::Mz,
    Self::mA,
    Self::ma,
    Self::mB,
    Self::mb,
    Self::mC,
    Self::mc,
    Self::mD,
    Self::md,
    Self::mE,
    Self::me,
    Self::mF,
    Self::mf,
    Self::mG,
    Self::mg,
    Self::mH,
    Self::mh,
    Self::mI,
    Self::mi,
    Self::mJ,
    Self::mj,
    Self::mK,
    Self::mk,
    Self::mL,
    Self::ml,
    Self::mM,
    Self::mm,
    Self::mN,
    Self::mn,
    Self::mO,
    Self::mo,
    Self::mP,
    Self::mp,
    Self::mQ,
    Self::mq,
    Self::mR,
    Self::mr,
    Self::mS,
    Self::ms,
    Self::mT,
    Self::mt,
    Self::mU,
    Self::mu,
    Self::mV,
    Self::mv,
    Self::mW,
    Self::mw,
    Self::mX,
    Self::mx,
    Self::mY,
    Self::my,
    Self::mZ,
    Self::mz,
    Self::NA,
    Self::Na,
    Self::NB,
    Self::Nb,
    Self::NC,
    Self::Nc,
    Self::ND,
    Self::Nd,
    Self::NE,
    Self::Ne,
    Self::NF,
    Self::Nf,
    Self::NG,
    Self::Ng,
    Self::NH,
    Self::Nh,
    Self::NI,
    Self::Ni,
    Self::NJ,
    Self::Nj,
    Self::NK,
    Self::Nk,
    Self::NL,
    Self::Nl,
    Self::NM,
    Self::Nm,
    Self::NN,
    Self::Nn,
    Self::NO,
    Self::No,
    Self::NP,
    Self::Np,
    Self::NQ,
    Self::Nq,
    Self::NR,
    Self::Nr,
    Self::NS,
    Self::Ns,
    Self::NT,
    Self::Nt,
    Self::NU,
    Self::Nu,
    Self::NV,
    Self::Nv,
    Self::NW,
    Self::Nw,
    Self::NX,
    Self::Nx,
    Self::NY,
    Self::Ny,
    Self::NZ,
    Self::Nz,
    Self::nA,
    Self::na,
    Self::nB,
    Self::nb,
    Self::nC,
    Self::nc,
    Self::nD,
    Self::nd,
    Self::nE,
    Self::ne,
    Self::nF,
    Self::nf,
    Self::nG,
    Self::ng,
    Self::nH,
    Self::nh,
    Self::nI,
    Self::ni,
    Self::nJ,
    Self::nj,
    Self::nK,
    Self::nk,
    Self::nL,
    Self::nl,
    Self::nM,
    Self::nm,
    Self::nN,
    Self::nn,
    Self::nO,
    Self::no,
    Self::nP,
    Self::np,
    Self::nQ,
    Self::nq,
    Self::nR,
    Self::nr,
    Self::nS,
    Self::ns,
    Self::nT,
    Self::nt,
    Self::nU,
    Self::nu,
    Self::nV,
    Self::nv,
    Self::nW,
    Self::nw,
    Self::nX,
    Self::nx,
    Self::nY,
    Self::ny,
    Self::nZ,
    Self::nz,
    Self::OA,
    Self::Oa,
    Self::OB,
    Self::Ob,
    Self::OC,
    Self::Oc,
    Self::OD,
    Self::Od,
    Self::OE,
    Self::Oe,
    Self::OF,
    Self::Of,
    Self::OG,
    Self::Og,
    Self::OH,
    Self::Oh,
    Self::OI,
    Self::Oi,
    Self::OJ,
    Self::Oj,
    Self::OK,
    Self::Ok,
    Self::OL,
    Self::Ol,
    Self::OM,
    Self::Om,
    Self::ON,
    Self::On,
    Self::OO,
    Self::Oo,
    Self::OP,
    Self::Op,
    Self::OQ,
    Self::Oq,
    Self::OR,
    Self::Or,
    Self::OS,
    Self::Os,
    Self::OT,
    Self::Ot,
    Self::OU,
    Self::Ou,
    Self::OV,
    Self::Ov,
    Self::OW,
    Self::Ow,
    Self::OX,
    Self::Ox,
    Self::OY,
    Self::Oy,
    Self::OZ,
    Self::Oz,
    Self::oA,
    Self::oa,
    Self::oB,
    Self::ob,
    Self::oC,
    Self::oc,
    Self::oD,
    Self::od,
    Self::oE,
    Self::oe,
    Self::oF,
    Self::of,
    Self::oG,
    Self::og,
    Self::oH,
    Self::oh,
    Self::oI,
    Self::oi,
    Self::oJ,
    Self::oj,
    Self::oK,
    Self::ok,
    Self::oL,
    Self::ol,
    Self::oM,
    Self::om,
    Self::oN,
    Self::on,
    Self::oO,
    Self::oo,
    Self::oP,
    Self::op,
    Self::oQ,
    Self::oq,
    Self::oR,
    Self::or,
    Self::oS,
    Self::os,
    Self::oT,
    Self::ot,
    Self::oU,
    Self::ou,
    Self::oV,
    Self::ov,
    Self::oW,
    Self::ow,
    Self::oX,
    Self::ox,
    Self::oY,
    Self::oy,
    Self::oZ,
    Self::oz,
    Self::PA,
    Self::Pa,
    Self::PB,
    Self::Pb,
    Self::PC,
    Self::Pc,
    Self::PD,
    Self::Pd,
    Self::PE,
    Self::Pe,
    Self::PF,
    Self::Pf,
    Self::PG,
    Self::Pg,
    Self::PH,
    Self::Ph,
    Self::PI,
    Self::Pi,
    Self::PJ,
    Self::Pj,
    Self::PK,
    Self::Pk,
    Self::PL,
    Self::Pl,
    Self::PM,
    Self::Pm,
    Self::PN,
    Self::Pn,
    Self::PO,
    Self::Po,
    Self::PP,
    Self::Pp,
    Self::PQ,
    Self::Pq,
    Self::PR,
    Self::Pr,
    Self::PS,
    Self::Ps,
    Self::PT,
    Self::Pt,
    Self::PU,
    Self::Pu,
    Self::PV,
    Self::Pv,
    Self::PW,
    Self::Pw,
    Self::PX,
    Self::Px,
    Self::PY,
    Self::Py,
    Self::PZ,
    Self::Pz,
    Self::pA,
    Self::pa,
    Self::pB,
    Self::pb,
    Self::pC,
    Self::pc,
    Self::pD,
    Self::pd,
    Self::pE,
    Self::pe,
    Self::pF,
    Self::pf,
    Self::pG,
    Self::pg,
    Self::pH,
    Self::ph,
    Self::pI,
    Self::pi,
    Self::pJ,
    Self::pj,
    Self::pK,
    Self::pk,
    Self::pL,
    Self::pl,
    Self::pM,
    Self::pm,
    Self::pN,
    Self::pn,
    Self::pO,
    Self::po,
    Self::pP,
    Self::pp,
    Self::pQ,
    Self::pq,
    Self::pR,
    Self::pr,
    Self::pS,
    Self::ps,
    Self::pT,
    Self::pt,
    Self::pU,
    Self::pu,
    Self::pV,
    Self::pv,
    Self::pW,
    Self::pw,
    Self::pX,
    Self::px,
    Self::pY,
    Self::py,
    Self::pZ,
    Self::pz,
    Self::QA,
    Self::Qa,
    Self::QB,
    Self::Qb,
    Self::QC,
    Self::Qc,
    Self::QD,
    Self::Qd,
    Self::QE,
    Self::Qe,
    Self::QF,
    Self::Qf,
    Self::QG,
    Self::Qg,
    Self::QH,
    Self::Qh,
    Self::QI,
    Self::Qi,
    Self::QJ,
    Self::Qj,
    Self::QK,
    Self::Qk,
    Self::QL,
    Self::Ql,
    Self::QM,
    Self::Qm,
    Self::QN,
    Self::Qn,
    Self::QO,
    Self::Qo,
    Self::QP,
    Self::Qp,
    Self::QQ,
    Self::Qq,
    Self::QR,
    Self::Qr,
    Self::QS,
    Self::Qs,
    Self::QT,
    Self::Qt,
    Self::QU,
    Self::Qu,
    Self::QV,
    Self::Qv,
    Self::QW,
    Self::Qw,
    Self::QX,
    Self::Qx,
    Self::QY,
    Self::Qy,
    Self::QZ,
    Self::Qz,
    Self::qA,
    Self::qa,
    Self::qB,
    Self::qb,
    Self::qC,
    Self::qc,
    Self::qD,
    Self::qd,
    Self::qE,
    Self::qe,
    Self::qF,
    Self::qf,
    Self::qG,
    Self::qg,
    Self::qH,
    Self::qh,
    Self::qI,
    Self::qi,
    Self::qJ,
    Self::qj,
    Self::qK,
    Self::qk,
    Self::qL,
    Self::ql,
    Self::qM,
    Self::qm,
    Self::qN,
    Self::qn,
    Self::qO,
    Self::qo,
    Self::qP,
    Self::qp,
    Self::qQ,
    Self::qq,
    Self::qR,
    Self::qr,
    Self::qS,
    Self::qs,
    Self::qT,
    Self::qt,
    Self::qU,
    Self::qu,
    Self::qV,
    Self::qv,
    Self::qW,
    Self::qw,
    Self::qX,
    Self::qx,
    Self::qY,
    Self::qy,
    Self::qZ,
    Self::qz,
    Self::RA,
    Self::Ra,
    Self::RB,
    Self::Rb,
    Self::RC,
    Self::Rc,
    Self::RD,
    Self::Rd,
    Self::RE,
    Self::Re,
    Self::RF,
    Self::Rf,
    Self::RG,
    Self::Rg,
    Self::RH,
    Self::Rh,
    Self::RI,
    Self::Ri,
    Self::RJ,
    Self::Rj,
    Self::RK,
    Self::Rk,
    Self::RL,
    Self::Rl,
    Self::RM,
    Self::Rm,
    Self::RN,
    Self::Rn,
    Self::RO,
    Self::Ro,
    Self::RP,
    Self::Rp,
    Self::RQ,
    Self::Rq,
    Self::RR,
    Self::Rr,
    Self::RS,
    Self::Rs,
    Self::RT,
    Self::Rt,
    Self::RU,
    Self::Ru,
    Self::RV,
    Self::Rv,
    Self::RW,
    Self::Rw,
    Self::RX,
    Self::Rx,
    Self::RY,
    Self::Ry,
    Self::RZ,
    Self::Rz,
    Self::rA,
    Self::ra,
    Self::rB,
    Self::rb,
    Self::rC,
    Self::rc,
    Self::rD,
    Self::rd,
    Self::rE,
    Self::re,
    Self::rF,
    Self::rf,
    Self::rG,
    Self::rg,
    Self::rH,
    Self::rh,
    Self::rI,
    Self::ri,
    Self::rJ,
    Self::rj,
    Self::rK,
    Self::rk,
    Self::rL,
    Self::rl,
    Self::rM,
    Self::rm,
    Self::rN,
    Self::rn,
    Self::rO,
    Self::ro,
    Self::rP,
    Self::rp,
    Self::rQ,
    Self::rq,
    Self::rR,
    Self::rr,
    Self::rS,
    Self::rs,
    Self::rT,
    Self::rt,
    Self::rU,
    Self::ru,
    Self::rV,
    Self::rv,
    Self::rW,
    Self::rw,
    Self::rX,
    Self::rx,
    Self::rY,
    Self::ry,
    Self::rZ,
    Self::rz,
    Self::SA,
    Self::Sa,
    Self::SB,
    Self::Sb,
    Self::SC,
    Self::Sc,
    Self::SD,
    Self::Sd,
    Self::SE,
    Self::Se,
    Self::SF,
    Self::Sf,
    Self::SG,
    Self::Sg,
    Self::SH,
    Self::Sh,
    Self::SI,
    Self::Si,
    Self::SJ,
    Self::Sj,
    Self::SK,
    Self::Sk,
    Self::SL,
    Self::Sl,
    Self::SM,
    Self::Sm,
    Self::SN,
    Self::Sn,
    Self::SO,
    Self::So,
    Self::SP,
    Self::Sp,
    Self::SQ,
    Self::Sq,
    Self::SR,
    Self::Sr,
    Self::SS,
    Self::Ss,
    Self::ST,
    Self::St,
    Self::SU,
    Self::Su,
    Self::SV,
    Self::Sv,
    Self::SW,
    Self::Sw,
    Self::SX,
    Self::Sx,
    Self::SY,
    Self::Sy,
    Self::SZ,
    Self::Sz,
    Self::sA,
    Self::sa,
    Self::sB,
    Self::sb,
    Self::sC,
    Self::sc,
    Self::sD,
    Self::sd,
    Self::sE,
    Self::se,
    Self::sF,
    Self::sf,
    Self::sG,
    Self::sg,
    Self::sH,
    Self::sh,
    Self::sI,
    Self::si,
    Self::sJ,
    Self::sj,
    Self::sK,
    Self::sk,
    Self::sL,
    Self::sl,
    Self::sM,
    Self::sm,
    Self::sN,
    Self::sn,
    Self::sO,
    Self::so,
    Self::sP,
    Self::sp,
    Self::sQ,
    Self::sq,
    Self::sR,
    Self::sr,
    Self::sS,
    Self::ss,
    Self::sT,
    Self::st,
    Self::sU,
    Self::su,
    Self::sV,
    Self::sv,
    Self::sW,
    Self::sw,
    Self::sX,
    Self::sx,
    Self::sY,
    Self::sy,
    Self::sZ,
    Self::sz,
    Self::TA,
    Self::Ta,
    Self::TB,
    Self::Tb,
    Self::TC,
    Self::Tc,
    Self::TD,
    Self::Td,
    Self::TE,
    Self::Te,
    Self::TF,
    Self::Tf,
    Self::TG,
    Self::Tg,
    Self::TH,
    Self::Th,
    Self::TI,
    Self::Ti,
    Self::TJ,
    Self::Tj,
    Self::TK,
    Self::Tk,
    Self::TL,
    Self::Tl,
    Self::TM,
    Self::Tm,
    Self::TN,
    Self::Tn,
    Self::TO,
    Self::To,
    Self::TP,
    Self::Tp,
    Self::TQ,
    Self::Tq,
    Self::TR,
    Self::Tr,
    Self::TS,
    Self::Ts,
    Self::TT,
    Self::Tt,
    Self::TU,
    Self::Tu,
    Self::TV,
    Self::Tv,
    Self::TW,
    Self::Tw,
    Self::TX,
    Self::Tx,
    Self::TY,
    Self::Ty,
    Self::TZ,
    Self::Tz,
    Self::tA,
    Self::ta,
    Self::tB,
    Self::tb,
    Self::tC,
    Self::tc,
    Self::tD,
    Self::td,
    Self::tE,
    Self::te,
    Self::tF,
    Self::tf,
    Self::tG,
    Self::tg,
    Self::tH,
    Self::th,
    Self::tI,
    Self::ti,
    Self::tJ,
    Self::tj,
    Self::tK,
    Self::tk,
    Self::tL,
    Self::tl,
    Self::tM,
    Self::tm,
    Self::tN,
    Self::tn,
    Self::tO,
    Self::to,
    Self::tP,
    Self::tp,
    Self::tQ,
    Self::tq,
    Self::tR,
    Self::tr,
    Self::tS,
    Self::ts,
    Self::tT,
    Self::tt,
    Self::tU,
    Self::tu,
    Self::tV,
    Self::tv,
    Self::tW,
    Self::tw,
    Self::tX,
    Self::tx,
    Self::tY,
    Self::ty,
    Self::tZ,
    Self::tz,
    Self::UA,
    Self::Ua,
    Self::UB,
    Self::Ub,
    Self::UC,
    Self::Uc,
    Self::UD,
    Self::Ud,
    Self::UE,
    Self::Ue,
    Self::UF,
    Self::Uf,
    Self::UG,
    Self::Ug,
    Self::UH,
    Self::Uh,
    Self::UI,
    Self::Ui,
    Self::UJ,
    Self::Uj,
    Self::UK,
    Self::Uk,
    Self::UL,
    Self::Ul,
    Self::UM,
    Self::Um,
    Self::UN,
    Self::Un,
    Self::UO,
    Self::Uo,
    Self::UP,
    Self::Up,
    Self::UQ,
    Self::Uq,
    Self::UR,
    Self::Ur,
    Self::US,
    Self::Us,
    Self::UT,
    Self::Ut,
    Self::UU,
    Self::Uu,
    Self::UV,
    Self::Uv,
    Self::UW,
    Self::Uw,
    Self::UX,
    Self::Ux,
    Self::UY,
    Self::Uy,
    Self::UZ,
    Self::Uz,
    Self::uA,
    Self::ua,
    Self::uB,
    Self::ub,
    Self::uC,
    Self::uc,
    Self::uD,
    Self::ud,
    Self::uE,
    Self::ue,
    Self::uF,
    Self::uf,
    Self::uG,
    Self::ug,
    Self::uH,
    Self::uh,
    Self::uI,
    Self::ui,
    Self::uJ,
    Self::uj,
    Self::uK,
    Self::uk,
    Self::uL,
    Self::ul,
    Self::uM,
    Self::um,
    Self::uN,
    Self::un,
    Self::uO,
    Self::uo,
    Self::uP,
    Self::up,
    Self::uQ,
    Self::uq,
    Self::uR,
    Self::ur,
    Self::uS,
    Self::us,
    Self::uT,
    Self::ut,
    Self::uU,
    Self::uu,
    Self::uV,
    Self::uv,
    Self::uW,
    Self::uw,
    Self::uX,
    Self::ux,
    Self::uY,
    Self::uy,
    Self::uZ,
    Self::uz,
    Self::VA,
    Self::Va,
    Self::VB,
    Self::Vb,
    Self::VC,
    Self::Vc,
    Self::VD,
    Self::Vd,
    Self::VE,
    Self::Ve,
    Self::VF,
    Self::Vf,
    Self::VG,
    Self::Vg,
    Self::VH,
    Self::Vh,
    Self::VI,
    Self::Vi,
    Self::VJ,
    Self::Vj,
    Self::VK,
    Self::Vk,
    Self::VL,
    Self::Vl,
    Self::VM,
    Self::Vm,
    Self::VN,
    Self::Vn,
    Self::VO,
    Self::Vo,
    Self::VP,
    Self::Vp,
    Self::VQ,
    Self::Vq,
    Self::VR,
    Self::Vr,
    Self::VS,
    Self::Vs,
    Self::VT,
    Self::Vt,
    Self::VU,
    Self::Vu,
    Self::VV,
    Self::Vv,
    Self::VW,
    Self::Vw,
    Self::VX,
    Self::Vx,
    Self::VY,
    Self::Vy,
    Self::VZ,
    Self::Vz,
    Self::vA,
    Self::va,
    Self::vB,
    Self::vb,
    Self::vC,
    Self::vc,
    Self::vD,
    Self::vd,
    Self::vE,
    Self::ve,
    Self::vF,
    Self::vf,
    Self::vG,
    Self::vg,
    Self::vH,
    Self::vh,
    Self::vI,
    Self::vi,
    Self::vJ,
    Self::vj,
    Self::vK,
    Self::vk,
    Self::vL,
    Self::vl,
    Self::vM,
    Self::vm,
    Self::vN,
    Self::vn,
    Self::vO,
    Self::vo,
    Self::vP,
    Self::vp,
    Self::vQ,
    Self::vq,
    Self::vR,
    Self::vr,
    Self::vS,
    Self::vs,
    Self::vT,
    Self::vt,
    Self::vU,
    Self::vu,
    Self::vV,
    Self::vv,
    Self::vW,
    Self::vw,
    Self::vX,
    Self::vx,
    Self::vY,
    Self::vy,
    Self::vZ,
    Self::vz,
    Self::WA,
    Self::Wa,
    Self::WB,
    Self::Wb,
    Self::WC,
    Self::Wc,
    Self::WD,
    Self::Wd,
    Self::WE,
    Self::We,
    Self::WF,
    Self::Wf,
    Self::WG,
    Self::Wg,
    Self::WH,
    Self::Wh,
    Self::WI,
    Self::Wi,
    Self::WJ,
    Self::Wj,
    Self::WK,
    Self::Wk,
    Self::WL,
    Self::Wl,
    Self::WM,
    Self::Wm,
    Self::WN,
    Self::Wn,
    Self::WO,
    Self::Wo,
    Self::WP,
    Self::Wp,
    Self::WQ,
    Self::Wq,
    Self::WR,
    Self::Wr,
    Self::WS,
    Self::Ws,
    Self::WT,
    Self::Wt,
    Self::WU,
    Self::Wu,
    Self::WV,
    Self::Wv,
    Self::WW,
    Self::Ww,
    Self::WX,
    Self::Wx,
    Self::WY,
    Self::Wy,
    Self::WZ,
    Self::Wz,
    Self::wA,
    Self::wa,
    Self::wB,
    Self::wb,
    Self::wC,
    Self::wc,
    Self::wD,
    Self::wd,
    Self::wE,
    Self::we,
    Self::wF,
    Self::wf,
    Self::wG,
    Self::wg,
    Self::wH,
    Self::wh,
    Self::wI,
    Self::wi,
    Self::wJ,
    Self::wj,
    Self::wK,
    Self::wk,
    Self::wL,
    Self::wl,
    Self::wM,
    Self::wm,
    Self::wN,
    Self::wn,
    Self::wO,
    Self::wo,
    Self::wP,
    Self::wp,
    Self::wQ,
    Self::wq,
    Self::wR,
    Self::wr,
    Self::wS,
    Self::ws,
    Self::wT,
    Self::wt,
    Self::wU,
    Self::wu,
    Self::wV,
    Self::wv,
    Self::wW,
    Self::ww,
    Self::wX,
    Self::wx,
    Self::wY,
    Self::wy,
    Self::wZ,
    Self::wz,
    Self::XA,
    Self::Xa,
    Self::XB,
    Self::Xb,
    Self::XC,
    Self::Xc,
    Self::XD,
    Self::Xd,
    Self::XE,
    Self::Xe,
    Self::XF,
    Self::Xf,
    Self::XG,
    Self::Xg,
    Self::XH,
    Self::Xh,
    Self::XI,
    Self::Xi,
    Self::XJ,
    Self::Xj,
    Self::XK,
    Self::Xk,
    Self::XL,
    Self::Xl,
    Self::XM,
    Self::Xm,
    Self::XN,
    Self::Xn,
    Self::XO,
    Self::Xo,
    Self::XP,
    Self::Xp,
    Self::XQ,
    Self::Xq,
    Self::XR,
    Self::Xr,
    Self::XS,
    Self::Xs,
    Self::XT,
    Self::Xt,
    Self::XU,
    Self::Xu,
    Self::XV,
    Self::Xv,
    Self::XW,
    Self::Xw,
    Self::XX,
    Self::Xx,
    Self::XY,
    Self::Xy,
    Self::XZ,
    Self::Xz,
    Self::xA,
    Self::xa,
    Self::xB,
    Self::xb,
    Self::xC,
    Self::xc,
    Self::xD,
    Self::xd,
    Self::xE,
    Self::xe,
    Self::xF,
    Self::xf,
    Self::xG,
    Self::xg,
    Self::xH,
    Self::xh,
    Self::xI,
    Self::xi,
    Self::xJ,
    Self::xj,
    Self::xK,
    Self::xk,
    Self::xL,
    Self::xl,
    Self::xM,
    Self::xm,
    Self::xN,
    Self::xn,
    Self::xO,
    Self::xo,
    Self::xP,
    Self::xp,
    Self::xQ,
    Self::xq,
    Self::xR,
    Self::xr,
    Self::xS,
    Self::xs,
    Self::xT,
    Self::xt,
    Self::xU,
    Self::xu,
    Self::xV,
    Self::xv,
    Self::xW,
    Self::xw,
    Self::xX,
    Self::xx,
    Self::xY,
    Self::xy,
    Self::xZ,
    Self::xz,
    Self::YA,
    Self::Ya,
    Self::YB,
    Self::Yb,
    Self::YC,
    Self::Yc,
    Self::YD,
    Self::Yd,
    Self::YE,
    Self::Ye,
    Self::YF,
    Self::Yf,
    Self::YG,
    Self::Yg,
    Self::YH,
    Self::Yh,
    Self::YI,
    Self::Yi,
    Self::YJ,
    Self::Yj,
    Self::YK,
    Self::Yk,
    Self::YL,
    Self::Yl,
    Self::YM,
    Self::Ym,
    Self::YN,
    Self::Yn,
    Self::YO,
    Self::Yo,
    Self::YP,
    Self::Yp,
    Self::YQ,
    Self::Yq,
    Self::YR,
    Self::Yr,
    Self::YS,
    Self::Ys,
    Self::YT,
    Self::Yt,
    Self::YU,
    Self::Yu,
    Self::YV,
    Self::Yv,
    Self::YW,
    Self::Yw,
    Self::YX,
    Self::Yx,
    Self::YY,
    Self::Yy,
    Self::YZ,
    Self::Yz,
    Self::yA,
    Self::ya,
    Self::yB,
    Self::yb,
    Self::yC,
    Self::yc,
    Self::yD,
    Self::yd,
    Self::yE,
    Self::ye,
    Self::yF,
    Self::yf,
    Self::yG,
    Self::yg,
    Self::yH,
    Self::yh,
    Self::yI,
    Self::yi,
    Self::yJ,
    Self::yj,
    Self::yK,
    Self::yk,
    Self::yL,
    Self::yl,
    Self::yM,
    Self::ym,
    Self::yN,
    Self::yn,
    Self::yO,
    Self::yo,
    Self::yP,
    Self::yp,
    Self::yQ,
    Self::yq,
    Self::yR,
    Self::yr,
    Self::yS,
    Self::ys,
    Self::yT,
    Self::yt,
    Self::yU,
    Self::yu,
    Self::yV,
    Self::yv,
    Self::yW,
    Self::yw,
    Self::yX,
    Self::yx,
    Self::yY,
    Self::yy,
    Self::yZ,
    Self::yz,
    Self::ZA,
    Self::Za,
    Self::ZB,
    Self::Zb,
    Self::ZC,
    Self::Zc,
    Self::ZD,
    Self::Zd,
    Self::ZE,
    Self::Ze,
    Self::ZF,
    Self::Zf,
    Self::ZG,
    Self::Zg,
    Self::ZH,
    Self::Zh,
    Self::ZI,
    Self::Zi,
    Self::ZJ,
    Self::Zj,
    Self::ZK,
    Self::Zk,
    Self::ZL,
    Self::Zl,
    Self::ZM,
    Self::Zm,
    Self::ZN,
    Self::Zn,
    Self::ZO,
    Self::Zo,
    Self::ZP,
    Self::Zp,
    Self::ZQ,
    Self::Zq,
    Self::ZR,
    Self::Zr,
    Self::ZS,
    Self::Zs,
    Self::ZT,
    Self::Zt,
    Self::ZU,
    Self::Zu,
    Self::ZV,
    Self::Zv,
    Self::ZW,
    Self::Zw,
    Self::ZX,
    Self::Zx,
    Self::ZY,
    Self::Zy,
    Self::ZZ,
    Self::Zz,
    Self::zA,
    Self::za,
    Self::zB,
    Self::zb,
    Self::zC,
    Self::zc,
    Self::zD,
    Self::zd,
    Self::zE,
    Self::ze,
    Self::zF,
    Self::zf,
    Self::zG,
    Self::zg,
    Self::zH,
    Self::zh,
    Self::zI,
    Self::zi,
    Self::zJ,
    Self::zj,
    Self::zK,
    Self::zk,
    Self::zL,
    Self::zl,
    Self::zM,
    Self::zm,
    Self::zN,
    Self::zn,
    Self::zO,
    Self::zo,
    Self::zP,
    Self::zp,
    Self::zQ,
    Self::zq,
    Self::zR,
    Self::zr,
    Self::zS,
    Self::zs,
    Self::zT,
    Self::zt,
    Self::zU,
    Self::zu,
    Self::zV,
    Self::zv,
    Self::zW,
    Self::zw,
    Self::zX,
    Self::zx,
    Self::zY,
    Self::zy,
    Self::zZ,
    Self::zz,
    Self::aAA,
    Self::aAa,
    Self::aAB,
    Self::aAb,
    Self::aAC,
    Self::aAc,
    Self::aAD,
    Self::aAd,
    Self::aAE,
    Self::aAe,
    Self::aAF,
    Self::aAf,
    Self::aAG,
    Self::aAg,
    Self::aAH,
    Self::aAh,
    Self::aAI,
    Self::aAi,
    Self::aAJ,
    Self::aAj,
    Self::aAK,
    Self::aAk,
    Self::aAL,
    Self::aAl,
    Self::aAM,
    Self::aAm,
    Self::aAN,
    Self::aAn,
    Self::aAO,
    Self::aAo,
    Self::aAP,
    Self::aAp,
    Self::aAQ,
    Self::aAq,
    Self::aAR,
    Self::aAr,
    Self::aAS,
    Self::aAs,
    Self::aAT,
    Self::aAt,
    Self::aAU,
    Self::aAu,
    Self::aAV,
    Self::aAv,
    Self::aAW,
    Self::aAw,
    Self::aAX,
    Self::aAx,
    Self::aAY,
    Self::aAy,
    Self::aAZ,
    Self::aAz,
    Self::aaA,
    Self::aaa,
    Self::aaB,
    Self::aab,
    Self::aaC,
    Self::aac,
    Self::aaD,
    Self::aad,
    Self::aaE,
    Self::aae,
    Self::aaF,
    Self::aaf,
    Self::aaG,
    Self::aag,
    Self::aaH,
    Self::aah,
    Self::aaI,
    Self::aai,
    Self::aaJ,
    Self::aaj,
    Self::aaK,
    Self::aak,
    Self::aaL,
    Self::aal,
    Self::aaM,
    Self::aam,
    Self::aaN,
    Self::aan,
    Self::aaO,
    Self::aao,
    Self::aaP,
    Self::aap,
    Self::aaQ,
    Self::aaq,
    Self::aaR,
    Self::aar,
    Self::aaS,
    Self::aas,
    Self::aaT,
    Self::aat,
    Self::aaU,
    Self::aau,
    Self::aaV,
    Self::aav,
    Self::aaW,
    Self::aaw,
    Self::aaX,
    Self::aax,
    Self::aaY,
    Self::aay,
    Self::aaZ,
    Self::aaz,
    Self::aBA,
    Self::aBa,
    Self::aBB,
    Self::aBb,
    Self::aBC,
    Self::aBc,
    Self::aBD,
    Self::aBd,
    Self::aBE,
    Self::aBe,
    Self::aBF,
    Self::aBf,
    Self::aBG,
    Self::aBg,
    Self::aBH,
    Self::aBh,
    Self::aBI,
    Self::aBi,
    Self::aBJ,
    Self::aBj,
    Self::aBK,
    Self::aBk,
    Self::aBL,
    Self::aBl,
    Self::aBM,
    Self::aBm,
    Self::aBN,
    Self::aBn,
    Self::aBO,
    Self::aBo,
    Self::aBP,
    Self::aBp,
    Self::aBQ,
    Self::aBq,
    Self::aBR,
    Self::aBr,
    Self::aBS,
    Self::aBs,
    Self::aBT,
    Self::aBt,
    Self::aBU,
    Self::aBu,
    Self::aBV,
    Self::aBv,
    Self::aBW,
    Self::aBw,
    Self::aBX,
    Self::aBx,
    Self::aBY,
    Self::aBy,
    Self::aBZ,
    Self::aBz,
    Self::abA,
    Self::aba,
    Self::abB,
    Self::abb,
    Self::abC,
    Self::abc,
    Self::abD,
    Self::abd,
    Self::abE,
    Self::abe,
    Self::abF,
    Self::abf,
    Self::abG,
    Self::abg,
    Self::abH,
    Self::abh,
    Self::abI,
    Self::abi,
    Self::abJ,
    Self::abj,
    Self::abK,
    Self::abk,
    Self::abL,
    Self::abl,
    Self::abM,
    Self::abm,
    Self::abN,
    Self::abn,
    Self::abO,
    Self::abo,
    Self::abP,
    Self::abp,
    Self::abQ,
    Self::abq,
    Self::abR,
    Self::abr,
    Self::abS,
    Self::abs,
    Self::abT,
    Self::abt,
    Self::abU,
    Self::abu,
    Self::abV,
    Self::abv,
    Self::abW,
    Self::abw,
    Self::abX,
    Self::abx,
    Self::abY,
    Self::aby,
    Self::abZ,
    Self::abz,
    Self::aCA,
    Self::aCa,
    Self::aCB,
    Self::aCb,
    Self::aCC,
    Self::aCc,
    Self::aCD,
    Self::aCd,
    Self::aCE,
    Self::aCe,
    Self::aCF,
    Self::aCf,
    Self::aCG,
    Self::aCg,
    Self::aCH,
    Self::aCh,
    Self::aCI,
    Self::aCi,
    Self::aCJ,
    Self::aCj,
    Self::aCK,
    Self::aCk,
    Self::aCL,
    Self::aCl,
    Self::aCM,
    Self::aCm,
    Self::aCN,
    Self::aCn,
    Self::aCO,
    Self::aCo,
    Self::aCP,
    Self::aCp,
    Self::aCQ,
    Self::aCq,
    Self::aCR,
    Self::aCr,
    Self::aCS,
    Self::aCs,
    Self::aCT,
    Self::aCt,
    Self::aCU,
    Self::aCu,
    Self::aCV,
    Self::aCv,
    Self::aCW,
    Self::aCw,
    Self::aCX,
    Self::aCx,
    Self::aCY,
    Self::aCy,
    Self::aCZ,
    Self::aCz,
    Self::acA,
    Self::aca,
    Self::acB,
    Self::acb,
    Self::acC,
    Self::acc,
    Self::acD,
    Self::acd,
    Self::acE,
    Self::ace,
    Self::acF,
    Self::acf,
    Self::acG,
    Self::acg,
    Self::acH,
    Self::ach,
    Self::acI,
    Self::aci,
    Self::acJ,
    Self::acj,
    Self::acK,
    Self::ack,
    Self::acL,
    Self::acl,
    Self::acM,
    Self::acm,
    Self::acN,
    Self::acn,
    Self::acO,
    Self::aco,
    Self::acP,
    Self::acp,
    Self::acQ,
    Self::acq,
    Self::acR,
    Self::acr,
    Self::acS,
    Self::acs,
    Self::acT,
    Self::act,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::A => Some("A"),
      Self::a => Some("a"),
      Self::B => Some("B"),
      Self::b => Some("b"),
      Self::C => Some("C"),
      Self::c => Some("c"),
      Self::D => Some("D"),
      Self::d => Some("d"),
      Self::E => Some("E"),
      Self::e => Some("e"),
      Self::F => Some("F"),
      Self::f => Some("f"),
      Self::G => Some("G"),
      Self::g => Some("g"),
      Self::H => Some("H"),
      Self::h => Some("h"),
      Self::I => Some("I"),
      Self::i => Some("i"),
      Self::J => Some("J"),
      Self::j => Some("j"),
      Self::K => Some("K"),
      Self::k => Some("k"),
      Self::L => Some("L"),
      Self::l => Some("l"),
      Self::M => Some("M"),
      Self::m => Some("m"),
      Self::N => Some("N"),
      Self::n => Some("n"),
      Self::O => Some("O"),
      Self::o => Some("o"),
      Self::P => Some("P"),
      Self::p => Some("p"),
      Self::Q => Some("Q"),
      Self::q => Some("q"),
      Self::R => Some("R"),
      Self::r => Some("r"),
      Self::S => Some("S"),
      Self::s => Some("s"),
      Self::T => Some("T"),
      Self::t => Some("t"),
      Self::U => Some("U"),
      Self::u => Some("u"),
      Self::V => Some("V"),
      Self::v => Some("v"),
      Self::W => Some("W"),
      Self::w => Some("w"),
      Self::X => Some("X"),
      Self::x => Some("x"),
      Self::Y => Some("Y"),
      Self::y => Some("y"),
      Self::Z => Some("Z"),
      Self::z => Some("z"),
      Self::aA => Some("aA"),
      Self::aa => Some("aa"),
      Self::aB => Some("aB"),
      Self::ab => Some("ab"),
      Self::aC => Some("aC"),
      Self::ac => Some("ac"),
      Self::aD => Some("aD"),
      Self::ad => Some("ad"),
      Self::aE => Some("aE"),
      Self::ae => Some("ae"),
      Self::aF => Some("aF"),
      Self::af => Some("af"),
      Self::aG => Some("aG"),
      Self::ag => Some("ag"),
      Self::aH => Some("aH"),
      Self::ah => Some("ah"),
      Self::aI => Some("aI"),
      Self::ai => Some("ai"),
      Self::aJ => Some("aJ"),
      Self::aj => Some("aj"),
      Self::aK => Some("aK"),
      Self::ak => Some("ak"),
      Self::aL => Some("aL"),
      Self::al => Some("al"),
      Self::aM => Some("aM"),
      Self::am => Some("am"),
      Self::aN => Some("aN"),
      Self::an => Some("an"),
      Self::aO => Some("aO"),
      Self::ao => Some("ao"),
      Self::aP => Some("aP"),
      Self::ap => Some("ap"),
      Self::aQ => Some("aQ"),
      Self::aq => Some("aq"),
      Self::aR => Some("aR"),
      Self::ar => Some("ar"),
      Self::aS => Some("aS"),
      Self::as_ => Some("as_"),
      Self::aT => Some("aT"),
      Self::at => Some("at"),
      Self::aU => Some("aU"),
      Self::au => Some("au"),
      Self::aV => Some("aV"),
      Self::av => Some("av"),
      Self::aW => Some("aW"),
      Self::aw => Some("aw"),
      Self::aX => Some("aX"),
      Self::ax => Some("ax"),
      Self::aY => Some("aY"),
      Self::ay => Some("ay"),
      Self::aZ => Some("aZ"),
      Self::az => Some("az"),
      Self::BA => Some("BA"),
      Self::Ba => Some("Ba"),
      Self::BB => Some("BB"),
      Self::Bb => Some("Bb"),
      Self::BC => Some("BC"),
      Self::Bc => Some("Bc"),
      Self::BD => Some("BD"),
      Self::Bd => Some("Bd"),
      Self::BE => Some("BE"),
      Self::Be => Some("Be"),
      Self::BF => Some("BF"),
      Self::Bf => Some("Bf"),
      Self::BG => Some("BG"),
      Self::Bg => Some("Bg"),
      Self::BH => Some("BH"),
      Self::Bh => Some("Bh"),
      Self::BI => Some("BI"),
      Self::Bi => Some("Bi"),
      Self::BJ => Some("BJ"),
      Self::Bj => Some("Bj"),
      Self::BK => Some("BK"),
      Self::Bk => Some("Bk"),
      Self::BL => Some("BL"),
      Self::Bl => Some("Bl"),
      Self::BM => Some("BM"),
      Self::Bm => Some("Bm"),
      Self::BN => Some("BN"),
      Self::Bn => Some("Bn"),
      Self::BO => Some("BO"),
      Self::Bo => Some("Bo"),
      Self::BP => Some("BP"),
      Self::Bp => Some("Bp"),
      Self::BQ => Some("BQ"),
      Self::Bq => Some("Bq"),
      Self::BR => Some("BR"),
      Self::Br => Some("Br"),
      Self::BS => Some("BS"),
      Self::Bs => Some("Bs"),
      Self::BT => Some("BT"),
      Self::Bt => Some("Bt"),
      Self::BU => Some("BU"),
      Self::Bu => Some("Bu"),
      Self::BV => Some("BV"),
      Self::Bv => Some("Bv"),
      Self::BW => Some("BW"),
      Self::Bw => Some("Bw"),
      Self::BX => Some("BX"),
      Self::Bx => Some("Bx"),
      Self::BY => Some("BY"),
      Self::By => Some("By"),
      Self::BZ => Some("BZ"),
      Self::Bz => Some("Bz"),
      Self::bA => Some("bA"),
      Self::ba => Some("ba"),
      Self::bB => Some("bB"),
      Self::bb => Some("bb"),
      Self::bC => Some("bC"),
      Self::bc => Some("bc"),
      Self::bD => Some("bD"),
      Self::bd => Some("bd"),
      Self::bE => Some("bE"),
      Self::be => Some("be"),
      Self::bF => Some("bF"),
      Self::bf => Some("bf"),
      Self::bG => Some("bG"),
      Self::bg => Some("bg"),
      Self::bH => Some("bH"),
      Self::bh => Some("bh"),
      Self::bI => Some("bI"),
      Self::bi => Some("bi"),
      Self::bJ => Some("bJ"),
      Self::bj => Some("bj"),
      Self::bK => Some("bK"),
      Self::bk => Some("bk"),
      Self::bL => Some("bL"),
      Self::bl => Some("bl"),
      Self::bM => Some("bM"),
      Self::bm => Some("bm"),
      Self::bN => Some("bN"),
      Self::bn => Some("bn"),
      Self::bO => Some("bO"),
      Self::bo => Some("bo"),
      Self::bP => Some("bP"),
      Self::bp => Some("bp"),
      Self::bQ => Some("bQ"),
      Self::bq => Some("bq"),
      Self::bR => Some("bR"),
      Self::br => Some("br"),
      Self::bS => Some("bS"),
      Self::bs => Some("bs"),
      Self::bT => Some("bT"),
      Self::bt => Some("bt"),
      Self::bU => Some("bU"),
      Self::bu => Some("bu"),
      Self::bV => Some("bV"),
      Self::bv => Some("bv"),
      Self::bW => Some("bW"),
      Self::bw => Some("bw"),
      Self::bX => Some("bX"),
      Self::bx => Some("bx"),
      Self::bY => Some("bY"),
      Self::by => Some("by"),
      Self::bZ => Some("bZ"),
      Self::bz => Some("bz"),
      Self::CA => Some("CA"),
      Self::Ca => Some("Ca"),
      Self::CB => Some("CB"),
      Self::Cb => Some("Cb"),
      Self::CC => Some("CC"),
      Self::Cc => Some("Cc"),
      Self::CD => Some("CD"),
      Self::Cd => Some("Cd"),
      Self::CE => Some("CE"),
      Self::Ce => Some("Ce"),
      Self::CF => Some("CF"),
      Self::Cf => Some("Cf"),
      Self::CG => Some("CG"),
      Self::Cg => Some("Cg"),
      Self::CH => Some("CH"),
      Self::Ch => Some("Ch"),
      Self::CI => Some("CI"),
      Self::Ci => Some("Ci"),
      Self::CJ => Some("CJ"),
      Self::Cj => Some("Cj"),
      Self::CK => Some("CK"),
      Self::Ck => Some("Ck"),
      Self::CL => Some("CL"),
      Self::Cl => Some("Cl"),
      Self::CM => Some("CM"),
      Self::Cm => Some("Cm"),
      Self::CN => Some("CN"),
      Self::Cn => Some("Cn"),
      Self::CO => Some("CO"),
      Self::Co => Some("Co"),
      Self::CP => Some("CP"),
      Self::Cp => Some("Cp"),
      Self::CQ => Some("CQ"),
      Self::Cq => Some("Cq"),
      Self::CR => Some("CR"),
      Self::Cr => Some("Cr"),
      Self::CS => Some("CS"),
      Self::Cs => Some("Cs"),
      Self::CT => Some("CT"),
      Self::Ct => Some("Ct"),
      Self::CU => Some("CU"),
      Self::Cu => Some("Cu"),
      Self::CV => Some("CV"),
      Self::Cv => Some("Cv"),
      Self::CW => Some("CW"),
      Self::Cw => Some("Cw"),
      Self::CX => Some("CX"),
      Self::Cx => Some("Cx"),
      Self::CY => Some("CY"),
      Self::Cy => Some("Cy"),
      Self::CZ => Some("CZ"),
      Self::Cz => Some("Cz"),
      Self::cA => Some("cA"),
      Self::ca => Some("ca"),
      Self::cB => Some("cB"),
      Self::cb => Some("cb"),
      Self::cC => Some("cC"),
      Self::cc => Some("cc"),
      Self::cD => Some("cD"),
      Self::cd => Some("cd"),
      Self::cE => Some("cE"),
      Self::ce => Some("ce"),
      Self::cF => Some("cF"),
      Self::cf => Some("cf"),
      Self::cG => Some("cG"),
      Self::cg => Some("cg"),
      Self::cH => Some("cH"),
      Self::ch => Some("ch"),
      Self::cI => Some("cI"),
      Self::ci => Some("ci"),
      Self::cJ => Some("cJ"),
      Self::cj => Some("cj"),
      Self::cK => Some("cK"),
      Self::ck => Some("ck"),
      Self::cL => Some("cL"),
      Self::cl => Some("cl"),
      Self::cM => Some("cM"),
      Self::cm => Some("cm"),
      Self::cN => Some("cN"),
      Self::cn => Some("cn"),
      Self::cO => Some("cO"),
      Self::co => Some("co"),
      Self::cP => Some("cP"),
      Self::cp => Some("cp"),
      Self::cQ => Some("cQ"),
      Self::cq => Some("cq"),
      Self::cR => Some("cR"),
      Self::cr => Some("cr"),
      Self::cS => Some("cS"),
      Self::cs => Some("cs"),
      Self::cT => Some("cT"),
      Self::ct => Some("ct"),
      Self::cU => Some("cU"),
      Self::cu => Some("cu"),
      Self::cV => Some("cV"),
      Self::cv => Some("cv"),
      Self::cW => Some("cW"),
      Self::cw => Some("cw"),
      Self::cX => Some("cX"),
      Self::cx => Some("cx"),
      Self::cY => Some("cY"),
      Self::cy => Some("cy"),
      Self::cZ => Some("cZ"),
      Self::cz => Some("cz"),
      Self::DA => Some("DA"),
      Self::Da => Some("Da"),
      Self::DB => Some("DB"),
      Self::Db => Some("Db"),
      Self::DC => Some("DC"),
      Self::Dc => Some("Dc"),
      Self::DD => Some("DD"),
      Self::Dd => Some("Dd"),
      Self::DE => Some("DE"),
      Self::De => Some("De"),
      Self::DF => Some("DF"),
      Self::Df => Some("Df"),
      Self::DG => Some("DG"),
      Self::Dg => Some("Dg"),
      Self::DH => Some("DH"),
      Self::Dh => Some("Dh"),
      Self::DI => Some("DI"),
      Self::Di => Some("Di"),
      Self::DJ => Some("DJ"),
      Self::Dj => Some("Dj"),
      Self::DK => Some("DK"),
      Self::Dk => Some("Dk"),
      Self::DL => Some("DL"),
      Self::Dl => Some("Dl"),
      Self::DM => Some("DM"),
      Self::Dm => Some("Dm"),
      Self::DN => Some("DN"),
      Self::Dn => Some("Dn"),
      Self::DO => Some("DO"),
      Self::Do => Some("Do"),
      Self::DP => Some("DP"),
      Self::Dp => Some("Dp"),
      Self::DQ => Some("DQ"),
      Self::Dq => Some("Dq"),
      Self::DR => Some("DR"),
      Self::Dr => Some("Dr"),
      Self::DS => Some("DS"),
      Self::Ds => Some("Ds"),
      Self::DT => Some("DT"),
      Self::Dt => Some("Dt"),
      Self::DU => Some("DU"),
      Self::Du => Some("Du"),
      Self::DV => Some("DV"),
      Self::Dv => Some("Dv"),
      Self::DW => Some("DW"),
      Self::Dw => Some("Dw"),
      Self::DX => Some("DX"),
      Self::Dx => Some("Dx"),
      Self::DY => Some("DY"),
      Self::Dy => Some("Dy"),
      Self::DZ => Some("DZ"),
      Self::Dz => Some("Dz"),
      Self::dA => Some("dA"),
      Self::da => Some("da"),
      Self::dB => Some("dB"),
      Self::db => Some("db"),
      Self::dC => Some("dC"),
      Self::dc => Some("dc"),
      Self::dD => Some("dD"),
      Self::dd => Some("dd"),
      Self::dE => Some("dE"),
      Self::de => Some("de"),
      Self::dF => Some("dF"),
      Self::df => Some("df"),
      Self::dG => Some("dG"),
      Self::dg => Some("dg"),
      Self::dH => Some("dH"),
      Self::dh => Some("dh"),
      Self::dI => Some("dI"),
      Self::di => Some("di"),
      Self::dJ => Some("dJ"),
      Self::dj => Some("dj"),
      Self::dK => Some("dK"),
      Self::dk => Some("dk"),
      Self::dL => Some("dL"),
      Self::dl => Some("dl"),
      Self::dM => Some("dM"),
      Self::dm => Some("dm"),
      Self::dN => Some("dN"),
      Self::dn => Some("dn"),
      Self::dO => Some("dO"),
      Self::do_ => Some("do_"),
      Self::dP => Some("dP"),
      Self::dp => Some("dp"),
      Self::dQ => Some("dQ"),
      Self::dq => Some("dq"),
      Self::dR => Some("dR"),
      Self::dr => Some("dr"),
      Self::dS => Some("dS"),
      Self::ds => Some("ds"),
      Self::dT => Some("dT"),
      Self::dt => Some("dt"),
      Self::dU => Some("dU"),
      Self::du => Some("du"),
      Self::dV => Some("dV"),
      Self::dv => Some("dv"),
      Self::dW => Some("dW"),
      Self::dw => Some("dw"),
      Self::dX => Some("dX"),
      Self::dx => Some("dx"),
      Self::dY => Some("dY"),
      Self::dy => Some("dy"),
      Self::dZ => Some("dZ"),
      Self::dz => Some("dz"),
      Self::EA => Some("EA"),
      Self::Ea => Some("Ea"),
      Self::EB => Some("EB"),
      Self::Eb => Some("Eb"),
      Self::EC => Some("EC"),
      Self::Ec => Some("Ec"),
      Self::ED => Some("ED"),
      Self::Ed => Some("Ed"),
      Self::EE => Some("EE"),
      Self::Ee => Some("Ee"),
      Self::EF => Some("EF"),
      Self::Ef => Some("Ef"),
      Self::EG => Some("EG"),
      Self::Eg => Some("Eg"),
      Self::EH => Some("EH"),
      Self::Eh => Some("Eh"),
      Self::EI => Some("EI"),
      Self::Ei => Some("Ei"),
      Self::EJ => Some("EJ"),
      Self::Ej => Some("Ej"),
      Self::EK => Some("EK"),
      Self::Ek => Some("Ek"),
      Self::EL => Some("EL"),
      Self::El => Some("El"),
      Self::EM => Some("EM"),
      Self::Em => Some("Em"),
      Self::EN => Some("EN"),
      Self::En => Some("En"),
      Self::EO => Some("EO"),
      Self::Eo => Some("Eo"),
      Self::EP => Some("EP"),
      Self::Ep => Some("Ep"),
      Self::EQ => Some("EQ"),
      Self::Eq => Some("Eq"),
      Self::ER => Some("ER"),
      Self::Er => Some("Er"),
      Self::ES => Some("ES"),
      Self::Es => Some("Es"),
      Self::ET => Some("ET"),
      Self::Et => Some("Et"),
      Self::EU => Some("EU"),
      Self::Eu => Some("Eu"),
      Self::EV => Some("EV"),
      Self::Ev => Some("Ev"),
      Self::EW => Some("EW"),
      Self::Ew => Some("Ew"),
      Self::EX => Some("EX"),
      Self::Ex => Some("Ex"),
      Self::EY => Some("EY"),
      Self::Ey => Some("Ey"),
      Self::EZ => Some("EZ"),
      Self::Ez => Some("Ez"),
      Self::eA => Some("eA"),
      Self::ea => Some("ea"),
      Self::eB => Some("eB"),
      Self::eb => Some("eb"),
      Self::eC => Some("eC"),
      Self::ec => Some("ec"),
      Self::eD => Some("eD"),
      Self::ed => Some("ed"),
      Self::eE => Some("eE"),
      Self::ee => Some("ee"),
      Self::eF => Some("eF"),
      Self::ef => Some("ef"),
      Self::eG => Some("eG"),
      Self::eg => Some("eg"),
      Self::eH => Some("eH"),
      Self::eh => Some("eh"),
      Self::eI => Some("eI"),
      Self::ei => Some("ei"),
      Self::eJ => Some("eJ"),
      Self::ej => Some("ej"),
      Self::eK => Some("eK"),
      Self::ek => Some("ek"),
      Self::eL => Some("eL"),
      Self::el => Some("el"),
      Self::eM => Some("eM"),
      Self::em => Some("em"),
      Self::eN => Some("eN"),
      Self::en => Some("en"),
      Self::eO => Some("eO"),
      Self::eo => Some("eo"),
      Self::eP => Some("eP"),
      Self::ep => Some("ep"),
      Self::eQ => Some("eQ"),
      Self::eq => Some("eq"),
      Self::eR => Some("eR"),
      Self::er => Some("er"),
      Self::eS => Some("eS"),
      Self::es => Some("es"),
      Self::eT => Some("eT"),
      Self::et => Some("et"),
      Self::eU => Some("eU"),
      Self::eu => Some("eu"),
      Self::eV => Some("eV"),
      Self::ev => Some("ev"),
      Self::eW => Some("eW"),
      Self::ew => Some("ew"),
      Self::eX => Some("eX"),
      Self::ex => Some("ex"),
      Self::eY => Some("eY"),
      Self::ey => Some("ey"),
      Self::eZ => Some("eZ"),
      Self::ez => Some("ez"),
      Self::FA => Some("FA"),
      Self::Fa => Some("Fa"),
      Self::FB => Some("FB"),
      Self::Fb => Some("Fb"),
      Self::FC => Some("FC"),
      Self::Fc => Some("Fc"),
      Self::FD => Some("FD"),
      Self::Fd => Some("Fd"),
      Self::FE => Some("FE"),
      Self::Fe => Some("Fe"),
      Self::FF => Some("FF"),
      Self::Ff => Some("Ff"),
      Self::FG => Some("FG"),
      Self::Fg => Some("Fg"),
      Self::FH => Some("FH"),
      Self::Fh => Some("Fh"),
      Self::FI => Some("FI"),
      Self::Fi => Some("Fi"),
      Self::FJ => Some("FJ"),
      Self::Fj => Some("Fj"),
      Self::FK => Some("FK"),
      Self::Fk => Some("Fk"),
      Self::FL => Some("FL"),
      Self::Fl => Some("Fl"),
      Self::FM => Some("FM"),
      Self::Fm => Some("Fm"),
      Self::FN => Some("FN"),
      Self::Fn => Some("Fn"),
      Self::FO => Some("FO"),
      Self::Fo => Some("Fo"),
      Self::FP => Some("FP"),
      Self::Fp => Some("Fp"),
      Self::FQ => Some("FQ"),
      Self::Fq => Some("Fq"),
      Self::FR => Some("FR"),
      Self::Fr => Some("Fr"),
      Self::FS => Some("FS"),
      Self::Fs => Some("Fs"),
      Self::FT => Some("FT"),
      Self::Ft => Some("Ft"),
      Self::FU => Some("FU"),
      Self::Fu => Some("Fu"),
      Self::FV => Some("FV"),
      Self::Fv => Some("Fv"),
      Self::FW => Some("FW"),
      Self::Fw => Some("Fw"),
      Self::FX => Some("FX"),
      Self::Fx => Some("Fx"),
      Self::FY => Some("FY"),
      Self::Fy => Some("Fy"),
      Self::FZ => Some("FZ"),
      Self::Fz => Some("Fz"),
      Self::fA => Some("fA"),
      Self::fa => Some("fa"),
      Self::fB => Some("fB"),
      Self::fb => Some("fb"),
      Self::fC => Some("fC"),
      Self::fc => Some("fc"),
      Self::fD => Some("fD"),
      Self::fd => Some("fd"),
      Self::fE => Some("fE"),
      Self::fe => Some("fe"),
      Self::fF => Some("fF"),
      Self::ff => Some("ff"),
      Self::fG => Some("fG"),
      Self::fg => Some("fg"),
      Self::fH => Some("fH"),
      Self::fh => Some("fh"),
      Self::fI => Some("fI"),
      Self::fi => Some("fi"),
      Self::fJ => Some("fJ"),
      Self::fj => Some("fj"),
      Self::fK => Some("fK"),
      Self::fk => Some("fk"),
      Self::fL => Some("fL"),
      Self::fl => Some("fl"),
      Self::fM => Some("fM"),
      Self::fm => Some("fm"),
      Self::fN => Some("fN"),
      Self::fn_ => Some("fn_"),
      Self::fO => Some("fO"),
      Self::fo => Some("fo"),
      Self::fP => Some("fP"),
      Self::fp => Some("fp"),
      Self::fQ => Some("fQ"),
      Self::fq => Some("fq"),
      Self::fR => Some("fR"),
      Self::fr => Some("fr"),
      Self::fS => Some("fS"),
      Self::fs => Some("fs"),
      Self::fT => Some("fT"),
      Self::ft => Some("ft"),
      Self::fU => Some("fU"),
      Self::fu => Some("fu"),
      Self::fV => Some("fV"),
      Self::fv => Some("fv"),
      Self::fW => Some("fW"),
      Self::fw => Some("fw"),
      Self::fX => Some("fX"),
      Self::fx => Some("fx"),
      Self::fY => Some("fY"),
      Self::fy => Some("fy"),
      Self::fZ => Some("fZ"),
      Self::fz => Some("fz"),
      Self::GA => Some("GA"),
      Self::Ga => Some("Ga"),
      Self::GB => Some("GB"),
      Self::Gb => Some("Gb"),
      Self::GC => Some("GC"),
      Self::Gc => Some("Gc"),
      Self::GD => Some("GD"),
      Self::Gd => Some("Gd"),
      Self::GE => Some("GE"),
      Self::Ge => Some("Ge"),
      Self::GF => Some("GF"),
      Self::Gf => Some("Gf"),
      Self::GG => Some("GG"),
      Self::Gg => Some("Gg"),
      Self::GH => Some("GH"),
      Self::Gh => Some("Gh"),
      Self::GI => Some("GI"),
      Self::Gi => Some("Gi"),
      Self::GJ => Some("GJ"),
      Self::Gj => Some("Gj"),
      Self::GK => Some("GK"),
      Self::Gk => Some("Gk"),
      Self::GL => Some("GL"),
      Self::Gl => Some("Gl"),
      Self::GM => Some("GM"),
      Self::Gm => Some("Gm"),
      Self::GN => Some("GN"),
      Self::Gn => Some("Gn"),
      Self::GO => Some("GO"),
      Self::Go => Some("Go"),
      Self::GP => Some("GP"),
      Self::Gp => Some("Gp"),
      Self::GQ => Some("GQ"),
      Self::Gq => Some("Gq"),
      Self::GR => Some("GR"),
      Self::Gr => Some("Gr"),
      Self::GS => Some("GS"),
      Self::Gs => Some("Gs"),
      Self::GT => Some("GT"),
      Self::Gt => Some("Gt"),
      Self::GU => Some("GU"),
      Self::Gu => Some("Gu"),
      Self::GV => Some("GV"),
      Self::Gv => Some("Gv"),
      Self::GW => Some("GW"),
      Self::Gw => Some("Gw"),
      Self::GX => Some("GX"),
      Self::Gx => Some("Gx"),
      Self::GY => Some("GY"),
      Self::Gy => Some("Gy"),
      Self::GZ => Some("GZ"),
      Self::Gz => Some("Gz"),
      Self::gA => Some("gA"),
      Self::ga => Some("ga"),
      Self::gB => Some("gB"),
      Self::gb => Some("gb"),
      Self::gC => Some("gC"),
      Self::gc => Some("gc"),
      Self::gD => Some("gD"),
      Self::gd => Some("gd"),
      Self::gE => Some("gE"),
      Self::ge => Some("ge"),
      Self::gF => Some("gF"),
      Self::gf => Some("gf"),
      Self::gG => Some("gG"),
      Self::gg => Some("gg"),
      Self::gH => Some("gH"),
      Self::gh => Some("gh"),
      Self::gI => Some("gI"),
      Self::gi => Some("gi"),
      Self::gJ => Some("gJ"),
      Self::gj => Some("gj"),
      Self::gK => Some("gK"),
      Self::gk => Some("gk"),
      Self::gL => Some("gL"),
      Self::gl => Some("gl"),
      Self::gM => Some("gM"),
      Self::gm => Some("gm"),
      Self::gN => Some("gN"),
      Self::gn => Some("gn"),
      Self::gO => Some("gO"),
      Self::go => Some("go"),
      Self::gP => Some("gP"),
      Self::gp => Some("gp"),
      Self::gQ => Some("gQ"),
      Self::gq => Some("gq"),
      Self::gR => Some("gR"),
      Self::gr => Some("gr"),
      Self::gS => Some("gS"),
      Self::gs => Some("gs"),
      Self::gT => Some("gT"),
      Self::gt => Some("gt"),
      Self::gU => Some("gU"),
      Self::gu => Some("gu"),
      Self::gV => Some("gV"),
      Self::gv => Some("gv"),
      Self::gW => Some("gW"),
      Self::gw => Some("gw"),
      Self::gX => Some("gX"),
      Self::gx => Some("gx"),
      Self::gY => Some("gY"),
      Self::gy => Some("gy"),
      Self::gZ => Some("gZ"),
      Self::gz => Some("gz"),
      Self::HA => Some("HA"),
      Self::Ha => Some("Ha"),
      Self::HB => Some("HB"),
      Self::Hb => Some("Hb"),
      Self::HC => Some("HC"),
      Self::Hc => Some("Hc"),
      Self::HD => Some("HD"),
      Self::Hd => Some("Hd"),
      Self::HE => Some("HE"),
      Self::He => Some("He"),
      Self::HF => Some("HF"),
      Self::Hf => Some("Hf"),
      Self::HG => Some("HG"),
      Self::Hg => Some("Hg"),
      Self::HH => Some("HH"),
      Self::Hh => Some("Hh"),
      Self::HI => Some("HI"),
      Self::Hi => Some("Hi"),
      Self::HJ => Some("HJ"),
      Self::Hj => Some("Hj"),
      Self::HK => Some("HK"),
      Self::Hk => Some("Hk"),
      Self::HL => Some("HL"),
      Self::Hl => Some("Hl"),
      Self::HM => Some("HM"),
      Self::Hm => Some("Hm"),
      Self::HN => Some("HN"),
      Self::Hn => Some("Hn"),
      Self::HO => Some("HO"),
      Self::Ho => Some("Ho"),
      Self::HP => Some("HP"),
      Self::Hp => Some("Hp"),
      Self::HQ => Some("HQ"),
      Self::Hq => Some("Hq"),
      Self::HR => Some("HR"),
      Self::Hr => Some("Hr"),
      Self::HS => Some("HS"),
      Self::Hs => Some("Hs"),
      Self::HT => Some("HT"),
      Self::Ht => Some("Ht"),
      Self::HU => Some("HU"),
      Self::Hu => Some("Hu"),
      Self::HV => Some("HV"),
      Self::Hv => Some("Hv"),
      Self::HW => Some("HW"),
      Self::Hw => Some("Hw"),
      Self::HX => Some("HX"),
      Self::Hx => Some("Hx"),
      Self::HY => Some("HY"),
      Self::Hy => Some("Hy"),
      Self::HZ => Some("HZ"),
      Self::Hz => Some("Hz"),
      Self::hA => Some("hA"),
      Self::ha => Some("ha"),
      Self::hB => Some("hB"),
      Self::hb => Some("hb"),
      Self::hC => Some("hC"),
      Self::hc => Some("hc"),
      Self::hD => Some("hD"),
      Self::hd => Some("hd"),
      Self::hE => Some("hE"),
      Self::he => Some("he"),
      Self::hF => Some("hF"),
      Self::hf => Some("hf"),
      Self::hG => Some("hG"),
      Self::hg => Some("hg"),
      Self::hH => Some("hH"),
      Self::hh => Some("hh"),
      Self::hI => Some("hI"),
      Self::hi => Some("hi"),
      Self::hJ => Some("hJ"),
      Self::hj => Some("hj"),
      Self::hK => Some("hK"),
      Self::hk => Some("hk"),
      Self::hL => Some("hL"),
      Self::hl => Some("hl"),
      Self::hM => Some("hM"),
      Self::hm => Some("hm"),
      Self::hN => Some("hN"),
      Self::hn => Some("hn"),
      Self::hO => Some("hO"),
      Self::ho => Some("ho"),
      Self::hP => Some("hP"),
      Self::hp => Some("hp"),
      Self::hQ => Some("hQ"),
      Self::hq => Some("hq"),
      Self::hR => Some("hR"),
      Self::hr => Some("hr"),
      Self::hS => Some("hS"),
      Self::hs => Some("hs"),
      Self::hT => Some("hT"),
      Self::ht => Some("ht"),
      Self::hU => Some("hU"),
      Self::hu => Some("hu"),
      Self::hV => Some("hV"),
      Self::hv => Some("hv"),
      Self::hW => Some("hW"),
      Self::hw => Some("hw"),
      Self::hX => Some("hX"),
      Self::hx => Some("hx"),
      Self::hY => Some("hY"),
      Self::hy => Some("hy"),
      Self::hZ => Some("hZ"),
      Self::hz => Some("hz"),
      Self::IA => Some("IA"),
      Self::Ia => Some("Ia"),
      Self::IB => Some("IB"),
      Self::Ib => Some("Ib"),
      Self::IC => Some("IC"),
      Self::Ic => Some("Ic"),
      Self::ID => Some("ID"),
      Self::Id => Some("Id"),
      Self::IE => Some("IE"),
      Self::Ie => Some("Ie"),
      Self::IF => Some("IF"),
      Self::If => Some("If"),
      Self::IG => Some("IG"),
      Self::Ig => Some("Ig"),
      Self::IH => Some("IH"),
      Self::Ih => Some("Ih"),
      Self::II => Some("II"),
      Self::Ii => Some("Ii"),
      Self::IJ => Some("IJ"),
      Self::Ij => Some("Ij"),
      Self::IK => Some("IK"),
      Self::Ik => Some("Ik"),
      Self::IL => Some("IL"),
      Self::Il => Some("Il"),
      Self::IM => Some("IM"),
      Self::Im => Some("Im"),
      Self::IN => Some("IN"),
      Self::In => Some("In"),
      Self::IO => Some("IO"),
      Self::Io => Some("Io"),
      Self::IP => Some("IP"),
      Self::Ip => Some("Ip"),
      Self::IQ => Some("IQ"),
      Self::Iq => Some("Iq"),
      Self::IR => Some("IR"),
      Self::Ir => Some("Ir"),
      Self::IS => Some("IS"),
      Self::Is => Some("Is"),
      Self::IT => Some("IT"),
      Self::It => Some("It"),
      Self::IU => Some("IU"),
      Self::Iu => Some("Iu"),
      Self::IV => Some("IV"),
      Self::Iv => Some("Iv"),
      Self::IW => Some("IW"),
      Self::Iw => Some("Iw"),
      Self::IX => Some("IX"),
      Self::Ix => Some("Ix"),
      Self::IY => Some("IY"),
      Self::Iy => Some("Iy"),
      Self::IZ => Some("IZ"),
      Self::Iz => Some("Iz"),
      Self::iA => Some("iA"),
      Self::ia => Some("ia"),
      Self::iB => Some("iB"),
      Self::ib => Some("ib"),
      Self::iC => Some("iC"),
      Self::ic => Some("ic"),
      Self::iD => Some("iD"),
      Self::id => Some("id"),
      Self::iE => Some("iE"),
      Self::ie => Some("ie"),
      Self::iF => Some("iF"),
      Self::if_ => Some("if_"),
      Self::iG => Some("iG"),
      Self::ig => Some("ig"),
      Self::iH => Some("iH"),
      Self::ih => Some("ih"),
      Self::iI => Some("iI"),
      Self::ii => Some("ii"),
      Self::iJ => Some("iJ"),
      Self::ij => Some("ij"),
      Self::iK => Some("iK"),
      Self::ik => Some("ik"),
      Self::iL => Some("iL"),
      Self::il => Some("il"),
      Self::iM => Some("iM"),
      Self::im => Some("im"),
      Self::iN => Some("iN"),
      Self::in_ => Some("in_"),
      Self::iO => Some("iO"),
      Self::io => Some("io"),
      Self::iP => Some("iP"),
      Self::ip => Some("ip"),
      Self::iQ => Some("iQ"),
      Self::iq => Some("iq"),
      Self::iR => Some("iR"),
      Self::ir => Some("ir"),
      Self::iS => Some("iS"),
      Self::is => Some("is"),
      Self::iT => Some("iT"),
      Self::it => Some("it"),
      Self::iU => Some("iU"),
      Self::iu => Some("iu"),
      Self::iV => Some("iV"),
      Self::iv => Some("iv"),
      Self::iW => Some("iW"),
      Self::iw => Some("iw"),
      Self::iX => Some("iX"),
      Self::ix => Some("ix"),
      Self::iY => Some("iY"),
      Self::iy => Some("iy"),
      Self::iZ => Some("iZ"),
      Self::iz => Some("iz"),
      Self::JA => Some("JA"),
      Self::Ja => Some("Ja"),
      Self::JB => Some("JB"),
      Self::Jb => Some("Jb"),
      Self::JC => Some("JC"),
      Self::Jc => Some("Jc"),
      Self::JD => Some("JD"),
      Self::Jd => Some("Jd"),
      Self::JE => Some("JE"),
      Self::Je => Some("Je"),
      Self::JF => Some("JF"),
      Self::Jf => Some("Jf"),
      Self::JG => Some("JG"),
      Self::Jg => Some("Jg"),
      Self::JH => Some("JH"),
      Self::Jh => Some("Jh"),
      Self::JI => Some("JI"),
      Self::Ji => Some("Ji"),
      Self::JJ => Some("JJ"),
      Self::Jj => Some("Jj"),
      Self::JK => Some("JK"),
      Self::Jk => Some("Jk"),
      Self::JL => Some("JL"),
      Self::Jl => Some("Jl"),
      Self::JM => Some("JM"),
      Self::Jm => Some("Jm"),
      Self::JN => Some("JN"),
      Self::Jn => Some("Jn"),
      Self::JO => Some("JO"),
      Self::Jo => Some("Jo"),
      Self::JP => Some("JP"),
      Self::Jp => Some("Jp"),
      Self::JQ => Some("JQ"),
      Self::Jq => Some("Jq"),
      Self::JR => Some("JR"),
      Self::Jr => Some("Jr"),
      Self::JS => Some("JS"),
      Self::Js => Some("Js"),
      Self::JT => Some("JT"),
      Self::Jt => Some("Jt"),
      Self::JU => Some("JU"),
      Self::Ju => Some("Ju"),
      Self::JV => Some("JV"),
      Self::Jv => Some("Jv"),
      Self::JW => Some("JW"),
      Self::Jw => Some("Jw"),
      Self::JX => Some("JX"),
      Self::Jx => Some("Jx"),
      Self::JY => Some("JY"),
      Self::Jy => Some("Jy"),
      Self::JZ => Some("JZ"),
      Self::Jz => Some("Jz"),
      Self::jA => Some("jA"),
      Self::ja => Some("ja"),
      Self::jB => Some("jB"),
      Self::jb => Some("jb"),
      Self::jC => Some("jC"),
      Self::jc => Some("jc"),
      Self::jD => Some("jD"),
      Self::jd => Some("jd"),
      Self::jE => Some("jE"),
      Self::je => Some("je"),
      Self::jF => Some("jF"),
      Self::jf => Some("jf"),
      Self::jG => Some("jG"),
      Self::jg => Some("jg"),
      Self::jH => Some("jH"),
      Self::jh => Some("jh"),
      Self::jI => Some("jI"),
      Self::ji => Some("ji"),
      Self::jJ => Some("jJ"),
      Self::jj => Some("jj"),
      Self::jK => Some("jK"),
      Self::jk => Some("jk"),
      Self::jL => Some("jL"),
      Self::jl => Some("jl"),
      Self::jM => Some("jM"),
      Self::jm => Some("jm"),
      Self::jN => Some("jN"),
      Self::jn => Some("jn"),
      Self::jO => Some("jO"),
      Self::jo => Some("jo"),
      Self::jP => Some("jP"),
      Self::jp => Some("jp"),
      Self::jQ => Some("jQ"),
      Self::jq => Some("jq"),
      Self::jR => Some("jR"),
      Self::jr => Some("jr"),
      Self::jS => Some("jS"),
      Self::js => Some("js"),
      Self::jT => Some("jT"),
      Self::jt => Some("jt"),
      Self::jU => Some("jU"),
      Self::ju => Some("ju"),
      Self::jV => Some("jV"),
      Self::jv => Some("jv"),
      Self::jW => Some("jW"),
      Self::jw => Some("jw"),
      Self::jX => Some("jX"),
      Self::jx => Some("jx"),
      Self::jY => Some("jY"),
      Self::jy => Some("jy"),
      Self::jZ => Some("jZ"),
      Self::jz => Some("jz"),
      Self::KA => Some("KA"),
      Self::Ka => Some("Ka"),
      Self::KB => Some("KB"),
      Self::Kb => Some("Kb"),
      Self::KC => Some("KC"),
      Self::Kc => Some("Kc"),
      Self::KD => Some("KD"),
      Self::Kd => Some("Kd"),
      Self::KE => Some("KE"),
      Self::Ke => Some("Ke"),
      Self::KF => Some("KF"),
      Self::Kf => Some("Kf"),
      Self::KG => Some("KG"),
      Self::Kg => Some("Kg"),
      Self::KH => Some("KH"),
      Self::Kh => Some("Kh"),
      Self::KI => Some("KI"),
      Self::Ki => Some("Ki"),
      Self::KJ => Some("KJ"),
      Self::Kj => Some("Kj"),
      Self::KK => Some("KK"),
      Self::Kk => Some("Kk"),
      Self::KL => Some("KL"),
      Self::Kl => Some("Kl"),
      Self::KM => Some("KM"),
      Self::Km => Some("Km"),
      Self::KN => Some("KN"),
      Self::Kn => Some("Kn"),
      Self::KO => Some("KO"),
      Self::Ko => Some("Ko"),
      Self::KP => Some("KP"),
      Self::Kp => Some("Kp"),
      Self::KQ => Some("KQ"),
      Self::Kq => Some("Kq"),
      Self::KR => Some("KR"),
      Self::Kr => Some("Kr"),
      Self::KS => Some("KS"),
      Self::Ks => Some("Ks"),
      Self::KT => Some("KT"),
      Self::Kt => Some("Kt"),
      Self::KU => Some("KU"),
      Self::Ku => Some("Ku"),
      Self::KV => Some("KV"),
      Self::Kv => Some("Kv"),
      Self::KW => Some("KW"),
      Self::Kw => Some("Kw"),
      Self::KX => Some("KX"),
      Self::Kx => Some("Kx"),
      Self::KY => Some("KY"),
      Self::Ky => Some("Ky"),
      Self::KZ => Some("KZ"),
      Self::Kz => Some("Kz"),
      Self::kA => Some("kA"),
      Self::ka => Some("ka"),
      Self::kB => Some("kB"),
      Self::kb => Some("kb"),
      Self::kC => Some("kC"),
      Self::kc => Some("kc"),
      Self::kD => Some("kD"),
      Self::kd => Some("kd"),
      Self::kE => Some("kE"),
      Self::ke => Some("ke"),
      Self::kF => Some("kF"),
      Self::kf => Some("kf"),
      Self::kG => Some("kG"),
      Self::kg => Some("kg"),
      Self::kH => Some("kH"),
      Self::kh => Some("kh"),
      Self::kI => Some("kI"),
      Self::ki => Some("ki"),
      Self::kJ => Some("kJ"),
      Self::kj => Some("kj"),
      Self::kK => Some("kK"),
      Self::kk => Some("kk"),
      Self::kL => Some("kL"),
      Self::kl => Some("kl"),
      Self::kM => Some("kM"),
      Self::km => Some("km"),
      Self::kN => Some("kN"),
      Self::kn => Some("kn"),
      Self::kO => Some("kO"),
      Self::ko => Some("ko"),
      Self::kP => Some("kP"),
      Self::kp => Some("kp"),
      Self::kQ => Some("kQ"),
      Self::kq => Some("kq"),
      Self::kR => Some("kR"),
      Self::kr => Some("kr"),
      Self::kS => Some("kS"),
      Self::ks => Some("ks"),
      Self::kT => Some("kT"),
      Self::kt => Some("kt"),
      Self::kU => Some("kU"),
      Self::ku => Some("ku"),
      Self::kV => Some("kV"),
      Self::kv => Some("kv"),
      Self::kW => Some("kW"),
      Self::kw => Some("kw"),
      Self::kX => Some("kX"),
      Self::kx => Some("kx"),
      Self::kY => Some("kY"),
      Self::ky => Some("ky"),
      Self::kZ => Some("kZ"),
      Self::kz => Some("kz"),
      Self::LA => Some("LA"),
      Self::La => Some("La"),
      Self::LB => Some("LB"),
      Self::Lb => Some("Lb"),
      Self::LC => Some("LC"),
      Self::Lc => Some("Lc"),
      Self::LD => Some("LD"),
      Self::Ld => Some("Ld"),
      Self::LE => Some("LE"),
      Self::Le => Some("Le"),
      Self::LF => Some("LF"),
      Self::Lf => Some("Lf"),
      Self::LG => Some("LG"),
      Self::Lg => Some("Lg"),
      Self::LH => Some("LH"),
      Self::Lh => Some("Lh"),
      Self::LI => Some("LI"),
      Self::Li => Some("Li"),
      Self::LJ => Some("LJ"),
      Self::Lj => Some("Lj"),
      Self::LK => Some("LK"),
      Self::Lk => Some("Lk"),
      Self::LL => Some("LL"),
      Self::Ll => Some("Ll"),
      Self::LM => Some("LM"),
      Self::Lm => Some("Lm"),
      Self::LN => Some("LN"),
      Self::Ln => Some("Ln"),
      Self::LO => Some("LO"),
      Self::Lo => Some("Lo"),
      Self::LP => Some("LP"),
      Self::Lp => Some("Lp"),
      Self::LQ => Some("LQ"),
      Self::Lq => Some("Lq"),
      Self::LR => Some("LR"),
      Self::Lr => Some("Lr"),
      Self::LS => Some("LS"),
      Self::Ls => Some("Ls"),
      Self::LT => Some("LT"),
      Self::Lt => Some("Lt"),
      Self::LU => Some("LU"),
      Self::Lu => Some("Lu"),
      Self::LV => Some("LV"),
      Self::Lv => Some("Lv"),
      Self::LW => Some("LW"),
      Self::Lw => Some("Lw"),
      Self::LX => Some("LX"),
      Self::Lx => Some("Lx"),
      Self::LY => Some("LY"),
      Self::Ly => Some("Ly"),
      Self::LZ => Some("LZ"),
      Self::Lz => Some("Lz"),
      Self::lA => Some("lA"),
      Self::la => Some("la"),
      Self::lB => Some("lB"),
      Self::lb => Some("lb"),
      Self::lC => Some("lC"),
      Self::lc => Some("lc"),
      Self::lD => Some("lD"),
      Self::ld => Some("ld"),
      Self::lE => Some("lE"),
      Self::le => Some("le"),
      Self::lF => Some("lF"),
      Self::lf => Some("lf"),
      Self::lG => Some("lG"),
      Self::lg => Some("lg"),
      Self::lH => Some("lH"),
      Self::lh => Some("lh"),
      Self::lI => Some("lI"),
      Self::li => Some("li"),
      Self::lJ => Some("lJ"),
      Self::lj => Some("lj"),
      Self::lK => Some("lK"),
      Self::lk => Some("lk"),
      Self::lL => Some("lL"),
      Self::ll => Some("ll"),
      Self::lM => Some("lM"),
      Self::lm => Some("lm"),
      Self::lN => Some("lN"),
      Self::ln => Some("ln"),
      Self::lO => Some("lO"),
      Self::lo => Some("lo"),
      Self::lP => Some("lP"),
      Self::lp => Some("lp"),
      Self::lQ => Some("lQ"),
      Self::lq => Some("lq"),
      Self::lR => Some("lR"),
      Self::lr => Some("lr"),
      Self::lS => Some("lS"),
      Self::ls => Some("ls"),
      Self::lT => Some("lT"),
      Self::lt => Some("lt"),
      Self::lU => Some("lU"),
      Self::lu => Some("lu"),
      Self::lV => Some("lV"),
      Self::lv => Some("lv"),
      Self::lW => Some("lW"),
      Self::lw => Some("lw"),
      Self::lX => Some("lX"),
      Self::lx => Some("lx"),
      Self::lY => Some("lY"),
      Self::ly => Some("ly"),
      Self::lZ => Some("lZ"),
      Self::lz => Some("lz"),
      Self::MA => Some("MA"),
      Self::Ma => Some("Ma"),
      Self::MB => Some("MB"),
      Self::Mb => Some("Mb"),
      Self::MC => Some("MC"),
      Self::Mc => Some("Mc"),
      Self::MD => Some("MD"),
      Self::Md => Some("Md"),
      Self::ME => Some("ME"),
      Self::Me => Some("Me"),
      Self::MF => Some("MF"),
      Self::Mf => Some("Mf"),
      Self::MG => Some("MG"),
      Self::Mg => Some("Mg"),
      Self::MH => Some("MH"),
      Self::Mh => Some("Mh"),
      Self::MI => Some("MI"),
      Self::Mi => Some("Mi"),
      Self::MJ => Some("MJ"),
      Self::Mj => Some("Mj"),
      Self::MK => Some("MK"),
      Self::Mk => Some("Mk"),
      Self::ML => Some("ML"),
      Self::Ml => Some("Ml"),
      Self::MM => Some("MM"),
      Self::Mm => Some("Mm"),
      Self::MN => Some("MN"),
      Self::Mn => Some("Mn"),
      Self::MO => Some("MO"),
      Self::Mo => Some("Mo"),
      Self::MP => Some("MP"),
      Self::Mp => Some("Mp"),
      Self::MQ => Some("MQ"),
      Self::Mq => Some("Mq"),
      Self::MR => Some("MR"),
      Self::Mr => Some("Mr"),
      Self::MS => Some("MS"),
      Self::Ms => Some("Ms"),
      Self::MT => Some("MT"),
      Self::Mt => Some("Mt"),
      Self::MU => Some("MU"),
      Self::Mu => Some("Mu"),
      Self::MV => Some("MV"),
      Self::Mv => Some("Mv"),
      Self::MW => Some("MW"),
      Self::Mw => Some("Mw"),
      Self::MX => Some("MX"),
      Self::Mx => Some("Mx"),
      Self::MY => Some("MY"),
      Self::My => Some("My"),
      Self::MZ => Some("MZ"),
      Self::Mz => Some("Mz"),
      Self::mA => Some("mA"),
      Self::ma => Some("ma"),
      Self::mB => Some("mB"),
      Self::mb => Some("mb"),
      Self::mC => Some("mC"),
      Self::mc => Some("mc"),
      Self::mD => Some("mD"),
      Self::md => Some("md"),
      Self::mE => Some("mE"),
      Self::me => Some("me"),
      Self::mF => Some("mF"),
      Self::mf => Some("mf"),
      Self::mG => Some("mG"),
      Self::mg => Some("mg"),
      Self::mH => Some("mH"),
      Self::mh => Some("mh"),
      Self::mI => Some("mI"),
      Self::mi => Some("mi"),
      Self::mJ => Some("mJ"),
      Self::mj => Some("mj"),
      Self::mK => Some("mK"),
      Self::mk => Some("mk"),
      Self::mL => Some("mL"),
      Self::ml => Some("ml"),
      Self::mM => Some("mM"),
      Self::mm => Some("mm"),
      Self::mN => Some("mN"),
      Self::mn => Some("mn"),
      Self::mO => Some("mO"),
      Self::mo => Some("mo"),
      Self::mP => Some("mP"),
      Self::mp => Some("mp"),
      Self::mQ => Some("mQ"),
      Self::mq => Some("mq"),
      Self::mR => Some("mR"),
      Self::mr => Some("mr"),
      Self::mS => Some("mS"),
      Self::ms => Some("ms"),
      Self::mT => Some("mT"),
      Self::mt => Some("mt"),
      Self::mU => Some("mU"),
      Self::mu => Some("mu"),
      Self::mV => Some("mV"),
      Self::mv => Some("mv"),
      Self::mW => Some("mW"),
      Self::mw => Some("mw"),
      Self::mX => Some("mX"),
      Self::mx => Some("mx"),
      Self::mY => Some("mY"),
      Self::my => Some("my"),
      Self::mZ => Some("mZ"),
      Self::mz => Some("mz"),
      Self::NA => Some("NA"),
      Self::Na => Some("Na"),
      Self::NB => Some("NB"),
      Self::Nb => Some("Nb"),
      Self::NC => Some("NC"),
      Self::Nc => Some("Nc"),
      Self::ND => Some("ND"),
      Self::Nd => Some("Nd"),
      Self::NE => Some("NE"),
      Self::Ne => Some("Ne"),
      Self::NF => Some("NF"),
      Self::Nf => Some("Nf"),
      Self::NG => Some("NG"),
      Self::Ng => Some("Ng"),
      Self::NH => Some("NH"),
      Self::Nh => Some("Nh"),
      Self::NI => Some("NI"),
      Self::Ni => Some("Ni"),
      Self::NJ => Some("NJ"),
      Self::Nj => Some("Nj"),
      Self::NK => Some("NK"),
      Self::Nk => Some("Nk"),
      Self::NL => Some("NL"),
      Self::Nl => Some("Nl"),
      Self::NM => Some("NM"),
      Self::Nm => Some("Nm"),
      Self::NN => Some("NN"),
      Self::Nn => Some("Nn"),
      Self::NO => Some("NO"),
      Self::No => Some("No"),
      Self::NP => Some("NP"),
      Self::Np => Some("Np"),
      Self::NQ => Some("NQ"),
      Self::Nq => Some("Nq"),
      Self::NR => Some("NR"),
      Self::Nr => Some("Nr"),
      Self::NS => Some("NS"),
      Self::Ns => Some("Ns"),
      Self::NT => Some("NT"),
      Self::Nt => Some("Nt"),
      Self::NU => Some("NU"),
      Self::Nu => Some("Nu"),
      Self::NV => Some("NV"),
      Self::Nv => Some("Nv"),
      Self::NW => Some("NW"),
      Self::Nw => Some("Nw"),
      Self::NX => Some("NX"),
      Self::Nx => Some("Nx"),
      Self::NY => Some("NY"),
      Self::Ny => Some("Ny"),
      Self::NZ => Some("NZ"),
      Self::Nz => Some("Nz"),
      Self::nA => Some("nA"),
      Self::na => Some("na"),
      Self::nB => Some("nB"),
      Self::nb => Some("nb"),
      Self::nC => Some("nC"),
      Self::nc => Some("nc"),
      Self::nD => Some("nD"),
      Self::nd => Some("nd"),
      Self::nE => Some("nE"),
      Self::ne => Some("ne"),
      Self::nF => Some("nF"),
      Self::nf => Some("nf"),
      Self::nG => Some("nG"),
      Self::ng => Some("ng"),
      Self::nH => Some("nH"),
      Self::nh => Some("nh"),
      Self::nI => Some("nI"),
      Self::ni => Some("ni"),
      Self::nJ => Some("nJ"),
      Self::nj => Some("nj"),
      Self::nK => Some("nK"),
      Self::nk => Some("nk"),
      Self::nL => Some("nL"),
      Self::nl => Some("nl"),
      Self::nM => Some("nM"),
      Self::nm => Some("nm"),
      Self::nN => Some("nN"),
      Self::nn => Some("nn"),
      Self::nO => Some("nO"),
      Self::no => Some("no"),
      Self::nP => Some("nP"),
      Self::np => Some("np"),
      Self::nQ => Some("nQ"),
      Self::nq => Some("nq"),
      Self::nR => Some("nR"),
      Self::nr => Some("nr"),
      Self::nS => Some("nS"),
      Self::ns => Some("ns"),
      Self::nT => Some("nT"),
      Self::nt => Some("nt"),
      Self::nU => Some("nU"),
      Self::nu => Some("nu"),
      Self::nV => Some("nV"),
      Self::nv => Some("nv"),
      Self::nW => Some("nW"),
      Self::nw => Some("nw"),
      Self::nX => Some("nX"),
      Self::nx => Some("nx"),
      Self::nY => Some("nY"),
      Self::ny => Some("ny"),
      Self::nZ => Some("nZ"),
      Self::nz => Some("nz"),
      Self::OA => Some("OA"),
      Self::Oa => Some("Oa"),
      Self::OB => Some("OB"),
      Self::Ob => Some("Ob"),
      Self::OC => Some("OC"),
      Self::Oc => Some("Oc"),
      Self::OD => Some("OD"),
      Self::Od => Some("Od"),
      Self::OE => Some("OE"),
      Self::Oe => Some("Oe"),
      Self::OF => Some("OF"),
      Self::Of => Some("Of"),
      Self::OG => Some("OG"),
      Self::Og => Some("Og"),
      Self::OH => Some("OH"),
      Self::Oh => Some("Oh"),
      Self::OI => Some("OI"),
      Self::Oi => Some("Oi"),
      Self::OJ => Some("OJ"),
      Self::Oj => Some("Oj"),
      Self::OK => Some("OK"),
      Self::Ok => Some("Ok"),
      Self::OL => Some("OL"),
      Self::Ol => Some("Ol"),
      Self::OM => Some("OM"),
      Self::Om => Some("Om"),
      Self::ON => Some("ON"),
      Self::On => Some("On"),
      Self::OO => Some("OO"),
      Self::Oo => Some("Oo"),
      Self::OP => Some("OP"),
      Self::Op => Some("Op"),
      Self::OQ => Some("OQ"),
      Self::Oq => Some("Oq"),
      Self::OR => Some("OR"),
      Self::Or => Some("Or"),
      Self::OS => Some("OS"),
      Self::Os => Some("Os"),
      Self::OT => Some("OT"),
      Self::Ot => Some("Ot"),
      Self::OU => Some("OU"),
      Self::Ou => Some("Ou"),
      Self::OV => Some("OV"),
      Self::Ov => Some("Ov"),
      Self::OW => Some("OW"),
      Self::Ow => Some("Ow"),
      Self::OX => Some("OX"),
      Self::Ox => Some("Ox"),
      Self::OY => Some("OY"),
      Self::Oy => Some("Oy"),
      Self::OZ => Some("OZ"),
      Self::Oz => Some("Oz"),
      Self::oA => Some("oA"),
      Self::oa => Some("oa"),
      Self::oB => Some("oB"),
      Self::ob => Some("ob"),
      Self::oC => Some("oC"),
      Self::oc => Some("oc"),
      Self::oD => Some("oD"),
      Self::od => Some("od"),
      Self::oE => Some("oE"),
      Self::oe => Some("oe"),
      Self::oF => Some("oF"),
      Self::of => Some("of"),
      Self::oG => Some("oG"),
      Self::og => Some("og"),
      Self::oH => Some("oH"),
      Self::oh => Some("oh"),
      Self::oI => Some("oI"),
      Self::oi => Some("oi"),
      Self::oJ => Some("oJ"),
      Self::oj => Some("oj"),
      Self::oK => Some("oK"),
      Self::ok => Some("ok"),
      Self::oL => Some("oL"),
      Self::ol => Some("ol"),
      Self::oM => Some("oM"),
      Self::om => Some("om"),
      Self::oN => Some("oN"),
      Self::on => Some("on"),
      Self::oO => Some("oO"),
      Self::oo => Some("oo"),
      Self::oP => Some("oP"),
      Self::op => Some("op"),
      Self::oQ => Some("oQ"),
      Self::oq => Some("oq"),
      Self::oR => Some("oR"),
      Self::or => Some("or"),
      Self::oS => Some("oS"),
      Self::os => Some("os"),
      Self::oT => Some("oT"),
      Self::ot => Some("ot"),
      Self::oU => Some("oU"),
      Self::ou => Some("ou"),
      Self::oV => Some("oV"),
      Self::ov => Some("ov"),
      Self::oW => Some("oW"),
      Self::ow => Some("ow"),
      Self::oX => Some("oX"),
      Self::ox => Some("ox"),
      Self::oY => Some("oY"),
      Self::oy => Some("oy"),
      Self::oZ => Some("oZ"),
      Self::oz => Some("oz"),
      Self::PA => Some("PA"),
      Self::Pa => Some("Pa"),
      Self::PB => Some("PB"),
      Self::Pb => Some("Pb"),
      Self::PC => Some("PC"),
      Self::Pc => Some("Pc"),
      Self::PD => Some("PD"),
      Self::Pd => Some("Pd"),
      Self::PE => Some("PE"),
      Self::Pe => Some("Pe"),
      Self::PF => Some("PF"),
      Self::Pf => Some("Pf"),
      Self::PG => Some("PG"),
      Self::Pg => Some("Pg"),
      Self::PH => Some("PH"),
      Self::Ph => Some("Ph"),
      Self::PI => Some("PI"),
      Self::Pi => Some("Pi"),
      Self::PJ => Some("PJ"),
      Self::Pj => Some("Pj"),
      Self::PK => Some("PK"),
      Self::Pk => Some("Pk"),
      Self::PL => Some("PL"),
      Self::Pl => Some("Pl"),
      Self::PM => Some("PM"),
      Self::Pm => Some("Pm"),
      Self::PN => Some("PN"),
      Self::Pn => Some("Pn"),
      Self::PO => Some("PO"),
      Self::Po => Some("Po"),
      Self::PP => Some("PP"),
      Self::Pp => Some("Pp"),
      Self::PQ => Some("PQ"),
      Self::Pq => Some("Pq"),
      Self::PR => Some("PR"),
      Self::Pr => Some("Pr"),
      Self::PS => Some("PS"),
      Self::Ps => Some("Ps"),
      Self::PT => Some("PT"),
      Self::Pt => Some("Pt"),
      Self::PU => Some("PU"),
      Self::Pu => Some("Pu"),
      Self::PV => Some("PV"),
      Self::Pv => Some("Pv"),
      Self::PW => Some("PW"),
      Self::Pw => Some("Pw"),
      Self::PX => Some("PX"),
      Self::Px => Some("Px"),
      Self::PY => Some("PY"),
      Self::Py => Some("Py"),
      Self::PZ => Some("PZ"),
      Self::Pz => Some("Pz"),
      Self::pA => Some("pA"),
      Self::pa => Some("pa"),
      Self::pB => Some("pB"),
      Self::pb => Some("pb"),
      Self::pC => Some("pC"),
      Self::pc => Some("pc"),
      Self::pD => Some("pD"),
      Self::pd => Some("pd"),
      Self::pE => Some("pE"),
      Self::pe => Some("pe"),
      Self::pF => Some("pF"),
      Self::pf => Some("pf"),
      Self::pG => Some("pG"),
      Self::pg => Some("pg"),
      Self::pH => Some("pH"),
      Self::ph => Some("ph"),
      Self::pI => Some("pI"),
      Self::pi => Some("pi"),
      Self::pJ => Some("pJ"),
      Self::pj => Some("pj"),
      Self::pK => Some("pK"),
      Self::pk => Some("pk"),
      Self::pL => Some("pL"),
      Self::pl => Some("pl"),
      Self::pM => Some("pM"),
      Self::pm => Some("pm"),
      Self::pN => Some("pN"),
      Self::pn => Some("pn"),
      Self::pO => Some("pO"),
      Self::po => Some("po"),
      Self::pP => Some("pP"),
      Self::pp => Some("pp"),
      Self::pQ => Some("pQ"),
      Self::pq => Some("pq"),
      Self::pR => Some("pR"),
      Self::pr => Some("pr"),
      Self::pS => Some("pS"),
      Self::ps => Some("ps"),
      Self::pT => Some("pT"),
      Self::pt => Some("pt"),
      Self::pU => Some("pU"),
      Self::pu => Some("pu"),
      Self::pV => Some("pV"),
      Self::pv => Some("pv"),
      Self::pW => Some("pW"),
      Self::pw => Some("pw"),
      Self::pX => Some("pX"),
      Self::px => Some("px"),
      Self::pY => Some("pY"),
      Self::py => Some("py"),
      Self::pZ => Some("pZ"),
      Self::pz => Some("pz"),
      Self::QA => Some("QA"),
      Self::Qa => Some("Qa"),
      Self::QB => Some("QB"),
      Self::Qb => Some("Qb"),
      Self::QC => Some("QC"),
      Self::Qc => Some("Qc"),
      Self::QD => Some("QD"),
      Self::Qd => Some("Qd"),
      Self::QE => Some("QE"),
      Self::Qe => Some("Qe"),
      Self::QF => Some("QF"),
      Self::Qf => Some("Qf"),
      Self::QG => Some("QG"),
      Self::Qg => Some("Qg"),
      Self::QH => Some("QH"),
      Self::Qh => Some("Qh"),
      Self::QI => Some("QI"),
      Self::Qi => Some("Qi"),
      Self::QJ => Some("QJ"),
      Self::Qj => Some("Qj"),
      Self::QK => Some("QK"),
      Self::Qk => Some("Qk"),
      Self::QL => Some("QL"),
      Self::Ql => Some("Ql"),
      Self::QM => Some("QM"),
      Self::Qm => Some("Qm"),
      Self::QN => Some("QN"),
      Self::Qn => Some("Qn"),
      Self::QO => Some("QO"),
      Self::Qo => Some("Qo"),
      Self::QP => Some("QP"),
      Self::Qp => Some("Qp"),
      Self::QQ => Some("QQ"),
      Self::Qq => Some("Qq"),
      Self::QR => Some("QR"),
      Self::Qr => Some("Qr"),
      Self::QS => Some("QS"),
      Self::Qs => Some("Qs"),
      Self::QT => Some("QT"),
      Self::Qt => Some("Qt"),
      Self::QU => Some("QU"),
      Self::Qu => Some("Qu"),
      Self::QV => Some("QV"),
      Self::Qv => Some("Qv"),
      Self::QW => Some("QW"),
      Self::Qw => Some("Qw"),
      Self::QX => Some("QX"),
      Self::Qx => Some("Qx"),
      Self::QY => Some("QY"),
      Self::Qy => Some("Qy"),
      Self::QZ => Some("QZ"),
      Self::Qz => Some("Qz"),
      Self::qA => Some("qA"),
      Self::qa => Some("qa"),
      Self::qB => Some("qB"),
      Self::qb => Some("qb"),
      Self::qC => Some("qC"),
      Self::qc => Some("qc"),
      Self::qD => Some("qD"),
      Self::qd => Some("qd"),
      Self::qE => Some("qE"),
      Self::qe => Some("qe"),
      Self::qF => Some("qF"),
      Self::qf => Some("qf"),
      Self::qG => Some("qG"),
      Self::qg => Some("qg"),
      Self::qH => Some("qH"),
      Self::qh => Some("qh"),
      Self::qI => Some("qI"),
      Self::qi => Some("qi"),
      Self::qJ => Some("qJ"),
      Self::qj => Some("qj"),
      Self::qK => Some("qK"),
      Self::qk => Some("qk"),
      Self::qL => Some("qL"),
      Self::ql => Some("ql"),
      Self::qM => Some("qM"),
      Self::qm => Some("qm"),
      Self::qN => Some("qN"),
      Self::qn => Some("qn"),
      Self::qO => Some("qO"),
      Self::qo => Some("qo"),
      Self::qP => Some("qP"),
      Self::qp => Some("qp"),
      Self::qQ => Some("qQ"),
      Self::qq => Some("qq"),
      Self::qR => Some("qR"),
      Self::qr => Some("qr"),
      Self::qS => Some("qS"),
      Self::qs => Some("qs"),
      Self::qT => Some("qT"),
      Self::qt => Some("qt"),
      Self::qU => Some("qU"),
      Self::qu => Some("qu"),
      Self::qV => Some("qV"),
      Self::qv => Some("qv"),
      Self::qW => Some("qW"),
      Self::qw => Some("qw"),
      Self::qX => Some("qX"),
      Self::qx => Some("qx"),
      Self::qY => Some("qY"),
      Self::qy => Some("qy"),
      Self::qZ => Some("qZ"),
      Self::qz => Some("qz"),
      Self::RA => Some("RA"),
      Self::Ra => Some("Ra"),
      Self::RB => Some("RB"),
      Self::Rb => Some("Rb"),
      Self::RC => Some("RC"),
      Self::Rc => Some("Rc"),
      Self::RD => Some("RD"),
      Self::Rd => Some("Rd"),
      Self::RE => Some("RE"),
      Self::Re => Some("Re"),
      Self::RF => Some("RF"),
      Self::Rf => Some("Rf"),
      Self::RG => Some("RG"),
      Self::Rg => Some("Rg"),
      Self::RH => Some("RH"),
      Self::Rh => Some("Rh"),
      Self::RI => Some("RI"),
      Self::Ri => Some("Ri"),
      Self::RJ => Some("RJ"),
      Self::Rj => Some("Rj"),
      Self::RK => Some("RK"),
      Self::Rk => Some("Rk"),
      Self::RL => Some("RL"),
      Self::Rl => Some("Rl"),
      Self::RM => Some("RM"),
      Self::Rm => Some("Rm"),
      Self::RN => Some("RN"),
      Self::Rn => Some("Rn"),
      Self::RO => Some("RO"),
      Self::Ro => Some("Ro"),
      Self::RP => Some("RP"),
      Self::Rp => Some("Rp"),
      Self::RQ => Some("RQ"),
      Self::Rq => Some("Rq"),
      Self::RR => Some("RR"),
      Self::Rr => Some("Rr"),
      Self::RS => Some("RS"),
      Self::Rs => Some("Rs"),
      Self::RT => Some("RT"),
      Self::Rt => Some("Rt"),
      Self::RU => Some("RU"),
      Self::Ru => Some("Ru"),
      Self::RV => Some("RV"),
      Self::Rv => Some("Rv"),
      Self::RW => Some("RW"),
      Self::Rw => Some("Rw"),
      Self::RX => Some("RX"),
      Self::Rx => Some("Rx"),
      Self::RY => Some("RY"),
      Self::Ry => Some("Ry"),
      Self::RZ => Some("RZ"),
      Self::Rz => Some("Rz"),
      Self::rA => Some("rA"),
      Self::ra => Some("ra"),
      Self::rB => Some("rB"),
      Self::rb => Some("rb"),
      Self::rC => Some("rC"),
      Self::rc => Some("rc"),
      Self::rD => Some("rD"),
      Self::rd => Some("rd"),
      Self::rE => Some("rE"),
      Self::re => Some("re"),
      Self::rF => Some("rF"),
      Self::rf => Some("rf"),
      Self::rG => Some("rG"),
      Self::rg => Some("rg"),
      Self::rH => Some("rH"),
      Self::rh => Some("rh"),
      Self::rI => Some("rI"),
      Self::ri => Some("ri"),
      Self::rJ => Some("rJ"),
      Self::rj => Some("rj"),
      Self::rK => Some("rK"),
      Self::rk => Some("rk"),
      Self::rL => Some("rL"),
      Self::rl => Some("rl"),
      Self::rM => Some("rM"),
      Self::rm => Some("rm"),
      Self::rN => Some("rN"),
      Self::rn => Some("rn"),
      Self::rO => Some("rO"),
      Self::ro => Some("ro"),
      Self::rP => Some("rP"),
      Self::rp => Some("rp"),
      Self::rQ => Some("rQ"),
      Self::rq => Some("rq"),
      Self::rR => Some("rR"),
      Self::rr => Some("rr"),
      Self::rS => Some("rS"),
      Self::rs => Some("rs"),
      Self::rT => Some("rT"),
      Self::rt => Some("rt"),
      Self::rU => Some("rU"),
      Self::ru => Some("ru"),
      Self::rV => Some("rV"),
      Self::rv => Some("rv"),
      Self::rW => Some("rW"),
      Self::rw => Some("rw"),
      Self::rX => Some("rX"),
      Self::rx => Some("rx"),
      Self::rY => Some("rY"),
      Self::ry => Some("ry"),
      Self::rZ => Some("rZ"),
      Self::rz => Some("rz"),
      Self::SA => Some("SA"),
      Self::Sa => Some("Sa"),
      Self::SB => Some("SB"),
      Self::Sb => Some("Sb"),
      Self::SC => Some("SC"),
      Self::Sc => Some("Sc"),
      Self::SD => Some("SD"),
      Self::Sd => Some("Sd"),
      Self::SE => Some("SE"),
      Self::Se => Some("Se"),
      Self::SF => Some("SF"),
      Self::Sf => Some("Sf"),
      Self::SG => Some("SG"),
      Self::Sg => Some("Sg"),
      Self::SH => Some("SH"),
      Self::Sh => Some("Sh"),
      Self::SI => Some("SI"),
      Self::Si => Some("Si"),
      Self::SJ => Some("SJ"),
      Self::Sj => Some("Sj"),
      Self::SK => Some("SK"),
      Self::Sk => Some("Sk"),
      Self::SL => Some("SL"),
      Self::Sl => Some("Sl"),
      Self::SM => Some("SM"),
      Self::Sm => Some("Sm"),
      Self::SN => Some("SN"),
      Self::Sn => Some("Sn"),
      Self::SO => Some("SO"),
      Self::So => Some("So"),
      Self::SP => Some("SP"),
      Self::Sp => Some("Sp"),
      Self::SQ => Some("SQ"),
      Self::Sq => Some("Sq"),
      Self::SR => Some("SR"),
      Self::Sr => Some("Sr"),
      Self::SS => Some("SS"),
      Self::Ss => Some("Ss"),
      Self::ST => Some("ST"),
      Self::St => Some("St"),
      Self::SU => Some("SU"),
      Self::Su => Some("Su"),
      Self::SV => Some("SV"),
      Self::Sv => Some("Sv"),
      Self::SW => Some("SW"),
      Self::Sw => Some("Sw"),
      Self::SX => Some("SX"),
      Self::Sx => Some("Sx"),
      Self::SY => Some("SY"),
      Self::Sy => Some("Sy"),
      Self::SZ => Some("SZ"),
      Self::Sz => Some("Sz"),
      Self::sA => Some("sA"),
      Self::sa => Some("sa"),
      Self::sB => Some("sB"),
      Self::sb => Some("sb"),
      Self::sC => Some("sC"),
      Self::sc => Some("sc"),
      Self::sD => Some("sD"),
      Self::sd => Some("sd"),
      Self::sE => Some("sE"),
      Self::se => Some("se"),
      Self::sF => Some("sF"),
      Self::sf => Some("sf"),
      Self::sG => Some("sG"),
      Self::sg => Some("sg"),
      Self::sH => Some("sH"),
      Self::sh => Some("sh"),
      Self::sI => Some("sI"),
      Self::si => Some("si"),
      Self::sJ => Some("sJ"),
      Self::sj => Some("sj"),
      Self::sK => Some("sK"),
      Self::sk => Some("sk"),
      Self::sL => Some("sL"),
      Self::sl => Some("sl"),
      Self::sM => Some("sM"),
      Self::sm => Some("sm"),
      Self::sN => Some("sN"),
      Self::sn => Some("sn"),
      Self::sO => Some("sO"),
      Self::so => Some("so"),
      Self::sP => Some("sP"),
      Self::sp => Some("sp"),
      Self::sQ => Some("sQ"),
      Self::sq => Some("sq"),
      Self::sR => Some("sR"),
      Self::sr => Some("sr"),
      Self::sS => Some("sS"),
      Self::ss => Some("ss"),
      Self::sT => Some("sT"),
      Self::st => Some("st"),
      Self::sU => Some("sU"),
      Self::su => Some("su"),
      Self::sV => Some("sV"),
      Self::sv => Some("sv"),
      Self::sW => Some("sW"),
      Self::sw => Some("sw"),
      Self::sX => Some("sX"),
      Self::sx => Some("sx"),
      Self::sY => Some("sY"),
      Self::sy => Some("sy"),
      Self::sZ => Some("sZ"),
      Self::sz => Some("sz"),
      Self::TA => Some("TA"),
      Self::Ta => Some("Ta"),
      Self::TB => Some("TB"),
      Self::Tb => Some("Tb"),
      Self::TC => Some("TC"),
      Self::Tc => Some("Tc"),
      Self::TD => Some("TD"),
      Self::Td => Some("Td"),
      Self::TE => Some("TE"),
      Self::Te => Some("Te"),
      Self::TF => Some("TF"),
      Self::Tf => Some("Tf"),
      Self::TG => Some("TG"),
      Self::Tg => Some("Tg"),
      Self::TH => Some("TH"),
      Self::Th => Some("Th"),
      Self::TI => Some("TI"),
      Self::Ti => Some("Ti"),
      Self::TJ => Some("TJ"),
      Self::Tj => Some("Tj"),
      Self::TK => Some("TK"),
      Self::Tk => Some("Tk"),
      Self::TL => Some("TL"),
      Self::Tl => Some("Tl"),
      Self::TM => Some("TM"),
      Self::Tm => Some("Tm"),
      Self::TN => Some("TN"),
      Self::Tn => Some("Tn"),
      Self::TO => Some("TO"),
      Self::To => Some("To"),
      Self::TP => Some("TP"),
      Self::Tp => Some("Tp"),
      Self::TQ => Some("TQ"),
      Self::Tq => Some("Tq"),
      Self::TR => Some("TR"),
      Self::Tr => Some("Tr"),
      Self::TS => Some("TS"),
      Self::Ts => Some("Ts"),
      Self::TT => Some("TT"),
      Self::Tt => Some("Tt"),
      Self::TU => Some("TU"),
      Self::Tu => Some("Tu"),
      Self::TV => Some("TV"),
      Self::Tv => Some("Tv"),
      Self::TW => Some("TW"),
      Self::Tw => Some("Tw"),
      Self::TX => Some("TX"),
      Self::Tx => Some("Tx"),
      Self::TY => Some("TY"),
      Self::Ty => Some("Ty"),
      Self::TZ => Some("TZ"),
      Self::Tz => Some("Tz"),
      Self::tA => Some("tA"),
      Self::ta => Some("ta"),
      Self::tB => Some("tB"),
      Self::tb => Some("tb"),
      Self::tC => Some("tC"),
      Self::tc => Some("tc"),
      Self::tD => Some("tD"),
      Self::td => Some("td"),
      Self::tE => Some("tE"),
      Self::te => Some("te"),
      Self::tF => Some("tF"),
      Self::tf => Some("tf"),
      Self::tG => Some("tG"),
      Self::tg => Some("tg"),
      Self::tH => Some("tH"),
      Self::th => Some("th"),
      Self::tI => Some("tI"),
      Self::ti => Some("ti"),
      Self::tJ => Some("tJ"),
      Self::tj => Some("tj"),
      Self::tK => Some("tK"),
      Self::tk => Some("tk"),
      Self::tL => Some("tL"),
      Self::tl => Some("tl"),
      Self::tM => Some("tM"),
      Self::tm => Some("tm"),
      Self::tN => Some("tN"),
      Self::tn => Some("tn"),
      Self::tO => Some("tO"),
      Self::to => Some("to"),
      Self::tP => Some("tP"),
      Self::tp => Some("tp"),
      Self::tQ => Some("tQ"),
      Self::tq => Some("tq"),
      Self::tR => Some("tR"),
      Self::tr => Some("tr"),
      Self::tS => Some("tS"),
      Self::ts => Some("ts"),
      Self::tT => Some("tT"),
      Self::tt => Some("tt"),
      Self::tU => Some("tU"),
      Self::tu => Some("tu"),
      Self::tV => Some("tV"),
      Self::tv => Some("tv"),
      Self::tW => Some("tW"),
      Self::tw => Some("tw"),
      Self::tX => Some("tX"),
      Self::tx => Some("tx"),
      Self::tY => Some("tY"),
      Self::ty => Some("ty"),
      Self::tZ => Some("tZ"),
      Self::tz => Some("tz"),
      Self::UA => Some("UA"),
      Self::Ua => Some("Ua"),
      Self::UB => Some("UB"),
      Self::Ub => Some("Ub"),
      Self::UC => Some("UC"),
      Self::Uc => Some("Uc"),
      Self::UD => Some("UD"),
      Self::Ud => Some("Ud"),
      Self::UE => Some("UE"),
      Self::Ue => Some("Ue"),
      Self::UF => Some("UF"),
      Self::Uf => Some("Uf"),
      Self::UG => Some("UG"),
      Self::Ug => Some("Ug"),
      Self::UH => Some("UH"),
      Self::Uh => Some("Uh"),
      Self::UI => Some("UI"),
      Self::Ui => Some("Ui"),
      Self::UJ => Some("UJ"),
      Self::Uj => Some("Uj"),
      Self::UK => Some("UK"),
      Self::Uk => Some("Uk"),
      Self::UL => Some("UL"),
      Self::Ul => Some("Ul"),
      Self::UM => Some("UM"),
      Self::Um => Some("Um"),
      Self::UN => Some("UN"),
      Self::Un => Some("Un"),
      Self::UO => Some("UO"),
      Self::Uo => Some("Uo"),
      Self::UP => Some("UP"),
      Self::Up => Some("Up"),
      Self::UQ => Some("UQ"),
      Self::Uq => Some("Uq"),
      Self::UR => Some("UR"),
      Self::Ur => Some("Ur"),
      Self::US => Some("US"),
      Self::Us => Some("Us"),
      Self::UT => Some("UT"),
      Self::Ut => Some("Ut"),
      Self::UU => Some("UU"),
      Self::Uu => Some("Uu"),
      Self::UV => Some("UV"),
      Self::Uv => Some("Uv"),
      Self::UW => Some("UW"),
      Self::Uw => Some("Uw"),
      Self::UX => Some("UX"),
      Self::Ux => Some("Ux"),
      Self::UY => Some("UY"),
      Self::Uy => Some("Uy"),
      Self::UZ => Some("UZ"),
      Self::Uz => Some("Uz"),
      Self::uA => Some("uA"),
      Self::ua => Some("ua"),
      Self::uB => Some("uB"),
      Self::ub => Some("ub"),
      Self::uC => Some("uC"),
      Self::uc => Some("uc"),
      Self::uD => Some("uD"),
      Self::ud => Some("ud"),
      Self::uE => Some("uE"),
      Self::ue => Some("ue"),
      Self::uF => Some("uF"),
      Self::uf => Some("uf"),
      Self::uG => Some("uG"),
      Self::ug => Some("ug"),
      Self::uH => Some("uH"),
      Self::uh => Some("uh"),
      Self::uI => Some("uI"),
      Self::ui => Some("ui"),
      Self::uJ => Some("uJ"),
      Self::uj => Some("uj"),
      Self::uK => Some("uK"),
      Self::uk => Some("uk"),
      Self::uL => Some("uL"),
      Self::ul => Some("ul"),
      Self::uM => Some("uM"),
      Self::um => Some("um"),
      Self::uN => Some("uN"),
      Self::un => Some("un"),
      Self::uO => Some("uO"),
      Self::uo => Some("uo"),
      Self::uP => Some("uP"),
      Self::up => Some("up"),
      Self::uQ => Some("uQ"),
      Self::uq => Some("uq"),
      Self::uR => Some("uR"),
      Self::ur => Some("ur"),
      Self::uS => Some("uS"),
      Self::us => Some("us"),
      Self::uT => Some("uT"),
      Self::ut => Some("ut"),
      Self::uU => Some("uU"),
      Self::uu => Some("uu"),
      Self::uV => Some("uV"),
      Self::uv => Some("uv"),
      Self::uW => Some("uW"),
      Self::uw => Some("uw"),
      Self::uX => Some("uX"),
      Self::ux => Some("ux"),
      Self::uY => Some("uY"),
      Self::uy => Some("uy"),
      Self::uZ => Some("uZ"),
      Self::uz => Some("uz"),
      Self::VA => Some("VA"),
      Self::Va => Some("Va"),
      Self::VB => Some("VB"),
      Self::Vb => Some("Vb"),
      Self::VC => Some("VC"),
      Self::Vc => Some("Vc"),
      Self::VD => Some("VD"),
      Self::Vd => Some("Vd"),
      Self::VE => Some("VE"),
      Self::Ve => Some("Ve"),
      Self::VF => Some("VF"),
      Self::Vf => Some("Vf"),
      Self::VG => Some("VG"),
      Self::Vg => Some("Vg"),
      Self::VH => Some("VH"),
      Self::Vh => Some("Vh"),
      Self::VI => Some("VI"),
      Self::Vi => Some("Vi"),
      Self::VJ => Some("VJ"),
      Self::Vj => Some("Vj"),
      Self::VK => Some("VK"),
      Self::Vk => Some("Vk"),
      Self::VL => Some("VL"),
      Self::Vl => Some("Vl"),
      Self::VM => Some("VM"),
      Self::Vm => Some("Vm"),
      Self::VN => Some("VN"),
      Self::Vn => Some("Vn"),
      Self::VO => Some("VO"),
      Self::Vo => Some("Vo"),
      Self::VP => Some("VP"),
      Self::Vp => Some("Vp"),
      Self::VQ => Some("VQ"),
      Self::Vq => Some("Vq"),
      Self::VR => Some("VR"),
      Self::Vr => Some("Vr"),
      Self::VS => Some("VS"),
      Self::Vs => Some("Vs"),
      Self::VT => Some("VT"),
      Self::Vt => Some("Vt"),
      Self::VU => Some("VU"),
      Self::Vu => Some("Vu"),
      Self::VV => Some("VV"),
      Self::Vv => Some("Vv"),
      Self::VW => Some("VW"),
      Self::Vw => Some("Vw"),
      Self::VX => Some("VX"),
      Self::Vx => Some("Vx"),
      Self::VY => Some("VY"),
      Self::Vy => Some("Vy"),
      Self::VZ => Some("VZ"),
      Self::Vz => Some("Vz"),
      Self::vA => Some("vA"),
      Self::va => Some("va"),
      Self::vB => Some("vB"),
      Self::vb => Some("vb"),
      Self::vC => Some("vC"),
      Self::vc => Some("vc"),
      Self::vD => Some("vD"),
      Self::vd => Some("vd"),
      Self::vE => Some("vE"),
      Self::ve => Some("ve"),
      Self::vF => Some("vF"),
      Self::vf => Some("vf"),
      Self::vG => Some("vG"),
      Self::vg => Some("vg"),
      Self::vH => Some("vH"),
      Self::vh => Some("vh"),
      Self::vI => Some("vI"),
      Self::vi => Some("vi"),
      Self::vJ => Some("vJ"),
      Self::vj => Some("vj"),
      Self::vK => Some("vK"),
      Self::vk => Some("vk"),
      Self::vL => Some("vL"),
      Self::vl => Some("vl"),
      Self::vM => Some("vM"),
      Self::vm => Some("vm"),
      Self::vN => Some("vN"),
      Self::vn => Some("vn"),
      Self::vO => Some("vO"),
      Self::vo => Some("vo"),
      Self::vP => Some("vP"),
      Self::vp => Some("vp"),
      Self::vQ => Some("vQ"),
      Self::vq => Some("vq"),
      Self::vR => Some("vR"),
      Self::vr => Some("vr"),
      Self::vS => Some("vS"),
      Self::vs => Some("vs"),
      Self::vT => Some("vT"),
      Self::vt => Some("vt"),
      Self::vU => Some("vU"),
      Self::vu => Some("vu"),
      Self::vV => Some("vV"),
      Self::vv => Some("vv"),
      Self::vW => Some("vW"),
      Self::vw => Some("vw"),
      Self::vX => Some("vX"),
      Self::vx => Some("vx"),
      Self::vY => Some("vY"),
      Self::vy => Some("vy"),
      Self::vZ => Some("vZ"),
      Self::vz => Some("vz"),
      Self::WA => Some("WA"),
      Self::Wa => Some("Wa"),
      Self::WB => Some("WB"),
      Self::Wb => Some("Wb"),
      Self::WC => Some("WC"),
      Self::Wc => Some("Wc"),
      Self::WD => Some("WD"),
      Self::Wd => Some("Wd"),
      Self::WE => Some("WE"),
      Self::We => Some("We"),
      Self::WF => Some("WF"),
      Self::Wf => Some("Wf"),
      Self::WG => Some("WG"),
      Self::Wg => Some("Wg"),
      Self::WH => Some("WH"),
      Self::Wh => Some("Wh"),
      Self::WI => Some("WI"),
      Self::Wi => Some("Wi"),
      Self::WJ => Some("WJ"),
      Self::Wj => Some("Wj"),
      Self::WK => Some("WK"),
      Self::Wk => Some("Wk"),
      Self::WL => Some("WL"),
      Self::Wl => Some("Wl"),
      Self::WM => Some("WM"),
      Self::Wm => Some("Wm"),
      Self::WN => Some("WN"),
      Self::Wn => Some("Wn"),
      Self::WO => Some("WO"),
      Self::Wo => Some("Wo"),
      Self::WP => Some("WP"),
      Self::Wp => Some("Wp"),
      Self::WQ => Some("WQ"),
      Self::Wq => Some("Wq"),
      Self::WR => Some("WR"),
      Self::Wr => Some("Wr"),
      Self::WS => Some("WS"),
      Self::Ws => Some("Ws"),
      Self::WT => Some("WT"),
      Self::Wt => Some("Wt"),
      Self::WU => Some("WU"),
      Self::Wu => Some("Wu"),
      Self::WV => Some("WV"),
      Self::Wv => Some("Wv"),
      Self::WW => Some("WW"),
      Self::Ww => Some("Ww"),
      Self::WX => Some("WX"),
      Self::Wx => Some("Wx"),
      Self::WY => Some("WY"),
      Self::Wy => Some("Wy"),
      Self::WZ => Some("WZ"),
      Self::Wz => Some("Wz"),
      Self::wA => Some("wA"),
      Self::wa => Some("wa"),
      Self::wB => Some("wB"),
      Self::wb => Some("wb"),
      Self::wC => Some("wC"),
      Self::wc => Some("wc"),
      Self::wD => Some("wD"),
      Self::wd => Some("wd"),
      Self::wE => Some("wE"),
      Self::we => Some("we"),
      Self::wF => Some("wF"),
      Self::wf => Some("wf"),
      Self::wG => Some("wG"),
      Self::wg => Some("wg"),
      Self::wH => Some("wH"),
      Self::wh => Some("wh"),
      Self::wI => Some("wI"),
      Self::wi => Some("wi"),
      Self::wJ => Some("wJ"),
      Self::wj => Some("wj"),
      Self::wK => Some("wK"),
      Self::wk => Some("wk"),
      Self::wL => Some("wL"),
      Self::wl => Some("wl"),
      Self::wM => Some("wM"),
      Self::wm => Some("wm"),
      Self::wN => Some("wN"),
      Self::wn => Some("wn"),
      Self::wO => Some("wO"),
      Self::wo => Some("wo"),
      Self::wP => Some("wP"),
      Self::wp => Some("wp"),
      Self::wQ => Some("wQ"),
      Self::wq => Some("wq"),
      Self::wR => Some("wR"),
      Self::wr => Some("wr"),
      Self::wS => Some("wS"),
      Self::ws => Some("ws"),
      Self::wT => Some("wT"),
      Self::wt => Some("wt"),
      Self::wU => Some("wU"),
      Self::wu => Some("wu"),
      Self::wV => Some("wV"),
      Self::wv => Some("wv"),
      Self::wW => Some("wW"),
      Self::ww => Some("ww"),
      Self::wX => Some("wX"),
      Self::wx => Some("wx"),
      Self::wY => Some("wY"),
      Self::wy => Some("wy"),
      Self::wZ => Some("wZ"),
      Self::wz => Some("wz"),
      Self::XA => Some("XA"),
      Self::Xa => Some("Xa"),
      Self::XB => Some("XB"),
      Self::Xb => Some("Xb"),
      Self::XC => Some("XC"),
      Self::Xc => Some("Xc"),
      Self::XD => Some("XD"),
      Self::Xd => Some("Xd"),
      Self::XE => Some("XE"),
      Self::Xe => Some("Xe"),
      Self::XF => Some("XF"),
      Self::Xf => Some("Xf"),
      Self::XG => Some("XG"),
      Self::Xg => Some("Xg"),
      Self::XH => Some("XH"),
      Self::Xh => Some("Xh"),
      Self::XI => Some("XI"),
      Self::Xi => Some("Xi"),
      Self::XJ => Some("XJ"),
      Self::Xj => Some("Xj"),
      Self::XK => Some("XK"),
      Self::Xk => Some("Xk"),
      Self::XL => Some("XL"),
      Self::Xl => Some("Xl"),
      Self::XM => Some("XM"),
      Self::Xm => Some("Xm"),
      Self::XN => Some("XN"),
      Self::Xn => Some("Xn"),
      Self::XO => Some("XO"),
      Self::Xo => Some("Xo"),
      Self::XP => Some("XP"),
      Self::Xp => Some("Xp"),
      Self::XQ => Some("XQ"),
      Self::Xq => Some("Xq"),
      Self::XR => Some("XR"),
      Self::Xr => Some("Xr"),
      Self::XS => Some("XS"),
      Self::Xs => Some("Xs"),
      Self::XT => Some("XT"),
      Self::Xt => Some("Xt"),
      Self::XU => Some("XU"),
      Self::Xu => Some("Xu"),
      Self::XV => Some("XV"),
      Self::Xv => Some("Xv"),
      Self::XW => Some("XW"),
      Self::Xw => Some("Xw"),
      Self::XX => Some("XX"),
      Self::Xx => Some("Xx"),
      Self::XY => Some("XY"),
      Self::Xy => Some("Xy"),
      Self::XZ => Some("XZ"),
      Self::Xz => Some("Xz"),
      Self::xA => Some("xA"),
      Self::xa => Some("xa"),
      Self::xB => Some("xB"),
      Self::xb => Some("xb"),
      Self::xC => Some("xC"),
      Self::xc => Some("xc"),
      Self::xD => Some("xD"),
      Self::xd => Some("xd"),
      Self::xE => Some("xE"),
      Self::xe => Some("xe"),
      Self::xF => Some("xF"),
      Self::xf => Some("xf"),
      Self::xG => Some("xG"),
      Self::xg => Some("xg"),
      Self::xH => Some("xH"),
      Self::xh => Some("xh"),
      Self::xI => Some("xI"),
      Self::xi => Some("xi"),
      Self::xJ => Some("xJ"),
      Self::xj => Some("xj"),
      Self::xK => Some("xK"),
      Self::xk => Some("xk"),
      Self::xL => Some("xL"),
      Self::xl => Some("xl"),
      Self::xM => Some("xM"),
      Self::xm => Some("xm"),
      Self::xN => Some("xN"),
      Self::xn => Some("xn"),
      Self::xO => Some("xO"),
      Self::xo => Some("xo"),
      Self::xP => Some("xP"),
      Self::xp => Some("xp"),
      Self::xQ => Some("xQ"),
      Self::xq => Some("xq"),
      Self::xR => Some("xR"),
      Self::xr => Some("xr"),
      Self::xS => Some("xS"),
      Self::xs => Some("xs"),
      Self::xT => Some("xT"),
      Self::xt => Some("xt"),
      Self::xU => Some("xU"),
      Self::xu => Some("xu"),
      Self::xV => Some("xV"),
      Self::xv => Some("xv"),
      Self::xW => Some("xW"),
      Self::xw => Some("xw"),
      Self::xX => Some("xX"),
      Self::xx => Some("xx"),
      Self::xY => Some("xY"),
      Self::xy => Some("xy"),
      Self::xZ => Some("xZ"),
      Self::xz => Some("xz"),
      Self::YA => Some("YA"),
      Self::Ya => Some("Ya"),
      Self::YB => Some("YB"),
      Self::Yb => Some("Yb"),
      Self::YC => Some("YC"),
      Self::Yc => Some("Yc"),
      Self::YD => Some("YD"),
      Self::Yd => Some("Yd"),
      Self::YE => Some("YE"),
      Self::Ye => Some("Ye"),
      Self::YF => Some("YF"),
      Self::Yf => Some("Yf"),
      Self::YG => Some("YG"),
      Self::Yg => Some("Yg"),
      Self::YH => Some("YH"),
      Self::Yh => Some("Yh"),
      Self::YI => Some("YI"),
      Self::Yi => Some("Yi"),
      Self::YJ => Some("YJ"),
      Self::Yj => Some("Yj"),
      Self::YK => Some("YK"),
      Self::Yk => Some("Yk"),
      Self::YL => Some("YL"),
      Self::Yl => Some("Yl"),
      Self::YM => Some("YM"),
      Self::Ym => Some("Ym"),
      Self::YN => Some("YN"),
      Self::Yn => Some("Yn"),
      Self::YO => Some("YO"),
      Self::Yo => Some("Yo"),
      Self::YP => Some("YP"),
      Self::Yp => Some("Yp"),
      Self::YQ => Some("YQ"),
      Self::Yq => Some("Yq"),
      Self::YR => Some("YR"),
      Self::Yr => Some("Yr"),
      Self::YS => Some("YS"),
      Self::Ys => Some("Ys"),
      Self::YT => Some("YT"),
      Self::Yt => Some("Yt"),
      Self::YU => Some("YU"),
      Self::Yu => Some("Yu"),
      Self::YV => Some("YV"),
      Self::Yv => Some("Yv"),
      Self::YW => Some("YW"),
      Self::Yw => Some("Yw"),
      Self::YX => Some("YX"),
      Self::Yx => Some("Yx"),
      Self::YY => Some("YY"),
      Self::Yy => Some("Yy"),
      Self::YZ => Some("YZ"),
      Self::Yz => Some("Yz"),
      Self::yA => Some("yA"),
      Self::ya => Some("ya"),
      Self::yB => Some("yB"),
      Self::yb => Some("yb"),
      Self::yC => Some("yC"),
      Self::yc => Some("yc"),
      Self::yD => Some("yD"),
      Self::yd => Some("yd"),
      Self::yE => Some("yE"),
      Self::ye => Some("ye"),
      Self::yF => Some("yF"),
      Self::yf => Some("yf"),
      Self::yG => Some("yG"),
      Self::yg => Some("yg"),
      Self::yH => Some("yH"),
      Self::yh => Some("yh"),
      Self::yI => Some("yI"),
      Self::yi => Some("yi"),
      Self::yJ => Some("yJ"),
      Self::yj => Some("yj"),
      Self::yK => Some("yK"),
      Self::yk => Some("yk"),
      Self::yL => Some("yL"),
      Self::yl => Some("yl"),
      Self::yM => Some("yM"),
      Self::ym => Some("ym"),
      Self::yN => Some("yN"),
      Self::yn => Some("yn"),
      Self::yO => Some("yO"),
      Self::yo => Some("yo"),
      Self::yP => Some("yP"),
      Self::yp => Some("yp"),
      Self::yQ => Some("yQ"),
      Self::yq => Some("yq"),
      Self::yR => Some("yR"),
      Self::yr => Some("yr"),
      Self::yS => Some("yS"),
      Self::ys => Some("ys"),
      Self::yT => Some("yT"),
      Self::yt => Some("yt"),
      Self::yU => Some("yU"),
      Self::yu => Some("yu"),
      Self::yV => Some("yV"),
      Self::yv => Some("yv"),
      Self::yW => Some("yW"),
      Self::yw => Some("yw"),
      Self::yX => Some("yX"),
      Self::yx => Some("yx"),
      Self::yY => Some("yY"),
      Self::yy => Some("yy"),
      Self::yZ => Some("yZ"),
      Self::yz => Some("yz"),
      Self::ZA => Some("ZA"),
      Self::Za => Some("Za"),
      Self::ZB => Some("ZB"),
      Self::Zb => Some("Zb"),
      Self::ZC => Some("ZC"),
      Self::Zc => Some("Zc"),
      Self::ZD => Some("ZD"),
      Self::Zd => Some("Zd"),
      Self::ZE => Some("ZE"),
      Self::Ze => Some("Ze"),
      Self::ZF => Some("ZF"),
      Self::Zf => Some("Zf"),
      Self::ZG => Some("ZG"),
      Self::Zg => Some("Zg"),
      Self::ZH => Some("ZH"),
      Self::Zh => Some("Zh"),
      Self::ZI => Some("ZI"),
      Self::Zi => Some("Zi"),
      Self::ZJ => Some("ZJ"),
      Self::Zj => Some("Zj"),
      Self::ZK => Some("ZK"),
      Self::Zk => Some("Zk"),
      Self::ZL => Some("ZL"),
      Self::Zl => Some("Zl"),
      Self::ZM => Some("ZM"),
      Self::Zm => Some("Zm"),
      Self::ZN => Some("ZN"),
      Self::Zn => Some("Zn"),
      Self::ZO => Some("ZO"),
      Self::Zo => Some("Zo"),
      Self::ZP => Some("ZP"),
      Self::Zp => Some("Zp"),
      Self::ZQ => Some("ZQ"),
      Self::Zq => Some("Zq"),
      Self::ZR => Some("ZR"),
      Self::Zr => Some("Zr"),
      Self::ZS => Some("ZS"),
      Self::Zs => Some("Zs"),
      Self::ZT => Some("ZT"),
      Self::Zt => Some("Zt"),
      Self::ZU => Some("ZU"),
      Self::Zu => Some("Zu"),
      Self::ZV => Some("ZV"),
      Self::Zv => Some("Zv"),
      Self::ZW => Some("ZW"),
      Self::Zw => Some("Zw"),
      Self::ZX => Some("ZX"),
      Self::Zx => Some("Zx"),
      Self::ZY => Some("ZY"),
      Self::Zy => Some("Zy"),
      Self::ZZ => Some("ZZ"),
      Self::Zz => Some("Zz"),
      Self::zA => Some("zA"),
      Self::za => Some("za"),
      Self::zB => Some("zB"),
      Self::zb => Some("zb"),
      Self::zC => Some("zC"),
      Self::zc => Some("zc"),
      Self::zD => Some("zD"),
      Self::zd => Some("zd"),
      Self::zE => Some("zE"),
      Self::ze => Some("ze"),
      Self::zF => Some("zF"),
      Self::zf => Some("zf"),
      Self::zG => Some("zG"),
      Self::zg => Some("zg"),
      Self::zH => Some("zH"),
      Self::zh => Some("zh"),
      Self::zI => Some("zI"),
      Self::zi => Some("zi"),
      Self::zJ => Some("zJ"),
      Self::zj => Some("zj"),
      Self::zK => Some("zK"),
      Self::zk => Some("zk"),
      Self::zL => Some("zL"),
      Self::zl => Some("zl"),
      Self::zM => Some("zM"),
      Self::zm => Some("zm"),
      Self::zN => Some("zN"),
      Self::zn => Some("zn"),
      Self::zO => Some("zO"),
      Self::zo => Some("zo"),
      Self::zP => Some("zP"),
      Self::zp => Some("zp"),
      Self::zQ => Some("zQ"),
      Self::zq => Some("zq"),
      Self::zR => Some("zR"),
      Self::zr => Some("zr"),
      Self::zS => Some("zS"),
      Self::zs => Some("zs"),
      Self::zT => Some("zT"),
      Self::zt => Some("zt"),
      Self::zU => Some("zU"),
      Self::zu => Some("zu"),
      Self::zV => Some("zV"),
      Self::zv => Some("zv"),
      Self::zW => Some("zW"),
      Self::zw => Some("zw"),
      Self::zX => Some("zX"),
      Self::zx => Some("zx"),
      Self::zY => Some("zY"),
      Self::zy => Some("zy"),
      Self::zZ => Some("zZ"),
      Self::zz => Some("zz"),
      Self::aAA => Some("aAA"),
      Self::aAa => Some("aAa"),
      Self::aAB => Some("aAB"),
      Self::aAb => Some("aAb"),
      Self::aAC => Some("aAC"),
      Self::aAc => Some("aAc"),
      Self::aAD => Some("aAD"),
      Self::aAd => Some("aAd"),
      Self::aAE => Some("aAE"),
      Self::aAe => Some("aAe"),
      Self::aAF => Some("aAF"),
      Self::aAf => Some("aAf"),
      Self::aAG => Some("aAG"),
      Self::aAg => Some("aAg"),
      Self::aAH => Some("aAH"),
      Self::aAh => Some("aAh"),
      Self::aAI => Some("aAI"),
      Self::aAi => Some("aAi"),
      Self::aAJ => Some("aAJ"),
      Self::aAj => Some("aAj"),
      Self::aAK => Some("aAK"),
      Self::aAk => Some("aAk"),
      Self::aAL => Some("aAL"),
      Self::aAl => Some("aAl"),
      Self::aAM => Some("aAM"),
      Self::aAm => Some("aAm"),
      Self::aAN => Some("aAN"),
      Self::aAn => Some("aAn"),
      Self::aAO => Some("aAO"),
      Self::aAo => Some("aAo"),
      Self::aAP => Some("aAP"),
      Self::aAp => Some("aAp"),
      Self::aAQ => Some("aAQ"),
      Self::aAq => Some("aAq"),
      Self::aAR => Some("aAR"),
      Self::aAr => Some("aAr"),
      Self::aAS => Some("aAS"),
      Self::aAs => Some("aAs"),
      Self::aAT => Some("aAT"),
      Self::aAt => Some("aAt"),
      Self::aAU => Some("aAU"),
      Self::aAu => Some("aAu"),
      Self::aAV => Some("aAV"),
      Self::aAv => Some("aAv"),
      Self::aAW => Some("aAW"),
      Self::aAw => Some("aAw"),
      Self::aAX => Some("aAX"),
      Self::aAx => Some("aAx"),
      Self::aAY => Some("aAY"),
      Self::aAy => Some("aAy"),
      Self::aAZ => Some("aAZ"),
      Self::aAz => Some("aAz"),
      Self::aaA => Some("aaA"),
      Self::aaa => Some("aaa"),
      Self::aaB => Some("aaB"),
      Self::aab => Some("aab"),
      Self::aaC => Some("aaC"),
      Self::aac => Some("aac"),
      Self::aaD => Some("aaD"),
      Self::aad => Some("aad"),
      Self::aaE => Some("aaE"),
      Self::aae => Some("aae"),
      Self::aaF => Some("aaF"),
      Self::aaf => Some("aaf"),
      Self::aaG => Some("aaG"),
      Self::aag => Some("aag"),
      Self::aaH => Some("aaH"),
      Self::aah => Some("aah"),
      Self::aaI => Some("aaI"),
      Self::aai => Some("aai"),
      Self::aaJ => Some("aaJ"),
      Self::aaj => Some("aaj"),
      Self::aaK => Some("aaK"),
      Self::aak => Some("aak"),
      Self::aaL => Some("aaL"),
      Self::aal => Some("aal"),
      Self::aaM => Some("aaM"),
      Self::aam => Some("aam"),
      Self::aaN => Some("aaN"),
      Self::aan => Some("aan"),
      Self::aaO => Some("aaO"),
      Self::aao => Some("aao"),
      Self::aaP => Some("aaP"),
      Self::aap => Some("aap"),
      Self::aaQ => Some("aaQ"),
      Self::aaq => Some("aaq"),
      Self::aaR => Some("aaR"),
      Self::aar => Some("aar"),
      Self::aaS => Some("aaS"),
      Self::aas => Some("aas"),
      Self::aaT => Some("aaT"),
      Self::aat => Some("aat"),
      Self::aaU => Some("aaU"),
      Self::aau => Some("aau"),
      Self::aaV => Some("aaV"),
      Self::aav => Some("aav"),
      Self::aaW => Some("aaW"),
      Self::aaw => Some("aaw"),
      Self::aaX => Some("aaX"),
      Self::aax => Some("aax"),
      Self::aaY => Some("aaY"),
      Self::aay => Some("aay"),
      Self::aaZ => Some("aaZ"),
      Self::aaz => Some("aaz"),
      Self::aBA => Some("aBA"),
      Self::aBa => Some("aBa"),
      Self::aBB => Some("aBB"),
      Self::aBb => Some("aBb"),
      Self::aBC => Some("aBC"),
      Self::aBc => Some("aBc"),
      Self::aBD => Some("aBD"),
      Self::aBd => Some("aBd"),
      Self::aBE => Some("aBE"),
      Self::aBe => Some("aBe"),
      Self::aBF => Some("aBF"),
      Self::aBf => Some("aBf"),
      Self::aBG => Some("aBG"),
      Self::aBg => Some("aBg"),
      Self::aBH => Some("aBH"),
      Self::aBh => Some("aBh"),
      Self::aBI => Some("aBI"),
      Self::aBi => Some("aBi"),
      Self::aBJ => Some("aBJ"),
      Self::aBj => Some("aBj"),
      Self::aBK => Some("aBK"),
      Self::aBk => Some("aBk"),
      Self::aBL => Some("aBL"),
      Self::aBl => Some("aBl"),
      Self::aBM => Some("aBM"),
      Self::aBm => Some("aBm"),
      Self::aBN => Some("aBN"),
      Self::aBn => Some("aBn"),
      Self::aBO => Some("aBO"),
      Self::aBo => Some("aBo"),
      Self::aBP => Some("aBP"),
      Self::aBp => Some("aBp"),
      Self::aBQ => Some("aBQ"),
      Self::aBq => Some("aBq"),
      Self::aBR => Some("aBR"),
      Self::aBr => Some("aBr"),
      Self::aBS => Some("aBS"),
      Self::aBs => Some("aBs"),
      Self::aBT => Some("aBT"),
      Self::aBt => Some("aBt"),
      Self::aBU => Some("aBU"),
      Self::aBu => Some("aBu"),
      Self::aBV => Some("aBV"),
      Self::aBv => Some("aBv"),
      Self::aBW => Some("aBW"),
      Self::aBw => Some("aBw"),
      Self::aBX => Some("aBX"),
      Self::aBx => Some("aBx"),
      Self::aBY => Some("aBY"),
      Self::aBy => Some("aBy"),
      Self::aBZ => Some("aBZ"),
      Self::aBz => Some("aBz"),
      Self::abA => Some("abA"),
      Self::aba => Some("aba"),
      Self::abB => Some("abB"),
      Self::abb => Some("abb"),
      Self::abC => Some("abC"),
      Self::abc => Some("abc"),
      Self::abD => Some("abD"),
      Self::abd => Some("abd"),
      Self::abE => Some("abE"),
      Self::abe => Some("abe"),
      Self::abF => Some("abF"),
      Self::abf => Some("abf"),
      Self::abG => Some("abG"),
      Self::abg => Some("abg"),
      Self::abH => Some("abH"),
      Self::abh => Some("abh"),
      Self::abI => Some("abI"),
      Self::abi => Some("abi"),
      Self::abJ => Some("abJ"),
      Self::abj => Some("abj"),
      Self::abK => Some("abK"),
      Self::abk => Some("abk"),
      Self::abL => Some("abL"),
      Self::abl => Some("abl"),
      Self::abM => Some("abM"),
      Self::abm => Some("abm"),
      Self::abN => Some("abN"),
      Self::abn => Some("abn"),
      Self::abO => Some("abO"),
      Self::abo => Some("abo"),
      Self::abP => Some("abP"),
      Self::abp => Some("abp"),
      Self::abQ => Some("abQ"),
      Self::abq => Some("abq"),
      Self::abR => Some("abR"),
      Self::abr => Some("abr"),
      Self::abS => Some("abS"),
      Self::abs => Some("abs"),
      Self::abT => Some("abT"),
      Self::abt => Some("abt"),
      Self::abU => Some("abU"),
      Self::abu => Some("abu"),
      Self::abV => Some("abV"),
      Self::abv => Some("abv"),
      Self::abW => Some("abW"),
      Self::abw => Some("abw"),
      Self::abX => Some("abX"),
      Self::abx => Some("abx"),
      Self::abY => Some("abY"),
      Self::aby => Some("aby"),
      Self::abZ => Some("abZ"),
      Self::abz => Some("abz"),
      Self::aCA => Some("aCA"),
      Self::aCa => Some("aCa"),
      Self::aCB => Some("aCB"),
      Self::aCb => Some("aCb"),
      Self::aCC => Some("aCC"),
      Self::aCc => Some("aCc"),
      Self::aCD => Some("aCD"),
      Self::aCd => Some("aCd"),
      Self::aCE => Some("aCE"),
      Self::aCe => Some("aCe"),
      Self::aCF => Some("aCF"),
      Self::aCf => Some("aCf"),
      Self::aCG => Some("aCG"),
      Self::aCg => Some("aCg"),
      Self::aCH => Some("aCH"),
      Self::aCh => Some("aCh"),
      Self::aCI => Some("aCI"),
      Self::aCi => Some("aCi"),
      Self::aCJ => Some("aCJ"),
      Self::aCj => Some("aCj"),
      Self::aCK => Some("aCK"),
      Self::aCk => Some("aCk"),
      Self::aCL => Some("aCL"),
      Self::aCl => Some("aCl"),
      Self::aCM => Some("aCM"),
      Self::aCm => Some("aCm"),
      Self::aCN => Some("aCN"),
      Self::aCn => Some("aCn"),
      Self::aCO => Some("aCO"),
      Self::aCo => Some("aCo"),
      Self::aCP => Some("aCP"),
      Self::aCp => Some("aCp"),
      Self::aCQ => Some("aCQ"),
      Self::aCq => Some("aCq"),
      Self::aCR => Some("aCR"),
      Self::aCr => Some("aCr"),
      Self::aCS => Some("aCS"),
      Self::aCs => Some("aCs"),
      Self::aCT => Some("aCT"),
      Self::aCt => Some("aCt"),
      Self::aCU => Some("aCU"),
      Self::aCu => Some("aCu"),
      Self::aCV => Some("aCV"),
      Self::aCv => Some("aCv"),
      Self::aCW => Some("aCW"),
      Self::aCw => Some("aCw"),
      Self::aCX => Some("aCX"),
      Self::aCx => Some("aCx"),
      Self::aCY => Some("aCY"),
      Self::aCy => Some("aCy"),
      Self::aCZ => Some("aCZ"),
      Self::aCz => Some("aCz"),
      Self::acA => Some("acA"),
      Self::aca => Some("aca"),
      Self::acB => Some("acB"),
      Self::acb => Some("acb"),
      Self::acC => Some("acC"),
      Self::acc => Some("acc"),
      Self::acD => Some("acD"),
      Self::acd => Some("acd"),
      Self::acE => Some("acE"),
      Self::ace => Some("ace"),
      Self::acF => Some("acF"),
      Self::acf => Some("acf"),
      Self::acG => Some("acG"),
      Self::acg => Some("acg"),
      Self::acH => Some("acH"),
      Self::ach => Some("ach"),
      Self::acI => Some("acI"),
      Self::aci => Some("aci"),
      Self::acJ => Some("acJ"),
      Self::acj => Some("acj"),
      Self::acK => Some("acK"),
      Self::ack => Some("ack"),
      Self::acL => Some("acL"),
      Self::acl => Some("acl"),
      Self::acM => Some("acM"),
      Self::acm => Some("acm"),
      Self::acN => Some("acN"),
      Self::acn => Some("acn"),
      Self::acO => Some("acO"),
      Self::aco => Some("aco"),
      Self::acP => Some("acP"),
      Self::acp => Some("acp"),
      Self::acQ => Some("acQ"),
      Self::acq => Some("acq"),
      Self::acR => Some("acR"),
      Self::acr => Some("acr"),
      Self::acS => Some("acS"),
      Self::acs => Some("acs"),
      Self::acT => Some("acT"),
      Self::act => Some("act"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Tag {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Tag {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Tag {
    type Output = Tag;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Tag {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Tag {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Tag {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_MEMORY_LOBBY_CATEGORY: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_MEMORY_LOBBY_CATEGORY: i32 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_MEMORY_LOBBY_CATEGORY: [MemoryLobbyCategory; 3] = [
  MemoryLobbyCategory::None,
  MemoryLobbyCategory::UILobbySpecial,
  MemoryLobbyCategory::UILobbySpecial2,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct MemoryLobbyCategory(pub i32);
#[allow(non_upper_case_globals)]
impl MemoryLobbyCategory {
  pub const None: Self = Self(0);
  pub const UILobbySpecial: Self = Self(1);
  pub const UILobbySpecial2: Self = Self(2);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::UILobbySpecial,
    Self::UILobbySpecial2,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::UILobbySpecial => Some("UILobbySpecial"),
      Self::UILobbySpecial2 => Some("UILobbySpecial2"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for MemoryLobbyCategory {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for MemoryLobbyCategory {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for MemoryLobbyCategory {
    type Output = MemoryLobbyCategory;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for MemoryLobbyCategory {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for MemoryLobbyCategory {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for MemoryLobbyCategory {}
pub enum CharacterDialogExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterDialogExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterDialogExcel<'a> {
  type Inner = CharacterDialogExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterDialogExcel<'a> {
  pub const VT_CHARACTER_ID: flatbuffers::VOffsetT = 4;
  pub const VT_COSTUME_UNIQUE_ID: flatbuffers::VOffsetT = 6;
  pub const VT_DISPLAY_ORDER: flatbuffers::VOffsetT = 8;
  pub const VT_PRODUCTION_STEP: flatbuffers::VOffsetT = 10;
  pub const VT_DIALOG_CATEGORY: flatbuffers::VOffsetT = 12;
  pub const VT_DIALOG_CONDITION: flatbuffers::VOffsetT = 14;
  pub const VT_ANNIVERSARY: flatbuffers::VOffsetT = 16;
  pub const VT_START_DATE: flatbuffers::VOffsetT = 18;
  pub const VT_END_DATE: flatbuffers::VOffsetT = 20;
  pub const VT_GROUP_ID: flatbuffers::VOffsetT = 22;
  pub const VT_DIALOG_TYPE: flatbuffers::VOffsetT = 24;
  pub const VT_ACTION_NAME: flatbuffers::VOffsetT = 26;
  pub const VT_DURATION: flatbuffers::VOffsetT = 28;
  pub const VT_ANIMATION_NAME: flatbuffers::VOffsetT = 30;
  pub const VT_LOCALIZE_KR: flatbuffers::VOffsetT = 32;
  pub const VT_LOCALIZE_JP: flatbuffers::VOffsetT = 34;
  pub const VT_VOICE_ID: flatbuffers::VOffsetT = 36;
  pub const VT_APPLY_POSITION: flatbuffers::VOffsetT = 38;
  pub const VT_POS_X: flatbuffers::VOffsetT = 40;
  pub const VT_POS_Y: flatbuffers::VOffsetT = 42;
  pub const VT_COLLECTION_VISIBLE: flatbuffers::VOffsetT = 44;
  pub const VT_CV_COLLECTION_TYPE: flatbuffers::VOffsetT = 46;
  pub const VT_UNLOCK_FAVOR_RANK: flatbuffers::VOffsetT = 48;
  pub const VT_UNLOCK_EQUIP_WEAPON: flatbuffers::VOffsetT = 50;
  pub const VT_LOCALIZE_CV_GROUP: flatbuffers::VOffsetT = 52;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterDialogExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterDialogExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterDialogExcel<'bldr>> {
    let mut builder = CharacterDialogExcelBuilder::new(_fbb);
    builder.add_unlock_favor_rank(args.unlock_favor_rank);
    builder.add_duration(args.duration);
    builder.add_group_id(args.group_id);
    builder.add_display_order(args.display_order);
    builder.add_costume_unique_id(args.costume_unique_id);
    builder.add_character_id(args.character_id);
    if let Some(x) = args.localize_cv_group { builder.add_localize_cv_group(x); }
    builder.add_cv_collection_type(args.cv_collection_type);
    builder.add_pos_y(args.pos_y);
    builder.add_pos_x(args.pos_x);
    if let Some(x) = args.voice_id { builder.add_voice_id(x); }
    if let Some(x) = args.localize_jp { builder.add_localize_jp(x); }
    if let Some(x) = args.localize_kr { builder.add_localize_kr(x); }
    if let Some(x) = args.animation_name { builder.add_animation_name(x); }
    if let Some(x) = args.action_name { builder.add_action_name(x); }
    builder.add_dialog_type(args.dialog_type);
    if let Some(x) = args.end_date { builder.add_end_date(x); }
    if let Some(x) = args.start_date { builder.add_start_date(x); }
    builder.add_anniversary(args.anniversary);
    builder.add_dialog_condition(args.dialog_condition);
    builder.add_dialog_category(args.dialog_category);
    builder.add_production_step(args.production_step);
    builder.add_unlock_equip_weapon(args.unlock_equip_weapon);
    builder.add_collection_visible(args.collection_visible);
    builder.add_apply_position(args.apply_position);
    builder.finish()
  }


  #[inline]
  pub fn character_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterDialogExcel::VT_CHARACTER_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn costume_unique_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterDialogExcel::VT_COSTUME_UNIQUE_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn display_order(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterDialogExcel::VT_DISPLAY_ORDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn production_step(&self) -> ProductionStep {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ProductionStep>(CharacterDialogExcel::VT_PRODUCTION_STEP, Some(ProductionStep::ToDo)).unwrap()}
  }
  #[inline]
  pub fn dialog_category(&self) -> DialogCategory {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DialogCategory>(CharacterDialogExcel::VT_DIALOG_CATEGORY, Some(DialogCategory::Cafe)).unwrap()}
  }
  #[inline]
  pub fn dialog_condition(&self) -> DialogCondition {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DialogCondition>(CharacterDialogExcel::VT_DIALOG_CONDITION, Some(DialogCondition::Idle)).unwrap()}
  }
  #[inline]
  pub fn anniversary(&self) -> Anniversary {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Anniversary>(CharacterDialogExcel::VT_ANNIVERSARY, Some(Anniversary::None)).unwrap()}
  }
  #[inline]
  pub fn start_date(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogExcel::VT_START_DATE, None)}
  }
  #[inline]
  pub fn end_date(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogExcel::VT_END_DATE, None)}
  }
  #[inline]
  pub fn group_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterDialogExcel::VT_GROUP_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn dialog_type(&self) -> DialogType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DialogType>(CharacterDialogExcel::VT_DIALOG_TYPE, Some(DialogType::Talk)).unwrap()}
  }
  #[inline]
  pub fn action_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogExcel::VT_ACTION_NAME, None)}
  }
  #[inline]
  pub fn duration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterDialogExcel::VT_DURATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn animation_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogExcel::VT_ANIMATION_NAME, None)}
  }
  #[inline]
  pub fn localize_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogExcel::VT_LOCALIZE_KR, None)}
  }
  #[inline]
  pub fn localize_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogExcel::VT_LOCALIZE_JP, None)}
  }
  #[inline]
  pub fn voice_id(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(CharacterDialogExcel::VT_VOICE_ID, None)}
  }
  #[inline]
  pub fn apply_position(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterDialogExcel::VT_APPLY_POSITION, Some(false)).unwrap()}
  }
  #[inline]
  pub fn pos_x(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CharacterDialogExcel::VT_POS_X, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn pos_y(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CharacterDialogExcel::VT_POS_Y, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn collection_visible(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterDialogExcel::VT_COLLECTION_VISIBLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn cv_collection_type(&self) -> CVCollectionType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<CVCollectionType>(CharacterDialogExcel::VT_CV_COLLECTION_TYPE, Some(CVCollectionType::CVNormal)).unwrap()}
  }
  #[inline]
  pub fn unlock_favor_rank(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterDialogExcel::VT_UNLOCK_FAVOR_RANK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unlock_equip_weapon(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterDialogExcel::VT_UNLOCK_EQUIP_WEAPON, Some(false)).unwrap()}
  }
  #[inline]
  pub fn localize_cv_group(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterDialogExcel::VT_LOCALIZE_CV_GROUP, None)}
  }
}

impl flatbuffers::Verifiable for CharacterDialogExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("character_id", Self::VT_CHARACTER_ID, false)?
     .visit_field::<i64>("costume_unique_id", Self::VT_COSTUME_UNIQUE_ID, false)?
     .visit_field::<i64>("display_order", Self::VT_DISPLAY_ORDER, false)?
     .visit_field::<ProductionStep>("production_step", Self::VT_PRODUCTION_STEP, false)?
     .visit_field::<DialogCategory>("dialog_category", Self::VT_DIALOG_CATEGORY, false)?
     .visit_field::<DialogCondition>("dialog_condition", Self::VT_DIALOG_CONDITION, false)?
     .visit_field::<Anniversary>("anniversary", Self::VT_ANNIVERSARY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("start_date", Self::VT_START_DATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("end_date", Self::VT_END_DATE, false)?
     .visit_field::<i64>("group_id", Self::VT_GROUP_ID, false)?
     .visit_field::<DialogType>("dialog_type", Self::VT_DIALOG_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("action_name", Self::VT_ACTION_NAME, false)?
     .visit_field::<i64>("duration", Self::VT_DURATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("animation_name", Self::VT_ANIMATION_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("localize_kr", Self::VT_LOCALIZE_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("localize_jp", Self::VT_LOCALIZE_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("voice_id", Self::VT_VOICE_ID, false)?
     .visit_field::<bool>("apply_position", Self::VT_APPLY_POSITION, false)?
     .visit_field::<f32>("pos_x", Self::VT_POS_X, false)?
     .visit_field::<f32>("pos_y", Self::VT_POS_Y, false)?
     .visit_field::<bool>("collection_visible", Self::VT_COLLECTION_VISIBLE, false)?
     .visit_field::<CVCollectionType>("cv_collection_type", Self::VT_CV_COLLECTION_TYPE, false)?
     .visit_field::<i64>("unlock_favor_rank", Self::VT_UNLOCK_FAVOR_RANK, false)?
     .visit_field::<bool>("unlock_equip_weapon", Self::VT_UNLOCK_EQUIP_WEAPON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("localize_cv_group", Self::VT_LOCALIZE_CV_GROUP, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterDialogExcelArgs<'a> {
    pub character_id: i64,
    pub costume_unique_id: i64,
    pub display_order: i64,
    pub production_step: ProductionStep,
    pub dialog_category: DialogCategory,
    pub dialog_condition: DialogCondition,
    pub anniversary: Anniversary,
    pub start_date: Option<flatbuffers::WIPOffset<&'a str>>,
    pub end_date: Option<flatbuffers::WIPOffset<&'a str>>,
    pub group_id: i64,
    pub dialog_type: DialogType,
    pub action_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub duration: i64,
    pub animation_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub localize_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub localize_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub voice_id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub apply_position: bool,
    pub pos_x: f32,
    pub pos_y: f32,
    pub collection_visible: bool,
    pub cv_collection_type: CVCollectionType,
    pub unlock_favor_rank: i64,
    pub unlock_equip_weapon: bool,
    pub localize_cv_group: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for CharacterDialogExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterDialogExcelArgs {
      character_id: 0,
      costume_unique_id: 0,
      display_order: 0,
      production_step: ProductionStep::ToDo,
      dialog_category: DialogCategory::Cafe,
      dialog_condition: DialogCondition::Idle,
      anniversary: Anniversary::None,
      start_date: None,
      end_date: None,
      group_id: 0,
      dialog_type: DialogType::Talk,
      action_name: None,
      duration: 0,
      animation_name: None,
      localize_kr: None,
      localize_jp: None,
      voice_id: None,
      apply_position: false,
      pos_x: 0.0,
      pos_y: 0.0,
      collection_visible: false,
      cv_collection_type: CVCollectionType::CVNormal,
      unlock_favor_rank: 0,
      unlock_equip_weapon: false,
      localize_cv_group: None,
    }
  }
}

pub struct CharacterDialogExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterDialogExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_character_id(&mut self, character_id: i64) {
    self.fbb_.push_slot::<i64>(CharacterDialogExcel::VT_CHARACTER_ID, character_id, 0);
  }
  #[inline]
  pub fn add_costume_unique_id(&mut self, costume_unique_id: i64) {
    self.fbb_.push_slot::<i64>(CharacterDialogExcel::VT_COSTUME_UNIQUE_ID, costume_unique_id, 0);
  }
  #[inline]
  pub fn add_display_order(&mut self, display_order: i64) {
    self.fbb_.push_slot::<i64>(CharacterDialogExcel::VT_DISPLAY_ORDER, display_order, 0);
  }
  #[inline]
  pub fn add_production_step(&mut self, production_step: ProductionStep) {
    self.fbb_.push_slot::<ProductionStep>(CharacterDialogExcel::VT_PRODUCTION_STEP, production_step, ProductionStep::ToDo);
  }
  #[inline]
  pub fn add_dialog_category(&mut self, dialog_category: DialogCategory) {
    self.fbb_.push_slot::<DialogCategory>(CharacterDialogExcel::VT_DIALOG_CATEGORY, dialog_category, DialogCategory::Cafe);
  }
  #[inline]
  pub fn add_dialog_condition(&mut self, dialog_condition: DialogCondition) {
    self.fbb_.push_slot::<DialogCondition>(CharacterDialogExcel::VT_DIALOG_CONDITION, dialog_condition, DialogCondition::Idle);
  }
  #[inline]
  pub fn add_anniversary(&mut self, anniversary: Anniversary) {
    self.fbb_.push_slot::<Anniversary>(CharacterDialogExcel::VT_ANNIVERSARY, anniversary, Anniversary::None);
  }
  #[inline]
  pub fn add_start_date(&mut self, start_date: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogExcel::VT_START_DATE, start_date);
  }
  #[inline]
  pub fn add_end_date(&mut self, end_date: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogExcel::VT_END_DATE, end_date);
  }
  #[inline]
  pub fn add_group_id(&mut self, group_id: i64) {
    self.fbb_.push_slot::<i64>(CharacterDialogExcel::VT_GROUP_ID, group_id, 0);
  }
  #[inline]
  pub fn add_dialog_type(&mut self, dialog_type: DialogType) {
    self.fbb_.push_slot::<DialogType>(CharacterDialogExcel::VT_DIALOG_TYPE, dialog_type, DialogType::Talk);
  }
  #[inline]
  pub fn add_action_name(&mut self, action_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogExcel::VT_ACTION_NAME, action_name);
  }
  #[inline]
  pub fn add_duration(&mut self, duration: i64) {
    self.fbb_.push_slot::<i64>(CharacterDialogExcel::VT_DURATION, duration, 0);
  }
  #[inline]
  pub fn add_animation_name(&mut self, animation_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogExcel::VT_ANIMATION_NAME, animation_name);
  }
  #[inline]
  pub fn add_localize_kr(&mut self, localize_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogExcel::VT_LOCALIZE_KR, localize_kr);
  }
  #[inline]
  pub fn add_localize_jp(&mut self, localize_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogExcel::VT_LOCALIZE_JP, localize_jp);
  }
  #[inline]
  pub fn add_voice_id(&mut self, voice_id: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogExcel::VT_VOICE_ID, voice_id);
  }
  #[inline]
  pub fn add_apply_position(&mut self, apply_position: bool) {
    self.fbb_.push_slot::<bool>(CharacterDialogExcel::VT_APPLY_POSITION, apply_position, false);
  }
  #[inline]
  pub fn add_pos_x(&mut self, pos_x: f32) {
    self.fbb_.push_slot::<f32>(CharacterDialogExcel::VT_POS_X, pos_x, 0.0);
  }
  #[inline]
  pub fn add_pos_y(&mut self, pos_y: f32) {
    self.fbb_.push_slot::<f32>(CharacterDialogExcel::VT_POS_Y, pos_y, 0.0);
  }
  #[inline]
  pub fn add_collection_visible(&mut self, collection_visible: bool) {
    self.fbb_.push_slot::<bool>(CharacterDialogExcel::VT_COLLECTION_VISIBLE, collection_visible, false);
  }
  #[inline]
  pub fn add_cv_collection_type(&mut self, cv_collection_type: CVCollectionType) {
    self.fbb_.push_slot::<CVCollectionType>(CharacterDialogExcel::VT_CV_COLLECTION_TYPE, cv_collection_type, CVCollectionType::CVNormal);
  }
  #[inline]
  pub fn add_unlock_favor_rank(&mut self, unlock_favor_rank: i64) {
    self.fbb_.push_slot::<i64>(CharacterDialogExcel::VT_UNLOCK_FAVOR_RANK, unlock_favor_rank, 0);
  }
  #[inline]
  pub fn add_unlock_equip_weapon(&mut self, unlock_equip_weapon: bool) {
    self.fbb_.push_slot::<bool>(CharacterDialogExcel::VT_UNLOCK_EQUIP_WEAPON, unlock_equip_weapon, false);
  }
  #[inline]
  pub fn add_localize_cv_group(&mut self, localize_cv_group: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterDialogExcel::VT_LOCALIZE_CV_GROUP, localize_cv_group);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterDialogExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterDialogExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterDialogExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterDialogExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterDialogExcel");
      ds.field("character_id", &self.character_id());
      ds.field("costume_unique_id", &self.costume_unique_id());
      ds.field("display_order", &self.display_order());
      ds.field("production_step", &self.production_step());
      ds.field("dialog_category", &self.dialog_category());
      ds.field("dialog_condition", &self.dialog_condition());
      ds.field("anniversary", &self.anniversary());
      ds.field("start_date", &self.start_date());
      ds.field("end_date", &self.end_date());
      ds.field("group_id", &self.group_id());
      ds.field("dialog_type", &self.dialog_type());
      ds.field("action_name", &self.action_name());
      ds.field("duration", &self.duration());
      ds.field("animation_name", &self.animation_name());
      ds.field("localize_kr", &self.localize_kr());
      ds.field("localize_jp", &self.localize_jp());
      ds.field("voice_id", &self.voice_id());
      ds.field("apply_position", &self.apply_position());
      ds.field("pos_x", &self.pos_x());
      ds.field("pos_y", &self.pos_y());
      ds.field("collection_visible", &self.collection_visible());
      ds.field("cv_collection_type", &self.cv_collection_type());
      ds.field("unlock_favor_rank", &self.unlock_favor_rank());
      ds.field("unlock_equip_weapon", &self.unlock_equip_weapon());
      ds.field("localize_cv_group", &self.localize_cv_group());
      ds.finish()
  }
}
pub enum AcademyFavorScheduleExcelTableOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AcademyFavorScheduleExcelTable<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AcademyFavorScheduleExcelTable<'a> {
  type Inner = AcademyFavorScheduleExcelTable<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AcademyFavorScheduleExcelTable<'a> {
  pub const VT_DATA_LIST: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AcademyFavorScheduleExcelTable { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AcademyFavorScheduleExcelTableArgs<'args>
  ) -> flatbuffers::WIPOffset<AcademyFavorScheduleExcelTable<'bldr>> {
    let mut builder = AcademyFavorScheduleExcelTableBuilder::new(_fbb);
    if let Some(x) = args.data_list { builder.add_data_list(x); }
    builder.finish()
  }


  #[inline]
  pub fn data_list(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AcademyFavorScheduleExcel<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AcademyFavorScheduleExcel>>>>(AcademyFavorScheduleExcelTable::VT_DATA_LIST, None)}
  }
}

impl flatbuffers::Verifiable for AcademyFavorScheduleExcelTable<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<AcademyFavorScheduleExcel>>>>("data_list", Self::VT_DATA_LIST, false)?
     .finish();
    Ok(())
  }
}
pub struct AcademyFavorScheduleExcelTableArgs<'a> {
    pub data_list: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AcademyFavorScheduleExcel<'a>>>>>,
}
impl<'a> Default for AcademyFavorScheduleExcelTableArgs<'a> {
  #[inline]
  fn default() -> Self {
    AcademyFavorScheduleExcelTableArgs {
      data_list: None,
    }
  }
}

pub struct AcademyFavorScheduleExcelTableBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AcademyFavorScheduleExcelTableBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_data_list(&mut self, data_list: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<AcademyFavorScheduleExcel<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyFavorScheduleExcelTable::VT_DATA_LIST, data_list);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AcademyFavorScheduleExcelTableBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AcademyFavorScheduleExcelTableBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AcademyFavorScheduleExcelTable<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AcademyFavorScheduleExcelTable<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AcademyFavorScheduleExcelTable");
      ds.field("data_list", &self.data_list());
      ds.finish()
  }
}
pub enum AcademyFavorScheduleExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AcademyFavorScheduleExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AcademyFavorScheduleExcel<'a> {
  type Inner = AcademyFavorScheduleExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AcademyFavorScheduleExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CHARACTER_ID: flatbuffers::VOffsetT = 6;
  pub const VT_SCHEDULE_GROUP_ID: flatbuffers::VOffsetT = 8;
  pub const VT_ORDER_IN_GROUP: flatbuffers::VOffsetT = 10;
  pub const VT_LOCATION: flatbuffers::VOffsetT = 12;
  pub const VT_LOCALIZE_SCENARIO_ID: flatbuffers::VOffsetT = 14;
  pub const VT_FAVOR_RANK: flatbuffers::VOffsetT = 16;
  pub const VT_SECRET_STONE_AMOUNT: flatbuffers::VOffsetT = 18;
  pub const VT_SCENARIO_SRIPT_GROUP_ID: flatbuffers::VOffsetT = 20;
  pub const VT_REWARD_PARCEL_TYPE: flatbuffers::VOffsetT = 22;
  pub const VT_REWARD_PARCEL_ID: flatbuffers::VOffsetT = 24;
  pub const VT_REWARD_AMOUNT: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AcademyFavorScheduleExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AcademyFavorScheduleExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<AcademyFavorScheduleExcel<'bldr>> {
    let mut builder = AcademyFavorScheduleExcelBuilder::new(_fbb);
    builder.add_scenario_sript_group_id(args.scenario_sript_group_id);
    builder.add_secret_stone_amount(args.secret_stone_amount);
    builder.add_favor_rank(args.favor_rank);
    builder.add_order_in_group(args.order_in_group);
    builder.add_schedule_group_id(args.schedule_group_id);
    builder.add_character_id(args.character_id);
    builder.add_id(args.id);
    if let Some(x) = args.reward_amount { builder.add_reward_amount(x); }
    if let Some(x) = args.reward_parcel_id { builder.add_reward_parcel_id(x); }
    if let Some(x) = args.reward_parcel_type { builder.add_reward_parcel_type(x); }
    builder.add_localize_scenario_id(args.localize_scenario_id);
    if let Some(x) = args.location { builder.add_location(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyFavorScheduleExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn character_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyFavorScheduleExcel::VT_CHARACTER_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn schedule_group_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyFavorScheduleExcel::VT_SCHEDULE_GROUP_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn order_in_group(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyFavorScheduleExcel::VT_ORDER_IN_GROUP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn location(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AcademyFavorScheduleExcel::VT_LOCATION, None)}
  }
  #[inline]
  pub fn localize_scenario_id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(AcademyFavorScheduleExcel::VT_LOCALIZE_SCENARIO_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn favor_rank(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyFavorScheduleExcel::VT_FAVOR_RANK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn secret_stone_amount(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyFavorScheduleExcel::VT_SECRET_STONE_AMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn scenario_sript_group_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AcademyFavorScheduleExcel::VT_SCENARIO_SRIPT_GROUP_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn reward_parcel_type(&self) -> Option<flatbuffers::Vector<'a, ParcelType>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, ParcelType>>>(AcademyFavorScheduleExcel::VT_REWARD_PARCEL_TYPE, None)}
  }
  #[inline]
  pub fn reward_parcel_id(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(AcademyFavorScheduleExcel::VT_REWARD_PARCEL_ID, None)}
  }
  #[inline]
  pub fn reward_amount(&self) -> Option<flatbuffers::Vector<'a, i64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i64>>>(AcademyFavorScheduleExcel::VT_REWARD_AMOUNT, None)}
  }
}

impl flatbuffers::Verifiable for AcademyFavorScheduleExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("id", Self::VT_ID, false)?
     .visit_field::<i64>("character_id", Self::VT_CHARACTER_ID, false)?
     .visit_field::<i64>("schedule_group_id", Self::VT_SCHEDULE_GROUP_ID, false)?
     .visit_field::<i64>("order_in_group", Self::VT_ORDER_IN_GROUP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("location", Self::VT_LOCATION, false)?
     .visit_field::<u32>("localize_scenario_id", Self::VT_LOCALIZE_SCENARIO_ID, false)?
     .visit_field::<i64>("favor_rank", Self::VT_FAVOR_RANK, false)?
     .visit_field::<i64>("secret_stone_amount", Self::VT_SECRET_STONE_AMOUNT, false)?
     .visit_field::<i64>("scenario_sript_group_id", Self::VT_SCENARIO_SRIPT_GROUP_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, ParcelType>>>("reward_parcel_type", Self::VT_REWARD_PARCEL_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("reward_parcel_id", Self::VT_REWARD_PARCEL_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i64>>>("reward_amount", Self::VT_REWARD_AMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct AcademyFavorScheduleExcelArgs<'a> {
    pub id: i64,
    pub character_id: i64,
    pub schedule_group_id: i64,
    pub order_in_group: i64,
    pub location: Option<flatbuffers::WIPOffset<&'a str>>,
    pub localize_scenario_id: u32,
    pub favor_rank: i64,
    pub secret_stone_amount: i64,
    pub scenario_sript_group_id: i64,
    pub reward_parcel_type: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, ParcelType>>>,
    pub reward_parcel_id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
    pub reward_amount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i64>>>,
}
impl<'a> Default for AcademyFavorScheduleExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    AcademyFavorScheduleExcelArgs {
      id: 0,
      character_id: 0,
      schedule_group_id: 0,
      order_in_group: 0,
      location: None,
      localize_scenario_id: 0,
      favor_rank: 0,
      secret_stone_amount: 0,
      scenario_sript_group_id: 0,
      reward_parcel_type: None,
      reward_parcel_id: None,
      reward_amount: None,
    }
  }
}

pub struct AcademyFavorScheduleExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AcademyFavorScheduleExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: i64) {
    self.fbb_.push_slot::<i64>(AcademyFavorScheduleExcel::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_character_id(&mut self, character_id: i64) {
    self.fbb_.push_slot::<i64>(AcademyFavorScheduleExcel::VT_CHARACTER_ID, character_id, 0);
  }
  #[inline]
  pub fn add_schedule_group_id(&mut self, schedule_group_id: i64) {
    self.fbb_.push_slot::<i64>(AcademyFavorScheduleExcel::VT_SCHEDULE_GROUP_ID, schedule_group_id, 0);
  }
  #[inline]
  pub fn add_order_in_group(&mut self, order_in_group: i64) {
    self.fbb_.push_slot::<i64>(AcademyFavorScheduleExcel::VT_ORDER_IN_GROUP, order_in_group, 0);
  }
  #[inline]
  pub fn add_location(&mut self, location: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyFavorScheduleExcel::VT_LOCATION, location);
  }
  #[inline]
  pub fn add_localize_scenario_id(&mut self, localize_scenario_id: u32) {
    self.fbb_.push_slot::<u32>(AcademyFavorScheduleExcel::VT_LOCALIZE_SCENARIO_ID, localize_scenario_id, 0);
  }
  #[inline]
  pub fn add_favor_rank(&mut self, favor_rank: i64) {
    self.fbb_.push_slot::<i64>(AcademyFavorScheduleExcel::VT_FAVOR_RANK, favor_rank, 0);
  }
  #[inline]
  pub fn add_secret_stone_amount(&mut self, secret_stone_amount: i64) {
    self.fbb_.push_slot::<i64>(AcademyFavorScheduleExcel::VT_SECRET_STONE_AMOUNT, secret_stone_amount, 0);
  }
  #[inline]
  pub fn add_scenario_sript_group_id(&mut self, scenario_sript_group_id: i64) {
    self.fbb_.push_slot::<i64>(AcademyFavorScheduleExcel::VT_SCENARIO_SRIPT_GROUP_ID, scenario_sript_group_id, 0);
  }
  #[inline]
  pub fn add_reward_parcel_type(&mut self, reward_parcel_type: flatbuffers::WIPOffset<flatbuffers::Vector<'b , ParcelType>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyFavorScheduleExcel::VT_REWARD_PARCEL_TYPE, reward_parcel_type);
  }
  #[inline]
  pub fn add_reward_parcel_id(&mut self, reward_parcel_id: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyFavorScheduleExcel::VT_REWARD_PARCEL_ID, reward_parcel_id);
  }
  #[inline]
  pub fn add_reward_amount(&mut self, reward_amount: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AcademyFavorScheduleExcel::VT_REWARD_AMOUNT, reward_amount);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AcademyFavorScheduleExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AcademyFavorScheduleExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AcademyFavorScheduleExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AcademyFavorScheduleExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AcademyFavorScheduleExcel");
      ds.field("id", &self.id());
      ds.field("character_id", &self.character_id());
      ds.field("schedule_group_id", &self.schedule_group_id());
      ds.field("order_in_group", &self.order_in_group());
      ds.field("location", &self.location());
      ds.field("localize_scenario_id", &self.localize_scenario_id());
      ds.field("favor_rank", &self.favor_rank());
      ds.field("secret_stone_amount", &self.secret_stone_amount());
      ds.field("scenario_sript_group_id", &self.scenario_sript_group_id());
      ds.field("reward_parcel_type", &self.reward_parcel_type());
      ds.field("reward_parcel_id", &self.reward_parcel_id());
      ds.field("reward_amount", &self.reward_amount());
      ds.finish()
  }
}
pub enum CharacterExcelTableOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterExcelTable<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterExcelTable<'a> {
  type Inner = CharacterExcelTable<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterExcelTable<'a> {
  pub const VT_DATA_LIST: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterExcelTable { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterExcelTableArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterExcelTable<'bldr>> {
    let mut builder = CharacterExcelTableBuilder::new(_fbb);
    if let Some(x) = args.data_list { builder.add_data_list(x); }
    builder.finish()
  }


  #[inline]
  pub fn data_list(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CharacterExcel<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CharacterExcel>>>>(CharacterExcelTable::VT_DATA_LIST, None)}
  }
}

impl flatbuffers::Verifiable for CharacterExcelTable<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<CharacterExcel>>>>("data_list", Self::VT_DATA_LIST, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterExcelTableArgs<'a> {
    pub data_list: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CharacterExcel<'a>>>>>,
}
impl<'a> Default for CharacterExcelTableArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterExcelTableArgs {
      data_list: None,
    }
  }
}

pub struct CharacterExcelTableBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterExcelTableBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_data_list(&mut self, data_list: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<CharacterExcel<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterExcelTable::VT_DATA_LIST, data_list);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterExcelTableBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterExcelTableBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterExcelTable<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterExcelTable<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterExcelTable");
      ds.field("data_list", &self.data_list());
      ds.finish()
  }
}
pub enum CharacterExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CharacterExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CharacterExcel<'a> {
  type Inner = CharacterExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CharacterExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_DEV_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_COSTUME_GROUP_ID: flatbuffers::VOffsetT = 8;
  pub const VT_IS_PLAYABLE: flatbuffers::VOffsetT = 10;
  pub const VT_PRODUCTION_STEP: flatbuffers::VOffsetT = 12;
  pub const VT_COLLECTION_VISIBLE: flatbuffers::VOffsetT = 14;
  pub const VT_RELEASE_DATE: flatbuffers::VOffsetT = 16;
  pub const VT_COLLECTION_VISIBLE_START_DATE: flatbuffers::VOffsetT = 18;
  pub const VT_COLLECTION_VISIBLE_END_DATE: flatbuffers::VOffsetT = 20;
  pub const VT_IS_PLAYABLE_CHARACTER: flatbuffers::VOffsetT = 22;
  pub const VT_LOCALIZE_ETC_ID: flatbuffers::VOffsetT = 24;
  pub const VT_RARITY: flatbuffers::VOffsetT = 26;
  pub const VT_IS_NPC: flatbuffers::VOffsetT = 28;
  pub const VT_TACTIC_ENTITY_TYPE: flatbuffers::VOffsetT = 30;
  pub const VT_CAN_SURVIVE: flatbuffers::VOffsetT = 32;
  pub const VT_IS_DUMMY: flatbuffers::VOffsetT = 34;
  pub const VT_SUB_PARTS_COUNT: flatbuffers::VOffsetT = 36;
  pub const VT_TACTIC_ROLE: flatbuffers::VOffsetT = 38;
  pub const VT_WEAPON_TYPE: flatbuffers::VOffsetT = 40;
  pub const VT_TACTIC_RANGE: flatbuffers::VOffsetT = 42;
  pub const VT_BULLET_TYPE: flatbuffers::VOffsetT = 44;
  pub const VT_ARMOR_TYPE: flatbuffers::VOffsetT = 46;
  pub const VT_AIM_IK_TYPE: flatbuffers::VOffsetT = 48;
  pub const VT_SCHOOL: flatbuffers::VOffsetT = 50;
  pub const VT_CLUB: flatbuffers::VOffsetT = 52;
  pub const VT_DEFAULT_STAR_GRADE: flatbuffers::VOffsetT = 54;
  pub const VT_MAX_STAR_GRADE: flatbuffers::VOffsetT = 56;
  pub const VT_STAT_LEVEL_UP_TYPE: flatbuffers::VOffsetT = 58;
  pub const VT_SQUAD_TYPE: flatbuffers::VOffsetT = 60;
  pub const VT_JUMPABLE: flatbuffers::VOffsetT = 62;
  pub const VT_PERSONALITY_ID: flatbuffers::VOffsetT = 64;
  pub const VT_CHARACTER_AI_ID: flatbuffers::VOffsetT = 66;
  pub const VT_EXTERNAL_BT_ID: flatbuffers::VOffsetT = 68;
  pub const VT_MAIN_COMBAT_STYLE_ID: flatbuffers::VOffsetT = 70;
  pub const VT_COMBAT_STYLE_INDEX: flatbuffers::VOffsetT = 72;
  pub const VT_SCENARIO_CHARACTER: flatbuffers::VOffsetT = 74;
  pub const VT_SPAWN_TEMPLATE_ID: flatbuffers::VOffsetT = 76;
  pub const VT_FAVOR_LEVELUP_TYPE: flatbuffers::VOffsetT = 78;
  pub const VT_EQUIPMENT_SLOT: flatbuffers::VOffsetT = 80;
  pub const VT_WEAPON_LOCALIZE_ID: flatbuffers::VOffsetT = 82;
  pub const VT_DISPLAY_ENEMY_INFO: flatbuffers::VOffsetT = 84;
  pub const VT_BODY_RADIUS: flatbuffers::VOffsetT = 86;
  pub const VT_RANDOM_EFFECT_RADIUS: flatbuffers::VOffsetT = 88;
  pub const VT_HP_BAR_HIDE: flatbuffers::VOffsetT = 90;
  pub const VT_HP_BAR_HEIGHT: flatbuffers::VOffsetT = 92;
  pub const VT_HIGHLIGHT_FLOATER_HEIGHT: flatbuffers::VOffsetT = 94;
  pub const VT_EMOJI_OFFSET_X: flatbuffers::VOffsetT = 96;
  pub const VT_EMOJI_OFFSET_Y: flatbuffers::VOffsetT = 98;
  pub const VT_MOVE_START_FRAME: flatbuffers::VOffsetT = 100;
  pub const VT_MOVE_END_FRAME: flatbuffers::VOffsetT = 102;
  pub const VT_JUMP_MOTION_FRAME: flatbuffers::VOffsetT = 104;
  pub const VT_APPEAR_FRAME: flatbuffers::VOffsetT = 106;
  pub const VT_CAN_MOVE: flatbuffers::VOffsetT = 108;
  pub const VT_CAN_FIX: flatbuffers::VOffsetT = 110;
  pub const VT_CAN_CROWD_CONTROL: flatbuffers::VOffsetT = 112;
  pub const VT_CAN_BATTLE_ITEM_MOVE: flatbuffers::VOffsetT = 114;
  pub const VT_IGNORE_OBSTACLE: flatbuffers::VOffsetT = 116;
  pub const VT_IS_AIR_UNIT: flatbuffers::VOffsetT = 118;
  pub const VT_AIR_UNIT_HEIGHT: flatbuffers::VOffsetT = 120;
  pub const VT_TAGS: flatbuffers::VOffsetT = 122;
  pub const VT_SECRET_STONE_ITEM_ID: flatbuffers::VOffsetT = 124;
  pub const VT_SECRET_STONE_ITEM_AMOUNT: flatbuffers::VOffsetT = 126;
  pub const VT_CHARACTER_PIECE_ITEM_ID: flatbuffers::VOffsetT = 128;
  pub const VT_CHARACTER_PIECE_ITEM_AMOUNT: flatbuffers::VOffsetT = 130;
  pub const VT_COMBINE_RECIPE_ID: flatbuffers::VOffsetT = 132;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CharacterExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CharacterExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<CharacterExcel<'bldr>> {
    let mut builder = CharacterExcelBuilder::new(_fbb);
    builder.add_combine_recipe_id(args.combine_recipe_id);
    builder.add_character_piece_item_id(args.character_piece_item_id);
    builder.add_secret_stone_item_id(args.secret_stone_item_id);
    builder.add_air_unit_height(args.air_unit_height);
    builder.add_random_effect_radius(args.random_effect_radius);
    builder.add_body_radius(args.body_radius);
    builder.add_main_combat_style_id(args.main_combat_style_id);
    builder.add_external_bt_id(args.external_bt_id);
    builder.add_character_ai_id(args.character_ai_id);
    builder.add_personality_id(args.personality_id);
    builder.add_costume_group_id(args.costume_group_id);
    builder.add_id(args.id);
    builder.add_character_piece_item_amount(args.character_piece_item_amount);
    builder.add_secret_stone_item_amount(args.secret_stone_item_amount);
    if let Some(x) = args.tags { builder.add_tags(x); }
    builder.add_appear_frame(args.appear_frame);
    builder.add_jump_motion_frame(args.jump_motion_frame);
    builder.add_move_end_frame(args.move_end_frame);
    builder.add_move_start_frame(args.move_start_frame);
    builder.add_emoji_offset_y(args.emoji_offset_y);
    builder.add_emoji_offset_x(args.emoji_offset_x);
    builder.add_highlight_floater_height(args.highlight_floater_height);
    builder.add_hp_bar_height(args.hp_bar_height);
    builder.add_weapon_localize_id(args.weapon_localize_id);
    if let Some(x) = args.equipment_slot { builder.add_equipment_slot(x); }
    builder.add_favor_levelup_type(args.favor_levelup_type);
    builder.add_spawn_template_id(args.spawn_template_id);
    if let Some(x) = args.scenario_character { builder.add_scenario_character(x); }
    builder.add_combat_style_index(args.combat_style_index);
    builder.add_squad_type(args.squad_type);
    builder.add_stat_level_up_type(args.stat_level_up_type);
    builder.add_max_star_grade(args.max_star_grade);
    builder.add_default_star_grade(args.default_star_grade);
    builder.add_club(args.club);
    builder.add_school(args.school);
    builder.add_aim_ik_type(args.aim_ik_type);
    builder.add_armor_type(args.armor_type);
    builder.add_bullet_type(args.bullet_type);
    builder.add_tactic_range(args.tactic_range);
    builder.add_weapon_type(args.weapon_type);
    builder.add_tactic_role(args.tactic_role);
    builder.add_sub_parts_count(args.sub_parts_count);
    builder.add_tactic_entity_type(args.tactic_entity_type);
    builder.add_rarity(args.rarity);
    builder.add_localize_etc_id(args.localize_etc_id);
    if let Some(x) = args.collection_visible_end_date { builder.add_collection_visible_end_date(x); }
    if let Some(x) = args.collection_visible_start_date { builder.add_collection_visible_start_date(x); }
    if let Some(x) = args.release_date { builder.add_release_date(x); }
    builder.add_production_step(args.production_step);
    if let Some(x) = args.dev_name { builder.add_dev_name(x); }
    builder.add_is_air_unit(args.is_air_unit);
    builder.add_ignore_obstacle(args.ignore_obstacle);
    builder.add_can_battle_item_move(args.can_battle_item_move);
    builder.add_can_crowd_control(args.can_crowd_control);
    builder.add_can_fix(args.can_fix);
    builder.add_can_move(args.can_move);
    builder.add_hp_bar_hide(args.hp_bar_hide);
    builder.add_display_enemy_info(args.display_enemy_info);
    builder.add_jumpable(args.jumpable);
    builder.add_is_dummy(args.is_dummy);
    builder.add_can_survive(args.can_survive);
    builder.add_is_npc(args.is_npc);
    builder.add_is_playable_character(args.is_playable_character);
    builder.add_collection_visible(args.collection_visible);
    builder.add_is_playable(args.is_playable);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn dev_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterExcel::VT_DEV_NAME, None)}
  }
  #[inline]
  pub fn costume_group_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterExcel::VT_COSTUME_GROUP_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn is_playable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterExcel::VT_IS_PLAYABLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn production_step(&self) -> ProductionStep {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ProductionStep>(CharacterExcel::VT_PRODUCTION_STEP, Some(ProductionStep::ToDo)).unwrap()}
  }
  #[inline]
  pub fn collection_visible(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterExcel::VT_COLLECTION_VISIBLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn release_date(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterExcel::VT_RELEASE_DATE, None)}
  }
  #[inline]
  pub fn collection_visible_start_date(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterExcel::VT_COLLECTION_VISIBLE_START_DATE, None)}
  }
  #[inline]
  pub fn collection_visible_end_date(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterExcel::VT_COLLECTION_VISIBLE_END_DATE, None)}
  }
  #[inline]
  pub fn is_playable_character(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterExcel::VT_IS_PLAYABLE_CHARACTER, Some(false)).unwrap()}
  }
  #[inline]
  pub fn localize_etc_id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(CharacterExcel::VT_LOCALIZE_ETC_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn rarity(&self) -> Rarity {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Rarity>(CharacterExcel::VT_RARITY, Some(Rarity::N)).unwrap()}
  }
  #[inline]
  pub fn is_npc(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterExcel::VT_IS_NPC, Some(false)).unwrap()}
  }
  #[inline]
  pub fn tactic_entity_type(&self) -> TacticEntityType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TacticEntityType>(CharacterExcel::VT_TACTIC_ENTITY_TYPE, Some(TacticEntityType::None)).unwrap()}
  }
  #[inline]
  pub fn can_survive(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterExcel::VT_CAN_SURVIVE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn is_dummy(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterExcel::VT_IS_DUMMY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn sub_parts_count(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterExcel::VT_SUB_PARTS_COUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn tactic_role(&self) -> TacticRole {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TacticRole>(CharacterExcel::VT_TACTIC_ROLE, Some(TacticRole::None)).unwrap()}
  }
  #[inline]
  pub fn weapon_type(&self) -> WeaponType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<WeaponType>(CharacterExcel::VT_WEAPON_TYPE, Some(WeaponType::None)).unwrap()}
  }
  #[inline]
  pub fn tactic_range(&self) -> TacticRange {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TacticRange>(CharacterExcel::VT_TACTIC_RANGE, Some(TacticRange::Back)).unwrap()}
  }
  #[inline]
  pub fn bullet_type(&self) -> BulletType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<BulletType>(CharacterExcel::VT_BULLET_TYPE, Some(BulletType::Normal)).unwrap()}
  }
  #[inline]
  pub fn armor_type(&self) -> ArmorType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ArmorType>(CharacterExcel::VT_ARMOR_TYPE, Some(ArmorType::LightArmor)).unwrap()}
  }
  #[inline]
  pub fn aim_ik_type(&self) -> AimIKType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AimIKType>(CharacterExcel::VT_AIM_IK_TYPE, Some(AimIKType::None)).unwrap()}
  }
  #[inline]
  pub fn school(&self) -> School {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<School>(CharacterExcel::VT_SCHOOL, Some(School::None)).unwrap()}
  }
  #[inline]
  pub fn club(&self) -> Club {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Club>(CharacterExcel::VT_CLUB, Some(Club::None)).unwrap()}
  }
  #[inline]
  pub fn default_star_grade(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterExcel::VT_DEFAULT_STAR_GRADE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn max_star_grade(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterExcel::VT_MAX_STAR_GRADE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn stat_level_up_type(&self) -> StatLevelUpType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StatLevelUpType>(CharacterExcel::VT_STAT_LEVEL_UP_TYPE, Some(StatLevelUpType::Standard)).unwrap()}
  }
  #[inline]
  pub fn squad_type(&self) -> SquadType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SquadType>(CharacterExcel::VT_SQUAD_TYPE, Some(SquadType::None)).unwrap()}
  }
  #[inline]
  pub fn jumpable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterExcel::VT_JUMPABLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn personality_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterExcel::VT_PERSONALITY_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn character_ai_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterExcel::VT_CHARACTER_AI_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn external_bt_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterExcel::VT_EXTERNAL_BT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn main_combat_style_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterExcel::VT_MAIN_COMBAT_STYLE_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn combat_style_index(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterExcel::VT_COMBAT_STYLE_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn scenario_character(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CharacterExcel::VT_SCENARIO_CHARACTER, None)}
  }
  #[inline]
  pub fn spawn_template_id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(CharacterExcel::VT_SPAWN_TEMPLATE_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn favor_levelup_type(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterExcel::VT_FAVOR_LEVELUP_TYPE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn equipment_slot(&self) -> Option<flatbuffers::Vector<'a, EquipmentCategory>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, EquipmentCategory>>>(CharacterExcel::VT_EQUIPMENT_SLOT, None)}
  }
  #[inline]
  pub fn weapon_localize_id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(CharacterExcel::VT_WEAPON_LOCALIZE_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn display_enemy_info(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterExcel::VT_DISPLAY_ENEMY_INFO, Some(false)).unwrap()}
  }
  #[inline]
  pub fn body_radius(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterExcel::VT_BODY_RADIUS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn random_effect_radius(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterExcel::VT_RANDOM_EFFECT_RADIUS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn hp_bar_hide(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterExcel::VT_HP_BAR_HIDE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn hp_bar_height(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CharacterExcel::VT_HP_BAR_HEIGHT, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn highlight_floater_height(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CharacterExcel::VT_HIGHLIGHT_FLOATER_HEIGHT, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn emoji_offset_x(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CharacterExcel::VT_EMOJI_OFFSET_X, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn emoji_offset_y(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(CharacterExcel::VT_EMOJI_OFFSET_Y, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn move_start_frame(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterExcel::VT_MOVE_START_FRAME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn move_end_frame(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterExcel::VT_MOVE_END_FRAME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn jump_motion_frame(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterExcel::VT_JUMP_MOTION_FRAME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn appear_frame(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterExcel::VT_APPEAR_FRAME, Some(0)).unwrap()}
  }
  #[inline]
  pub fn can_move(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterExcel::VT_CAN_MOVE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn can_fix(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterExcel::VT_CAN_FIX, Some(false)).unwrap()}
  }
  #[inline]
  pub fn can_crowd_control(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterExcel::VT_CAN_CROWD_CONTROL, Some(false)).unwrap()}
  }
  #[inline]
  pub fn can_battle_item_move(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterExcel::VT_CAN_BATTLE_ITEM_MOVE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn ignore_obstacle(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterExcel::VT_IGNORE_OBSTACLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn is_air_unit(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CharacterExcel::VT_IS_AIR_UNIT, Some(false)).unwrap()}
  }
  #[inline]
  pub fn air_unit_height(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterExcel::VT_AIR_UNIT_HEIGHT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, Tag>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Tag>>>(CharacterExcel::VT_TAGS, None)}
  }
  #[inline]
  pub fn secret_stone_item_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterExcel::VT_SECRET_STONE_ITEM_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn secret_stone_item_amount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterExcel::VT_SECRET_STONE_ITEM_AMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn character_piece_item_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterExcel::VT_CHARACTER_PIECE_ITEM_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn character_piece_item_amount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CharacterExcel::VT_CHARACTER_PIECE_ITEM_AMOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn combine_recipe_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CharacterExcel::VT_COMBINE_RECIPE_ID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CharacterExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dev_name", Self::VT_DEV_NAME, false)?
     .visit_field::<i64>("costume_group_id", Self::VT_COSTUME_GROUP_ID, false)?
     .visit_field::<bool>("is_playable", Self::VT_IS_PLAYABLE, false)?
     .visit_field::<ProductionStep>("production_step", Self::VT_PRODUCTION_STEP, false)?
     .visit_field::<bool>("collection_visible", Self::VT_COLLECTION_VISIBLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("release_date", Self::VT_RELEASE_DATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("collection_visible_start_date", Self::VT_COLLECTION_VISIBLE_START_DATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("collection_visible_end_date", Self::VT_COLLECTION_VISIBLE_END_DATE, false)?
     .visit_field::<bool>("is_playable_character", Self::VT_IS_PLAYABLE_CHARACTER, false)?
     .visit_field::<u32>("localize_etc_id", Self::VT_LOCALIZE_ETC_ID, false)?
     .visit_field::<Rarity>("rarity", Self::VT_RARITY, false)?
     .visit_field::<bool>("is_npc", Self::VT_IS_NPC, false)?
     .visit_field::<TacticEntityType>("tactic_entity_type", Self::VT_TACTIC_ENTITY_TYPE, false)?
     .visit_field::<bool>("can_survive", Self::VT_CAN_SURVIVE, false)?
     .visit_field::<bool>("is_dummy", Self::VT_IS_DUMMY, false)?
     .visit_field::<i32>("sub_parts_count", Self::VT_SUB_PARTS_COUNT, false)?
     .visit_field::<TacticRole>("tactic_role", Self::VT_TACTIC_ROLE, false)?
     .visit_field::<WeaponType>("weapon_type", Self::VT_WEAPON_TYPE, false)?
     .visit_field::<TacticRange>("tactic_range", Self::VT_TACTIC_RANGE, false)?
     .visit_field::<BulletType>("bullet_type", Self::VT_BULLET_TYPE, false)?
     .visit_field::<ArmorType>("armor_type", Self::VT_ARMOR_TYPE, false)?
     .visit_field::<AimIKType>("aim_ik_type", Self::VT_AIM_IK_TYPE, false)?
     .visit_field::<School>("school", Self::VT_SCHOOL, false)?
     .visit_field::<Club>("club", Self::VT_CLUB, false)?
     .visit_field::<i32>("default_star_grade", Self::VT_DEFAULT_STAR_GRADE, false)?
     .visit_field::<i32>("max_star_grade", Self::VT_MAX_STAR_GRADE, false)?
     .visit_field::<StatLevelUpType>("stat_level_up_type", Self::VT_STAT_LEVEL_UP_TYPE, false)?
     .visit_field::<SquadType>("squad_type", Self::VT_SQUAD_TYPE, false)?
     .visit_field::<bool>("jumpable", Self::VT_JUMPABLE, false)?
     .visit_field::<i64>("personality_id", Self::VT_PERSONALITY_ID, false)?
     .visit_field::<i64>("character_ai_id", Self::VT_CHARACTER_AI_ID, false)?
     .visit_field::<i64>("external_bt_id", Self::VT_EXTERNAL_BT_ID, false)?
     .visit_field::<i64>("main_combat_style_id", Self::VT_MAIN_COMBAT_STYLE_ID, false)?
     .visit_field::<i32>("combat_style_index", Self::VT_COMBAT_STYLE_INDEX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("scenario_character", Self::VT_SCENARIO_CHARACTER, false)?
     .visit_field::<u32>("spawn_template_id", Self::VT_SPAWN_TEMPLATE_ID, false)?
     .visit_field::<i32>("favor_levelup_type", Self::VT_FAVOR_LEVELUP_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, EquipmentCategory>>>("equipment_slot", Self::VT_EQUIPMENT_SLOT, false)?
     .visit_field::<u32>("weapon_localize_id", Self::VT_WEAPON_LOCALIZE_ID, false)?
     .visit_field::<bool>("display_enemy_info", Self::VT_DISPLAY_ENEMY_INFO, false)?
     .visit_field::<i64>("body_radius", Self::VT_BODY_RADIUS, false)?
     .visit_field::<i64>("random_effect_radius", Self::VT_RANDOM_EFFECT_RADIUS, false)?
     .visit_field::<bool>("hp_bar_hide", Self::VT_HP_BAR_HIDE, false)?
     .visit_field::<f32>("hp_bar_height", Self::VT_HP_BAR_HEIGHT, false)?
     .visit_field::<f32>("highlight_floater_height", Self::VT_HIGHLIGHT_FLOATER_HEIGHT, false)?
     .visit_field::<f32>("emoji_offset_x", Self::VT_EMOJI_OFFSET_X, false)?
     .visit_field::<f32>("emoji_offset_y", Self::VT_EMOJI_OFFSET_Y, false)?
     .visit_field::<i32>("move_start_frame", Self::VT_MOVE_START_FRAME, false)?
     .visit_field::<i32>("move_end_frame", Self::VT_MOVE_END_FRAME, false)?
     .visit_field::<i32>("jump_motion_frame", Self::VT_JUMP_MOTION_FRAME, false)?
     .visit_field::<i32>("appear_frame", Self::VT_APPEAR_FRAME, false)?
     .visit_field::<bool>("can_move", Self::VT_CAN_MOVE, false)?
     .visit_field::<bool>("can_fix", Self::VT_CAN_FIX, false)?
     .visit_field::<bool>("can_crowd_control", Self::VT_CAN_CROWD_CONTROL, false)?
     .visit_field::<bool>("can_battle_item_move", Self::VT_CAN_BATTLE_ITEM_MOVE, false)?
     .visit_field::<bool>("ignore_obstacle", Self::VT_IGNORE_OBSTACLE, false)?
     .visit_field::<bool>("is_air_unit", Self::VT_IS_AIR_UNIT, false)?
     .visit_field::<i64>("air_unit_height", Self::VT_AIR_UNIT_HEIGHT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Tag>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<i64>("secret_stone_item_id", Self::VT_SECRET_STONE_ITEM_ID, false)?
     .visit_field::<i32>("secret_stone_item_amount", Self::VT_SECRET_STONE_ITEM_AMOUNT, false)?
     .visit_field::<i64>("character_piece_item_id", Self::VT_CHARACTER_PIECE_ITEM_ID, false)?
     .visit_field::<i32>("character_piece_item_amount", Self::VT_CHARACTER_PIECE_ITEM_AMOUNT, false)?
     .visit_field::<i64>("combine_recipe_id", Self::VT_COMBINE_RECIPE_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct CharacterExcelArgs<'a> {
    pub id: i64,
    pub dev_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub costume_group_id: i64,
    pub is_playable: bool,
    pub production_step: ProductionStep,
    pub collection_visible: bool,
    pub release_date: Option<flatbuffers::WIPOffset<&'a str>>,
    pub collection_visible_start_date: Option<flatbuffers::WIPOffset<&'a str>>,
    pub collection_visible_end_date: Option<flatbuffers::WIPOffset<&'a str>>,
    pub is_playable_character: bool,
    pub localize_etc_id: u32,
    pub rarity: Rarity,
    pub is_npc: bool,
    pub tactic_entity_type: TacticEntityType,
    pub can_survive: bool,
    pub is_dummy: bool,
    pub sub_parts_count: i32,
    pub tactic_role: TacticRole,
    pub weapon_type: WeaponType,
    pub tactic_range: TacticRange,
    pub bullet_type: BulletType,
    pub armor_type: ArmorType,
    pub aim_ik_type: AimIKType,
    pub school: School,
    pub club: Club,
    pub default_star_grade: i32,
    pub max_star_grade: i32,
    pub stat_level_up_type: StatLevelUpType,
    pub squad_type: SquadType,
    pub jumpable: bool,
    pub personality_id: i64,
    pub character_ai_id: i64,
    pub external_bt_id: i64,
    pub main_combat_style_id: i64,
    pub combat_style_index: i32,
    pub scenario_character: Option<flatbuffers::WIPOffset<&'a str>>,
    pub spawn_template_id: u32,
    pub favor_levelup_type: i32,
    pub equipment_slot: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, EquipmentCategory>>>,
    pub weapon_localize_id: u32,
    pub display_enemy_info: bool,
    pub body_radius: i64,
    pub random_effect_radius: i64,
    pub hp_bar_hide: bool,
    pub hp_bar_height: f32,
    pub highlight_floater_height: f32,
    pub emoji_offset_x: f32,
    pub emoji_offset_y: f32,
    pub move_start_frame: i32,
    pub move_end_frame: i32,
    pub jump_motion_frame: i32,
    pub appear_frame: i32,
    pub can_move: bool,
    pub can_fix: bool,
    pub can_crowd_control: bool,
    pub can_battle_item_move: bool,
    pub ignore_obstacle: bool,
    pub is_air_unit: bool,
    pub air_unit_height: i64,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Tag>>>,
    pub secret_stone_item_id: i64,
    pub secret_stone_item_amount: i32,
    pub character_piece_item_id: i64,
    pub character_piece_item_amount: i32,
    pub combine_recipe_id: i64,
}
impl<'a> Default for CharacterExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    CharacterExcelArgs {
      id: 0,
      dev_name: None,
      costume_group_id: 0,
      is_playable: false,
      production_step: ProductionStep::ToDo,
      collection_visible: false,
      release_date: None,
      collection_visible_start_date: None,
      collection_visible_end_date: None,
      is_playable_character: false,
      localize_etc_id: 0,
      rarity: Rarity::N,
      is_npc: false,
      tactic_entity_type: TacticEntityType::None,
      can_survive: false,
      is_dummy: false,
      sub_parts_count: 0,
      tactic_role: TacticRole::None,
      weapon_type: WeaponType::None,
      tactic_range: TacticRange::Back,
      bullet_type: BulletType::Normal,
      armor_type: ArmorType::LightArmor,
      aim_ik_type: AimIKType::None,
      school: School::None,
      club: Club::None,
      default_star_grade: 0,
      max_star_grade: 0,
      stat_level_up_type: StatLevelUpType::Standard,
      squad_type: SquadType::None,
      jumpable: false,
      personality_id: 0,
      character_ai_id: 0,
      external_bt_id: 0,
      main_combat_style_id: 0,
      combat_style_index: 0,
      scenario_character: None,
      spawn_template_id: 0,
      favor_levelup_type: 0,
      equipment_slot: None,
      weapon_localize_id: 0,
      display_enemy_info: false,
      body_radius: 0,
      random_effect_radius: 0,
      hp_bar_hide: false,
      hp_bar_height: 0.0,
      highlight_floater_height: 0.0,
      emoji_offset_x: 0.0,
      emoji_offset_y: 0.0,
      move_start_frame: 0,
      move_end_frame: 0,
      jump_motion_frame: 0,
      appear_frame: 0,
      can_move: false,
      can_fix: false,
      can_crowd_control: false,
      can_battle_item_move: false,
      ignore_obstacle: false,
      is_air_unit: false,
      air_unit_height: 0,
      tags: None,
      secret_stone_item_id: 0,
      secret_stone_item_amount: 0,
      character_piece_item_id: 0,
      character_piece_item_amount: 0,
      combine_recipe_id: 0,
    }
  }
}

pub struct CharacterExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CharacterExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: i64) {
    self.fbb_.push_slot::<i64>(CharacterExcel::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_dev_name(&mut self, dev_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterExcel::VT_DEV_NAME, dev_name);
  }
  #[inline]
  pub fn add_costume_group_id(&mut self, costume_group_id: i64) {
    self.fbb_.push_slot::<i64>(CharacterExcel::VT_COSTUME_GROUP_ID, costume_group_id, 0);
  }
  #[inline]
  pub fn add_is_playable(&mut self, is_playable: bool) {
    self.fbb_.push_slot::<bool>(CharacterExcel::VT_IS_PLAYABLE, is_playable, false);
  }
  #[inline]
  pub fn add_production_step(&mut self, production_step: ProductionStep) {
    self.fbb_.push_slot::<ProductionStep>(CharacterExcel::VT_PRODUCTION_STEP, production_step, ProductionStep::ToDo);
  }
  #[inline]
  pub fn add_collection_visible(&mut self, collection_visible: bool) {
    self.fbb_.push_slot::<bool>(CharacterExcel::VT_COLLECTION_VISIBLE, collection_visible, false);
  }
  #[inline]
  pub fn add_release_date(&mut self, release_date: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterExcel::VT_RELEASE_DATE, release_date);
  }
  #[inline]
  pub fn add_collection_visible_start_date(&mut self, collection_visible_start_date: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterExcel::VT_COLLECTION_VISIBLE_START_DATE, collection_visible_start_date);
  }
  #[inline]
  pub fn add_collection_visible_end_date(&mut self, collection_visible_end_date: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterExcel::VT_COLLECTION_VISIBLE_END_DATE, collection_visible_end_date);
  }
  #[inline]
  pub fn add_is_playable_character(&mut self, is_playable_character: bool) {
    self.fbb_.push_slot::<bool>(CharacterExcel::VT_IS_PLAYABLE_CHARACTER, is_playable_character, false);
  }
  #[inline]
  pub fn add_localize_etc_id(&mut self, localize_etc_id: u32) {
    self.fbb_.push_slot::<u32>(CharacterExcel::VT_LOCALIZE_ETC_ID, localize_etc_id, 0);
  }
  #[inline]
  pub fn add_rarity(&mut self, rarity: Rarity) {
    self.fbb_.push_slot::<Rarity>(CharacterExcel::VT_RARITY, rarity, Rarity::N);
  }
  #[inline]
  pub fn add_is_npc(&mut self, is_npc: bool) {
    self.fbb_.push_slot::<bool>(CharacterExcel::VT_IS_NPC, is_npc, false);
  }
  #[inline]
  pub fn add_tactic_entity_type(&mut self, tactic_entity_type: TacticEntityType) {
    self.fbb_.push_slot::<TacticEntityType>(CharacterExcel::VT_TACTIC_ENTITY_TYPE, tactic_entity_type, TacticEntityType::None);
  }
  #[inline]
  pub fn add_can_survive(&mut self, can_survive: bool) {
    self.fbb_.push_slot::<bool>(CharacterExcel::VT_CAN_SURVIVE, can_survive, false);
  }
  #[inline]
  pub fn add_is_dummy(&mut self, is_dummy: bool) {
    self.fbb_.push_slot::<bool>(CharacterExcel::VT_IS_DUMMY, is_dummy, false);
  }
  #[inline]
  pub fn add_sub_parts_count(&mut self, sub_parts_count: i32) {
    self.fbb_.push_slot::<i32>(CharacterExcel::VT_SUB_PARTS_COUNT, sub_parts_count, 0);
  }
  #[inline]
  pub fn add_tactic_role(&mut self, tactic_role: TacticRole) {
    self.fbb_.push_slot::<TacticRole>(CharacterExcel::VT_TACTIC_ROLE, tactic_role, TacticRole::None);
  }
  #[inline]
  pub fn add_weapon_type(&mut self, weapon_type: WeaponType) {
    self.fbb_.push_slot::<WeaponType>(CharacterExcel::VT_WEAPON_TYPE, weapon_type, WeaponType::None);
  }
  #[inline]
  pub fn add_tactic_range(&mut self, tactic_range: TacticRange) {
    self.fbb_.push_slot::<TacticRange>(CharacterExcel::VT_TACTIC_RANGE, tactic_range, TacticRange::Back);
  }
  #[inline]
  pub fn add_bullet_type(&mut self, bullet_type: BulletType) {
    self.fbb_.push_slot::<BulletType>(CharacterExcel::VT_BULLET_TYPE, bullet_type, BulletType::Normal);
  }
  #[inline]
  pub fn add_armor_type(&mut self, armor_type: ArmorType) {
    self.fbb_.push_slot::<ArmorType>(CharacterExcel::VT_ARMOR_TYPE, armor_type, ArmorType::LightArmor);
  }
  #[inline]
  pub fn add_aim_ik_type(&mut self, aim_ik_type: AimIKType) {
    self.fbb_.push_slot::<AimIKType>(CharacterExcel::VT_AIM_IK_TYPE, aim_ik_type, AimIKType::None);
  }
  #[inline]
  pub fn add_school(&mut self, school: School) {
    self.fbb_.push_slot::<School>(CharacterExcel::VT_SCHOOL, school, School::None);
  }
  #[inline]
  pub fn add_club(&mut self, club: Club) {
    self.fbb_.push_slot::<Club>(CharacterExcel::VT_CLUB, club, Club::None);
  }
  #[inline]
  pub fn add_default_star_grade(&mut self, default_star_grade: i32) {
    self.fbb_.push_slot::<i32>(CharacterExcel::VT_DEFAULT_STAR_GRADE, default_star_grade, 0);
  }
  #[inline]
  pub fn add_max_star_grade(&mut self, max_star_grade: i32) {
    self.fbb_.push_slot::<i32>(CharacterExcel::VT_MAX_STAR_GRADE, max_star_grade, 0);
  }
  #[inline]
  pub fn add_stat_level_up_type(&mut self, stat_level_up_type: StatLevelUpType) {
    self.fbb_.push_slot::<StatLevelUpType>(CharacterExcel::VT_STAT_LEVEL_UP_TYPE, stat_level_up_type, StatLevelUpType::Standard);
  }
  #[inline]
  pub fn add_squad_type(&mut self, squad_type: SquadType) {
    self.fbb_.push_slot::<SquadType>(CharacterExcel::VT_SQUAD_TYPE, squad_type, SquadType::None);
  }
  #[inline]
  pub fn add_jumpable(&mut self, jumpable: bool) {
    self.fbb_.push_slot::<bool>(CharacterExcel::VT_JUMPABLE, jumpable, false);
  }
  #[inline]
  pub fn add_personality_id(&mut self, personality_id: i64) {
    self.fbb_.push_slot::<i64>(CharacterExcel::VT_PERSONALITY_ID, personality_id, 0);
  }
  #[inline]
  pub fn add_character_ai_id(&mut self, character_ai_id: i64) {
    self.fbb_.push_slot::<i64>(CharacterExcel::VT_CHARACTER_AI_ID, character_ai_id, 0);
  }
  #[inline]
  pub fn add_external_bt_id(&mut self, external_bt_id: i64) {
    self.fbb_.push_slot::<i64>(CharacterExcel::VT_EXTERNAL_BT_ID, external_bt_id, 0);
  }
  #[inline]
  pub fn add_main_combat_style_id(&mut self, main_combat_style_id: i64) {
    self.fbb_.push_slot::<i64>(CharacterExcel::VT_MAIN_COMBAT_STYLE_ID, main_combat_style_id, 0);
  }
  #[inline]
  pub fn add_combat_style_index(&mut self, combat_style_index: i32) {
    self.fbb_.push_slot::<i32>(CharacterExcel::VT_COMBAT_STYLE_INDEX, combat_style_index, 0);
  }
  #[inline]
  pub fn add_scenario_character(&mut self, scenario_character: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterExcel::VT_SCENARIO_CHARACTER, scenario_character);
  }
  #[inline]
  pub fn add_spawn_template_id(&mut self, spawn_template_id: u32) {
    self.fbb_.push_slot::<u32>(CharacterExcel::VT_SPAWN_TEMPLATE_ID, spawn_template_id, 0);
  }
  #[inline]
  pub fn add_favor_levelup_type(&mut self, favor_levelup_type: i32) {
    self.fbb_.push_slot::<i32>(CharacterExcel::VT_FAVOR_LEVELUP_TYPE, favor_levelup_type, 0);
  }
  #[inline]
  pub fn add_equipment_slot(&mut self, equipment_slot: flatbuffers::WIPOffset<flatbuffers::Vector<'b , EquipmentCategory>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterExcel::VT_EQUIPMENT_SLOT, equipment_slot);
  }
  #[inline]
  pub fn add_weapon_localize_id(&mut self, weapon_localize_id: u32) {
    self.fbb_.push_slot::<u32>(CharacterExcel::VT_WEAPON_LOCALIZE_ID, weapon_localize_id, 0);
  }
  #[inline]
  pub fn add_display_enemy_info(&mut self, display_enemy_info: bool) {
    self.fbb_.push_slot::<bool>(CharacterExcel::VT_DISPLAY_ENEMY_INFO, display_enemy_info, false);
  }
  #[inline]
  pub fn add_body_radius(&mut self, body_radius: i64) {
    self.fbb_.push_slot::<i64>(CharacterExcel::VT_BODY_RADIUS, body_radius, 0);
  }
  #[inline]
  pub fn add_random_effect_radius(&mut self, random_effect_radius: i64) {
    self.fbb_.push_slot::<i64>(CharacterExcel::VT_RANDOM_EFFECT_RADIUS, random_effect_radius, 0);
  }
  #[inline]
  pub fn add_hp_bar_hide(&mut self, hp_bar_hide: bool) {
    self.fbb_.push_slot::<bool>(CharacterExcel::VT_HP_BAR_HIDE, hp_bar_hide, false);
  }
  #[inline]
  pub fn add_hp_bar_height(&mut self, hp_bar_height: f32) {
    self.fbb_.push_slot::<f32>(CharacterExcel::VT_HP_BAR_HEIGHT, hp_bar_height, 0.0);
  }
  #[inline]
  pub fn add_highlight_floater_height(&mut self, highlight_floater_height: f32) {
    self.fbb_.push_slot::<f32>(CharacterExcel::VT_HIGHLIGHT_FLOATER_HEIGHT, highlight_floater_height, 0.0);
  }
  #[inline]
  pub fn add_emoji_offset_x(&mut self, emoji_offset_x: f32) {
    self.fbb_.push_slot::<f32>(CharacterExcel::VT_EMOJI_OFFSET_X, emoji_offset_x, 0.0);
  }
  #[inline]
  pub fn add_emoji_offset_y(&mut self, emoji_offset_y: f32) {
    self.fbb_.push_slot::<f32>(CharacterExcel::VT_EMOJI_OFFSET_Y, emoji_offset_y, 0.0);
  }
  #[inline]
  pub fn add_move_start_frame(&mut self, move_start_frame: i32) {
    self.fbb_.push_slot::<i32>(CharacterExcel::VT_MOVE_START_FRAME, move_start_frame, 0);
  }
  #[inline]
  pub fn add_move_end_frame(&mut self, move_end_frame: i32) {
    self.fbb_.push_slot::<i32>(CharacterExcel::VT_MOVE_END_FRAME, move_end_frame, 0);
  }
  #[inline]
  pub fn add_jump_motion_frame(&mut self, jump_motion_frame: i32) {
    self.fbb_.push_slot::<i32>(CharacterExcel::VT_JUMP_MOTION_FRAME, jump_motion_frame, 0);
  }
  #[inline]
  pub fn add_appear_frame(&mut self, appear_frame: i32) {
    self.fbb_.push_slot::<i32>(CharacterExcel::VT_APPEAR_FRAME, appear_frame, 0);
  }
  #[inline]
  pub fn add_can_move(&mut self, can_move: bool) {
    self.fbb_.push_slot::<bool>(CharacterExcel::VT_CAN_MOVE, can_move, false);
  }
  #[inline]
  pub fn add_can_fix(&mut self, can_fix: bool) {
    self.fbb_.push_slot::<bool>(CharacterExcel::VT_CAN_FIX, can_fix, false);
  }
  #[inline]
  pub fn add_can_crowd_control(&mut self, can_crowd_control: bool) {
    self.fbb_.push_slot::<bool>(CharacterExcel::VT_CAN_CROWD_CONTROL, can_crowd_control, false);
  }
  #[inline]
  pub fn add_can_battle_item_move(&mut self, can_battle_item_move: bool) {
    self.fbb_.push_slot::<bool>(CharacterExcel::VT_CAN_BATTLE_ITEM_MOVE, can_battle_item_move, false);
  }
  #[inline]
  pub fn add_ignore_obstacle(&mut self, ignore_obstacle: bool) {
    self.fbb_.push_slot::<bool>(CharacterExcel::VT_IGNORE_OBSTACLE, ignore_obstacle, false);
  }
  #[inline]
  pub fn add_is_air_unit(&mut self, is_air_unit: bool) {
    self.fbb_.push_slot::<bool>(CharacterExcel::VT_IS_AIR_UNIT, is_air_unit, false);
  }
  #[inline]
  pub fn add_air_unit_height(&mut self, air_unit_height: i64) {
    self.fbb_.push_slot::<i64>(CharacterExcel::VT_AIR_UNIT_HEIGHT, air_unit_height, 0);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Tag>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CharacterExcel::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_secret_stone_item_id(&mut self, secret_stone_item_id: i64) {
    self.fbb_.push_slot::<i64>(CharacterExcel::VT_SECRET_STONE_ITEM_ID, secret_stone_item_id, 0);
  }
  #[inline]
  pub fn add_secret_stone_item_amount(&mut self, secret_stone_item_amount: i32) {
    self.fbb_.push_slot::<i32>(CharacterExcel::VT_SECRET_STONE_ITEM_AMOUNT, secret_stone_item_amount, 0);
  }
  #[inline]
  pub fn add_character_piece_item_id(&mut self, character_piece_item_id: i64) {
    self.fbb_.push_slot::<i64>(CharacterExcel::VT_CHARACTER_PIECE_ITEM_ID, character_piece_item_id, 0);
  }
  #[inline]
  pub fn add_character_piece_item_amount(&mut self, character_piece_item_amount: i32) {
    self.fbb_.push_slot::<i32>(CharacterExcel::VT_CHARACTER_PIECE_ITEM_AMOUNT, character_piece_item_amount, 0);
  }
  #[inline]
  pub fn add_combine_recipe_id(&mut self, combine_recipe_id: i64) {
    self.fbb_.push_slot::<i64>(CharacterExcel::VT_COMBINE_RECIPE_ID, combine_recipe_id, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CharacterExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CharacterExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CharacterExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CharacterExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CharacterExcel");
      ds.field("id", &self.id());
      ds.field("dev_name", &self.dev_name());
      ds.field("costume_group_id", &self.costume_group_id());
      ds.field("is_playable", &self.is_playable());
      ds.field("production_step", &self.production_step());
      ds.field("collection_visible", &self.collection_visible());
      ds.field("release_date", &self.release_date());
      ds.field("collection_visible_start_date", &self.collection_visible_start_date());
      ds.field("collection_visible_end_date", &self.collection_visible_end_date());
      ds.field("is_playable_character", &self.is_playable_character());
      ds.field("localize_etc_id", &self.localize_etc_id());
      ds.field("rarity", &self.rarity());
      ds.field("is_npc", &self.is_npc());
      ds.field("tactic_entity_type", &self.tactic_entity_type());
      ds.field("can_survive", &self.can_survive());
      ds.field("is_dummy", &self.is_dummy());
      ds.field("sub_parts_count", &self.sub_parts_count());
      ds.field("tactic_role", &self.tactic_role());
      ds.field("weapon_type", &self.weapon_type());
      ds.field("tactic_range", &self.tactic_range());
      ds.field("bullet_type", &self.bullet_type());
      ds.field("armor_type", &self.armor_type());
      ds.field("aim_ik_type", &self.aim_ik_type());
      ds.field("school", &self.school());
      ds.field("club", &self.club());
      ds.field("default_star_grade", &self.default_star_grade());
      ds.field("max_star_grade", &self.max_star_grade());
      ds.field("stat_level_up_type", &self.stat_level_up_type());
      ds.field("squad_type", &self.squad_type());
      ds.field("jumpable", &self.jumpable());
      ds.field("personality_id", &self.personality_id());
      ds.field("character_ai_id", &self.character_ai_id());
      ds.field("external_bt_id", &self.external_bt_id());
      ds.field("main_combat_style_id", &self.main_combat_style_id());
      ds.field("combat_style_index", &self.combat_style_index());
      ds.field("scenario_character", &self.scenario_character());
      ds.field("spawn_template_id", &self.spawn_template_id());
      ds.field("favor_levelup_type", &self.favor_levelup_type());
      ds.field("equipment_slot", &self.equipment_slot());
      ds.field("weapon_localize_id", &self.weapon_localize_id());
      ds.field("display_enemy_info", &self.display_enemy_info());
      ds.field("body_radius", &self.body_radius());
      ds.field("random_effect_radius", &self.random_effect_radius());
      ds.field("hp_bar_hide", &self.hp_bar_hide());
      ds.field("hp_bar_height", &self.hp_bar_height());
      ds.field("highlight_floater_height", &self.highlight_floater_height());
      ds.field("emoji_offset_x", &self.emoji_offset_x());
      ds.field("emoji_offset_y", &self.emoji_offset_y());
      ds.field("move_start_frame", &self.move_start_frame());
      ds.field("move_end_frame", &self.move_end_frame());
      ds.field("jump_motion_frame", &self.jump_motion_frame());
      ds.field("appear_frame", &self.appear_frame());
      ds.field("can_move", &self.can_move());
      ds.field("can_fix", &self.can_fix());
      ds.field("can_crowd_control", &self.can_crowd_control());
      ds.field("can_battle_item_move", &self.can_battle_item_move());
      ds.field("ignore_obstacle", &self.ignore_obstacle());
      ds.field("is_air_unit", &self.is_air_unit());
      ds.field("air_unit_height", &self.air_unit_height());
      ds.field("tags", &self.tags());
      ds.field("secret_stone_item_id", &self.secret_stone_item_id());
      ds.field("secret_stone_item_amount", &self.secret_stone_item_amount());
      ds.field("character_piece_item_id", &self.character_piece_item_id());
      ds.field("character_piece_item_amount", &self.character_piece_item_amount());
      ds.field("combine_recipe_id", &self.combine_recipe_id());
      ds.finish()
  }
}
pub enum LocalizeCharProfileExcelTableOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LocalizeCharProfileExcelTable<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LocalizeCharProfileExcelTable<'a> {
  type Inner = LocalizeCharProfileExcelTable<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LocalizeCharProfileExcelTable<'a> {
  pub const VT_DATA_LIST: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LocalizeCharProfileExcelTable { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LocalizeCharProfileExcelTableArgs<'args>
  ) -> flatbuffers::WIPOffset<LocalizeCharProfileExcelTable<'bldr>> {
    let mut builder = LocalizeCharProfileExcelTableBuilder::new(_fbb);
    if let Some(x) = args.data_list { builder.add_data_list(x); }
    builder.finish()
  }


  #[inline]
  pub fn data_list(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LocalizeCharProfileExcel<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LocalizeCharProfileExcel>>>>(LocalizeCharProfileExcelTable::VT_DATA_LIST, None)}
  }
}

impl flatbuffers::Verifiable for LocalizeCharProfileExcelTable<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<LocalizeCharProfileExcel>>>>("data_list", Self::VT_DATA_LIST, false)?
     .finish();
    Ok(())
  }
}
pub struct LocalizeCharProfileExcelTableArgs<'a> {
    pub data_list: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LocalizeCharProfileExcel<'a>>>>>,
}
impl<'a> Default for LocalizeCharProfileExcelTableArgs<'a> {
  #[inline]
  fn default() -> Self {
    LocalizeCharProfileExcelTableArgs {
      data_list: None,
    }
  }
}

pub struct LocalizeCharProfileExcelTableBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LocalizeCharProfileExcelTableBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_data_list(&mut self, data_list: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<LocalizeCharProfileExcel<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcelTable::VT_DATA_LIST, data_list);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LocalizeCharProfileExcelTableBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LocalizeCharProfileExcelTableBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LocalizeCharProfileExcelTable<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LocalizeCharProfileExcelTable<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LocalizeCharProfileExcelTable");
      ds.field("data_list", &self.data_list());
      ds.finish()
  }
}
pub enum LocalizeCharProfileExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LocalizeCharProfileExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LocalizeCharProfileExcel<'a> {
  type Inner = LocalizeCharProfileExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LocalizeCharProfileExcel<'a> {
  pub const VT_CHARACTER_ID: flatbuffers::VOffsetT = 4;
  pub const VT_STATUS_MESSAGE_KR: flatbuffers::VOffsetT = 6;
  pub const VT_STATUS_MESSAGE_JP: flatbuffers::VOffsetT = 8;
  pub const VT_FULL_NAME_KR: flatbuffers::VOffsetT = 10;
  pub const VT_FULL_NAME_JP: flatbuffers::VOffsetT = 12;
  pub const VT_FAMILY_NAME_KR: flatbuffers::VOffsetT = 14;
  pub const VT_FAMILY_NAME_RUBY_KR: flatbuffers::VOffsetT = 16;
  pub const VT_PERSONAL_NAME_KR: flatbuffers::VOffsetT = 18;
  pub const VT_PERSONAL_NAME_RUBY_KR: flatbuffers::VOffsetT = 20;
  pub const VT_FAMILY_NAME_JP: flatbuffers::VOffsetT = 22;
  pub const VT_FAMILY_NAME_RUBY_JP: flatbuffers::VOffsetT = 24;
  pub const VT_PERSONAL_NAME_JP: flatbuffers::VOffsetT = 26;
  pub const VT_PERSONAL_NAME_RUBY_JP: flatbuffers::VOffsetT = 28;
  pub const VT_SCHOOL_YEAR_KR: flatbuffers::VOffsetT = 30;
  pub const VT_SCHOOL_YEAR_JP: flatbuffers::VOffsetT = 32;
  pub const VT_CHARACTER_AGE_KR: flatbuffers::VOffsetT = 34;
  pub const VT_CHARACTER_AGE_JP: flatbuffers::VOffsetT = 36;
  pub const VT_BIRTH_DAY: flatbuffers::VOffsetT = 38;
  pub const VT_BIRTHDAY_KR: flatbuffers::VOffsetT = 40;
  pub const VT_BIRTHDAY_JP: flatbuffers::VOffsetT = 42;
  pub const VT_CHAR_HEIGHT_KR: flatbuffers::VOffsetT = 44;
  pub const VT_CHAR_HEIGHT_JP: flatbuffers::VOffsetT = 46;
  pub const VT_DESIGNER_NAME_KR: flatbuffers::VOffsetT = 48;
  pub const VT_DESIGNER_NAME_JP: flatbuffers::VOffsetT = 50;
  pub const VT_ILLUSTRATOR_NAME_KR: flatbuffers::VOffsetT = 52;
  pub const VT_ILLUSTRATOR_NAME_JP: flatbuffers::VOffsetT = 54;
  pub const VT_CHARACTER_VOICE_KR: flatbuffers::VOffsetT = 56;
  pub const VT_CHARACTER_VOICE_JP: flatbuffers::VOffsetT = 58;
  pub const VT_HOBBY_KR: flatbuffers::VOffsetT = 60;
  pub const VT_HOBBY_JP: flatbuffers::VOffsetT = 62;
  pub const VT_WEAPON_NAME_KR: flatbuffers::VOffsetT = 64;
  pub const VT_WEAPON_DESC_KR: flatbuffers::VOffsetT = 66;
  pub const VT_WEAPON_NAME_JP: flatbuffers::VOffsetT = 68;
  pub const VT_WEAPON_DESC_JP: flatbuffers::VOffsetT = 70;
  pub const VT_PROFILE_INTRODUCTION_KR: flatbuffers::VOffsetT = 72;
  pub const VT_PROFILE_INTRODUCTION_JP: flatbuffers::VOffsetT = 74;
  pub const VT_CHARACTER_SSR_NEW_KR: flatbuffers::VOffsetT = 76;
  pub const VT_CHARACTER_SSR_NEW_JP: flatbuffers::VOffsetT = 78;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LocalizeCharProfileExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LocalizeCharProfileExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<LocalizeCharProfileExcel<'bldr>> {
    let mut builder = LocalizeCharProfileExcelBuilder::new(_fbb);
    builder.add_character_id(args.character_id);
    if let Some(x) = args.character_ssr_new_jp { builder.add_character_ssr_new_jp(x); }
    if let Some(x) = args.character_ssr_new_kr { builder.add_character_ssr_new_kr(x); }
    if let Some(x) = args.profile_introduction_jp { builder.add_profile_introduction_jp(x); }
    if let Some(x) = args.profile_introduction_kr { builder.add_profile_introduction_kr(x); }
    if let Some(x) = args.weapon_desc_jp { builder.add_weapon_desc_jp(x); }
    if let Some(x) = args.weapon_name_jp { builder.add_weapon_name_jp(x); }
    if let Some(x) = args.weapon_desc_kr { builder.add_weapon_desc_kr(x); }
    if let Some(x) = args.weapon_name_kr { builder.add_weapon_name_kr(x); }
    if let Some(x) = args.hobby_jp { builder.add_hobby_jp(x); }
    if let Some(x) = args.hobby_kr { builder.add_hobby_kr(x); }
    if let Some(x) = args.character_voice_jp { builder.add_character_voice_jp(x); }
    if let Some(x) = args.character_voice_kr { builder.add_character_voice_kr(x); }
    if let Some(x) = args.illustrator_name_jp { builder.add_illustrator_name_jp(x); }
    if let Some(x) = args.illustrator_name_kr { builder.add_illustrator_name_kr(x); }
    if let Some(x) = args.designer_name_jp { builder.add_designer_name_jp(x); }
    if let Some(x) = args.designer_name_kr { builder.add_designer_name_kr(x); }
    if let Some(x) = args.char_height_jp { builder.add_char_height_jp(x); }
    if let Some(x) = args.char_height_kr { builder.add_char_height_kr(x); }
    if let Some(x) = args.birthday_jp { builder.add_birthday_jp(x); }
    if let Some(x) = args.birthday_kr { builder.add_birthday_kr(x); }
    if let Some(x) = args.birth_day { builder.add_birth_day(x); }
    if let Some(x) = args.character_age_jp { builder.add_character_age_jp(x); }
    if let Some(x) = args.character_age_kr { builder.add_character_age_kr(x); }
    if let Some(x) = args.school_year_jp { builder.add_school_year_jp(x); }
    if let Some(x) = args.school_year_kr { builder.add_school_year_kr(x); }
    if let Some(x) = args.personal_name_ruby_jp { builder.add_personal_name_ruby_jp(x); }
    if let Some(x) = args.personal_name_jp { builder.add_personal_name_jp(x); }
    if let Some(x) = args.family_name_ruby_jp { builder.add_family_name_ruby_jp(x); }
    if let Some(x) = args.family_name_jp { builder.add_family_name_jp(x); }
    if let Some(x) = args.personal_name_ruby_kr { builder.add_personal_name_ruby_kr(x); }
    if let Some(x) = args.personal_name_kr { builder.add_personal_name_kr(x); }
    if let Some(x) = args.family_name_ruby_kr { builder.add_family_name_ruby_kr(x); }
    if let Some(x) = args.family_name_kr { builder.add_family_name_kr(x); }
    if let Some(x) = args.full_name_jp { builder.add_full_name_jp(x); }
    if let Some(x) = args.full_name_kr { builder.add_full_name_kr(x); }
    if let Some(x) = args.status_message_jp { builder.add_status_message_jp(x); }
    if let Some(x) = args.status_message_kr { builder.add_status_message_kr(x); }
    builder.finish()
  }


  #[inline]
  pub fn character_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(LocalizeCharProfileExcel::VT_CHARACTER_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn status_message_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_STATUS_MESSAGE_KR, None)}
  }
  #[inline]
  pub fn status_message_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_STATUS_MESSAGE_JP, None)}
  }
  #[inline]
  pub fn full_name_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FULL_NAME_KR, None)}
  }
  #[inline]
  pub fn full_name_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FULL_NAME_JP, None)}
  }
  #[inline]
  pub fn family_name_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILY_NAME_KR, None)}
  }
  #[inline]
  pub fn family_name_ruby_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILY_NAME_RUBY_KR, None)}
  }
  #[inline]
  pub fn personal_name_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONAL_NAME_KR, None)}
  }
  #[inline]
  pub fn personal_name_ruby_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONAL_NAME_RUBY_KR, None)}
  }
  #[inline]
  pub fn family_name_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILY_NAME_JP, None)}
  }
  #[inline]
  pub fn family_name_ruby_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_FAMILY_NAME_RUBY_JP, None)}
  }
  #[inline]
  pub fn personal_name_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONAL_NAME_JP, None)}
  }
  #[inline]
  pub fn personal_name_ruby_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PERSONAL_NAME_RUBY_JP, None)}
  }
  #[inline]
  pub fn school_year_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_SCHOOL_YEAR_KR, None)}
  }
  #[inline]
  pub fn school_year_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_SCHOOL_YEAR_JP, None)}
  }
  #[inline]
  pub fn character_age_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTER_AGE_KR, None)}
  }
  #[inline]
  pub fn character_age_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTER_AGE_JP, None)}
  }
  #[inline]
  pub fn birth_day(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_BIRTH_DAY, None)}
  }
  #[inline]
  pub fn birthday_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_BIRTHDAY_KR, None)}
  }
  #[inline]
  pub fn birthday_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_BIRTHDAY_JP, None)}
  }
  #[inline]
  pub fn char_height_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHAR_HEIGHT_KR, None)}
  }
  #[inline]
  pub fn char_height_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHAR_HEIGHT_JP, None)}
  }
  #[inline]
  pub fn designer_name_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_DESIGNER_NAME_KR, None)}
  }
  #[inline]
  pub fn designer_name_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_DESIGNER_NAME_JP, None)}
  }
  #[inline]
  pub fn illustrator_name_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_ILLUSTRATOR_NAME_KR, None)}
  }
  #[inline]
  pub fn illustrator_name_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_ILLUSTRATOR_NAME_JP, None)}
  }
  #[inline]
  pub fn character_voice_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTER_VOICE_KR, None)}
  }
  #[inline]
  pub fn character_voice_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTER_VOICE_JP, None)}
  }
  #[inline]
  pub fn hobby_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_HOBBY_KR, None)}
  }
  #[inline]
  pub fn hobby_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_HOBBY_JP, None)}
  }
  #[inline]
  pub fn weapon_name_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPON_NAME_KR, None)}
  }
  #[inline]
  pub fn weapon_desc_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPON_DESC_KR, None)}
  }
  #[inline]
  pub fn weapon_name_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPON_NAME_JP, None)}
  }
  #[inline]
  pub fn weapon_desc_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_WEAPON_DESC_JP, None)}
  }
  #[inline]
  pub fn profile_introduction_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PROFILE_INTRODUCTION_KR, None)}
  }
  #[inline]
  pub fn profile_introduction_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_PROFILE_INTRODUCTION_JP, None)}
  }
  #[inline]
  pub fn character_ssr_new_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTER_SSR_NEW_KR, None)}
  }
  #[inline]
  pub fn character_ssr_new_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LocalizeCharProfileExcel::VT_CHARACTER_SSR_NEW_JP, None)}
  }
}

impl flatbuffers::Verifiable for LocalizeCharProfileExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("character_id", Self::VT_CHARACTER_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("status_message_kr", Self::VT_STATUS_MESSAGE_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("status_message_jp", Self::VT_STATUS_MESSAGE_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("full_name_kr", Self::VT_FULL_NAME_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("full_name_jp", Self::VT_FULL_NAME_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("family_name_kr", Self::VT_FAMILY_NAME_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("family_name_ruby_kr", Self::VT_FAMILY_NAME_RUBY_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("personal_name_kr", Self::VT_PERSONAL_NAME_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("personal_name_ruby_kr", Self::VT_PERSONAL_NAME_RUBY_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("family_name_jp", Self::VT_FAMILY_NAME_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("family_name_ruby_jp", Self::VT_FAMILY_NAME_RUBY_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("personal_name_jp", Self::VT_PERSONAL_NAME_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("personal_name_ruby_jp", Self::VT_PERSONAL_NAME_RUBY_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("school_year_kr", Self::VT_SCHOOL_YEAR_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("school_year_jp", Self::VT_SCHOOL_YEAR_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("character_age_kr", Self::VT_CHARACTER_AGE_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("character_age_jp", Self::VT_CHARACTER_AGE_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("birth_day", Self::VT_BIRTH_DAY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("birthday_kr", Self::VT_BIRTHDAY_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("birthday_jp", Self::VT_BIRTHDAY_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("char_height_kr", Self::VT_CHAR_HEIGHT_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("char_height_jp", Self::VT_CHAR_HEIGHT_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("designer_name_kr", Self::VT_DESIGNER_NAME_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("designer_name_jp", Self::VT_DESIGNER_NAME_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("illustrator_name_kr", Self::VT_ILLUSTRATOR_NAME_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("illustrator_name_jp", Self::VT_ILLUSTRATOR_NAME_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("character_voice_kr", Self::VT_CHARACTER_VOICE_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("character_voice_jp", Self::VT_CHARACTER_VOICE_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("hobby_kr", Self::VT_HOBBY_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("hobby_jp", Self::VT_HOBBY_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("weapon_name_kr", Self::VT_WEAPON_NAME_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("weapon_desc_kr", Self::VT_WEAPON_DESC_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("weapon_name_jp", Self::VT_WEAPON_NAME_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("weapon_desc_jp", Self::VT_WEAPON_DESC_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("profile_introduction_kr", Self::VT_PROFILE_INTRODUCTION_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("profile_introduction_jp", Self::VT_PROFILE_INTRODUCTION_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("character_ssr_new_kr", Self::VT_CHARACTER_SSR_NEW_KR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("character_ssr_new_jp", Self::VT_CHARACTER_SSR_NEW_JP, false)?
     .finish();
    Ok(())
  }
}
pub struct LocalizeCharProfileExcelArgs<'a> {
    pub character_id: i64,
    pub status_message_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub status_message_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub full_name_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub full_name_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub family_name_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub family_name_ruby_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub personal_name_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub personal_name_ruby_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub family_name_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub family_name_ruby_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub personal_name_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub personal_name_ruby_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub school_year_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub school_year_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub character_age_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub character_age_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub birth_day: Option<flatbuffers::WIPOffset<&'a str>>,
    pub birthday_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub birthday_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub char_height_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub char_height_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub designer_name_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub designer_name_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub illustrator_name_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub illustrator_name_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub character_voice_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub character_voice_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub hobby_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub hobby_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub weapon_name_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub weapon_desc_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub weapon_name_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub weapon_desc_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub profile_introduction_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub profile_introduction_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub character_ssr_new_kr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub character_ssr_new_jp: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LocalizeCharProfileExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    LocalizeCharProfileExcelArgs {
      character_id: 0,
      status_message_kr: None,
      status_message_jp: None,
      full_name_kr: None,
      full_name_jp: None,
      family_name_kr: None,
      family_name_ruby_kr: None,
      personal_name_kr: None,
      personal_name_ruby_kr: None,
      family_name_jp: None,
      family_name_ruby_jp: None,
      personal_name_jp: None,
      personal_name_ruby_jp: None,
      school_year_kr: None,
      school_year_jp: None,
      character_age_kr: None,
      character_age_jp: None,
      birth_day: None,
      birthday_kr: None,
      birthday_jp: None,
      char_height_kr: None,
      char_height_jp: None,
      designer_name_kr: None,
      designer_name_jp: None,
      illustrator_name_kr: None,
      illustrator_name_jp: None,
      character_voice_kr: None,
      character_voice_jp: None,
      hobby_kr: None,
      hobby_jp: None,
      weapon_name_kr: None,
      weapon_desc_kr: None,
      weapon_name_jp: None,
      weapon_desc_jp: None,
      profile_introduction_kr: None,
      profile_introduction_jp: None,
      character_ssr_new_kr: None,
      character_ssr_new_jp: None,
    }
  }
}

pub struct LocalizeCharProfileExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LocalizeCharProfileExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_character_id(&mut self, character_id: i64) {
    self.fbb_.push_slot::<i64>(LocalizeCharProfileExcel::VT_CHARACTER_ID, character_id, 0);
  }
  #[inline]
  pub fn add_status_message_kr(&mut self, status_message_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_STATUS_MESSAGE_KR, status_message_kr);
  }
  #[inline]
  pub fn add_status_message_jp(&mut self, status_message_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_STATUS_MESSAGE_JP, status_message_jp);
  }
  #[inline]
  pub fn add_full_name_kr(&mut self, full_name_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FULL_NAME_KR, full_name_kr);
  }
  #[inline]
  pub fn add_full_name_jp(&mut self, full_name_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FULL_NAME_JP, full_name_jp);
  }
  #[inline]
  pub fn add_family_name_kr(&mut self, family_name_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILY_NAME_KR, family_name_kr);
  }
  #[inline]
  pub fn add_family_name_ruby_kr(&mut self, family_name_ruby_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILY_NAME_RUBY_KR, family_name_ruby_kr);
  }
  #[inline]
  pub fn add_personal_name_kr(&mut self, personal_name_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONAL_NAME_KR, personal_name_kr);
  }
  #[inline]
  pub fn add_personal_name_ruby_kr(&mut self, personal_name_ruby_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONAL_NAME_RUBY_KR, personal_name_ruby_kr);
  }
  #[inline]
  pub fn add_family_name_jp(&mut self, family_name_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILY_NAME_JP, family_name_jp);
  }
  #[inline]
  pub fn add_family_name_ruby_jp(&mut self, family_name_ruby_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_FAMILY_NAME_RUBY_JP, family_name_ruby_jp);
  }
  #[inline]
  pub fn add_personal_name_jp(&mut self, personal_name_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONAL_NAME_JP, personal_name_jp);
  }
  #[inline]
  pub fn add_personal_name_ruby_jp(&mut self, personal_name_ruby_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PERSONAL_NAME_RUBY_JP, personal_name_ruby_jp);
  }
  #[inline]
  pub fn add_school_year_kr(&mut self, school_year_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_SCHOOL_YEAR_KR, school_year_kr);
  }
  #[inline]
  pub fn add_school_year_jp(&mut self, school_year_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_SCHOOL_YEAR_JP, school_year_jp);
  }
  #[inline]
  pub fn add_character_age_kr(&mut self, character_age_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTER_AGE_KR, character_age_kr);
  }
  #[inline]
  pub fn add_character_age_jp(&mut self, character_age_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTER_AGE_JP, character_age_jp);
  }
  #[inline]
  pub fn add_birth_day(&mut self, birth_day: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_BIRTH_DAY, birth_day);
  }
  #[inline]
  pub fn add_birthday_kr(&mut self, birthday_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_BIRTHDAY_KR, birthday_kr);
  }
  #[inline]
  pub fn add_birthday_jp(&mut self, birthday_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_BIRTHDAY_JP, birthday_jp);
  }
  #[inline]
  pub fn add_char_height_kr(&mut self, char_height_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHAR_HEIGHT_KR, char_height_kr);
  }
  #[inline]
  pub fn add_char_height_jp(&mut self, char_height_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHAR_HEIGHT_JP, char_height_jp);
  }
  #[inline]
  pub fn add_designer_name_kr(&mut self, designer_name_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_DESIGNER_NAME_KR, designer_name_kr);
  }
  #[inline]
  pub fn add_designer_name_jp(&mut self, designer_name_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_DESIGNER_NAME_JP, designer_name_jp);
  }
  #[inline]
  pub fn add_illustrator_name_kr(&mut self, illustrator_name_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_ILLUSTRATOR_NAME_KR, illustrator_name_kr);
  }
  #[inline]
  pub fn add_illustrator_name_jp(&mut self, illustrator_name_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_ILLUSTRATOR_NAME_JP, illustrator_name_jp);
  }
  #[inline]
  pub fn add_character_voice_kr(&mut self, character_voice_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTER_VOICE_KR, character_voice_kr);
  }
  #[inline]
  pub fn add_character_voice_jp(&mut self, character_voice_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTER_VOICE_JP, character_voice_jp);
  }
  #[inline]
  pub fn add_hobby_kr(&mut self, hobby_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_HOBBY_KR, hobby_kr);
  }
  #[inline]
  pub fn add_hobby_jp(&mut self, hobby_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_HOBBY_JP, hobby_jp);
  }
  #[inline]
  pub fn add_weapon_name_kr(&mut self, weapon_name_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPON_NAME_KR, weapon_name_kr);
  }
  #[inline]
  pub fn add_weapon_desc_kr(&mut self, weapon_desc_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPON_DESC_KR, weapon_desc_kr);
  }
  #[inline]
  pub fn add_weapon_name_jp(&mut self, weapon_name_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPON_NAME_JP, weapon_name_jp);
  }
  #[inline]
  pub fn add_weapon_desc_jp(&mut self, weapon_desc_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_WEAPON_DESC_JP, weapon_desc_jp);
  }
  #[inline]
  pub fn add_profile_introduction_kr(&mut self, profile_introduction_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PROFILE_INTRODUCTION_KR, profile_introduction_kr);
  }
  #[inline]
  pub fn add_profile_introduction_jp(&mut self, profile_introduction_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_PROFILE_INTRODUCTION_JP, profile_introduction_jp);
  }
  #[inline]
  pub fn add_character_ssr_new_kr(&mut self, character_ssr_new_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTER_SSR_NEW_KR, character_ssr_new_kr);
  }
  #[inline]
  pub fn add_character_ssr_new_jp(&mut self, character_ssr_new_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LocalizeCharProfileExcel::VT_CHARACTER_SSR_NEW_JP, character_ssr_new_jp);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LocalizeCharProfileExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LocalizeCharProfileExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LocalizeCharProfileExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LocalizeCharProfileExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LocalizeCharProfileExcel");
      ds.field("character_id", &self.character_id());
      ds.field("status_message_kr", &self.status_message_kr());
      ds.field("status_message_jp", &self.status_message_jp());
      ds.field("full_name_kr", &self.full_name_kr());
      ds.field("full_name_jp", &self.full_name_jp());
      ds.field("family_name_kr", &self.family_name_kr());
      ds.field("family_name_ruby_kr", &self.family_name_ruby_kr());
      ds.field("personal_name_kr", &self.personal_name_kr());
      ds.field("personal_name_ruby_kr", &self.personal_name_ruby_kr());
      ds.field("family_name_jp", &self.family_name_jp());
      ds.field("family_name_ruby_jp", &self.family_name_ruby_jp());
      ds.field("personal_name_jp", &self.personal_name_jp());
      ds.field("personal_name_ruby_jp", &self.personal_name_ruby_jp());
      ds.field("school_year_kr", &self.school_year_kr());
      ds.field("school_year_jp", &self.school_year_jp());
      ds.field("character_age_kr", &self.character_age_kr());
      ds.field("character_age_jp", &self.character_age_jp());
      ds.field("birth_day", &self.birth_day());
      ds.field("birthday_kr", &self.birthday_kr());
      ds.field("birthday_jp", &self.birthday_jp());
      ds.field("char_height_kr", &self.char_height_kr());
      ds.field("char_height_jp", &self.char_height_jp());
      ds.field("designer_name_kr", &self.designer_name_kr());
      ds.field("designer_name_jp", &self.designer_name_jp());
      ds.field("illustrator_name_kr", &self.illustrator_name_kr());
      ds.field("illustrator_name_jp", &self.illustrator_name_jp());
      ds.field("character_voice_kr", &self.character_voice_kr());
      ds.field("character_voice_jp", &self.character_voice_jp());
      ds.field("hobby_kr", &self.hobby_kr());
      ds.field("hobby_jp", &self.hobby_jp());
      ds.field("weapon_name_kr", &self.weapon_name_kr());
      ds.field("weapon_desc_kr", &self.weapon_desc_kr());
      ds.field("weapon_name_jp", &self.weapon_name_jp());
      ds.field("weapon_desc_jp", &self.weapon_desc_jp());
      ds.field("profile_introduction_kr", &self.profile_introduction_kr());
      ds.field("profile_introduction_jp", &self.profile_introduction_jp());
      ds.field("character_ssr_new_kr", &self.character_ssr_new_kr());
      ds.field("character_ssr_new_jp", &self.character_ssr_new_jp());
      ds.finish()
  }
}
pub enum MemoryLobbyExcelTableOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MemoryLobbyExcelTable<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MemoryLobbyExcelTable<'a> {
  type Inner = MemoryLobbyExcelTable<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MemoryLobbyExcelTable<'a> {
  pub const VT_DATA_LIST: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MemoryLobbyExcelTable { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MemoryLobbyExcelTableArgs<'args>
  ) -> flatbuffers::WIPOffset<MemoryLobbyExcelTable<'bldr>> {
    let mut builder = MemoryLobbyExcelTableBuilder::new(_fbb);
    if let Some(x) = args.data_list { builder.add_data_list(x); }
    builder.finish()
  }


  #[inline]
  pub fn data_list(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MemoryLobbyExcel<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MemoryLobbyExcel>>>>(MemoryLobbyExcelTable::VT_DATA_LIST, None)}
  }
}

impl flatbuffers::Verifiable for MemoryLobbyExcelTable<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<MemoryLobbyExcel>>>>("data_list", Self::VT_DATA_LIST, false)?
     .finish();
    Ok(())
  }
}
pub struct MemoryLobbyExcelTableArgs<'a> {
    pub data_list: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MemoryLobbyExcel<'a>>>>>,
}
impl<'a> Default for MemoryLobbyExcelTableArgs<'a> {
  #[inline]
  fn default() -> Self {
    MemoryLobbyExcelTableArgs {
      data_list: None,
    }
  }
}

pub struct MemoryLobbyExcelTableBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MemoryLobbyExcelTableBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_data_list(&mut self, data_list: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<MemoryLobbyExcel<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobbyExcelTable::VT_DATA_LIST, data_list);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MemoryLobbyExcelTableBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MemoryLobbyExcelTableBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MemoryLobbyExcelTable<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MemoryLobbyExcelTable<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MemoryLobbyExcelTable");
      ds.field("data_list", &self.data_list());
      ds.finish()
  }
}
pub enum MemoryLobbyExcelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MemoryLobbyExcel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MemoryLobbyExcel<'a> {
  type Inner = MemoryLobbyExcel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MemoryLobbyExcel<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_PRODUCTION_STEP: flatbuffers::VOffsetT = 6;
  pub const VT_LOCALIZE_ETC_ID: flatbuffers::VOffsetT = 8;
  pub const VT_CHARACTER_ID: flatbuffers::VOffsetT = 10;
  pub const VT_PREFAB_NAME: flatbuffers::VOffsetT = 12;
  pub const VT_MEMORY_LOBBY_CATEGORY: flatbuffers::VOffsetT = 14;
  pub const VT_SLOT_TEXTURE_NAME: flatbuffers::VOffsetT = 16;
  pub const VT_REWARD_TEXTURE_NAME: flatbuffers::VOffsetT = 18;
  pub const VT_BGM_ID: flatbuffers::VOffsetT = 20;
  pub const VT_AUDIO_CLIP_JP: flatbuffers::VOffsetT = 22;
  pub const VT_AUDIO_CLIP_KR: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MemoryLobbyExcel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MemoryLobbyExcelArgs<'args>
  ) -> flatbuffers::WIPOffset<MemoryLobbyExcel<'bldr>> {
    let mut builder = MemoryLobbyExcelBuilder::new(_fbb);
    builder.add_bgm_id(args.bgm_id);
    builder.add_character_id(args.character_id);
    builder.add_id(args.id);
    if let Some(x) = args.audio_clip_kr { builder.add_audio_clip_kr(x); }
    if let Some(x) = args.audio_clip_jp { builder.add_audio_clip_jp(x); }
    if let Some(x) = args.reward_texture_name { builder.add_reward_texture_name(x); }
    if let Some(x) = args.slot_texture_name { builder.add_slot_texture_name(x); }
    builder.add_memory_lobby_category(args.memory_lobby_category);
    if let Some(x) = args.prefab_name { builder.add_prefab_name(x); }
    builder.add_localize_etc_id(args.localize_etc_id);
    builder.add_production_step(args.production_step);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MemoryLobbyExcel::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn production_step(&self) -> ProductionStep {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ProductionStep>(MemoryLobbyExcel::VT_PRODUCTION_STEP, Some(ProductionStep::ToDo)).unwrap()}
  }
  #[inline]
  pub fn localize_etc_id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MemoryLobbyExcel::VT_LOCALIZE_ETC_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn character_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MemoryLobbyExcel::VT_CHARACTER_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn prefab_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobbyExcel::VT_PREFAB_NAME, None)}
  }
  #[inline]
  pub fn memory_lobby_category(&self) -> MemoryLobbyCategory {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MemoryLobbyCategory>(MemoryLobbyExcel::VT_MEMORY_LOBBY_CATEGORY, Some(MemoryLobbyCategory::None)).unwrap()}
  }
  #[inline]
  pub fn slot_texture_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobbyExcel::VT_SLOT_TEXTURE_NAME, None)}
  }
  #[inline]
  pub fn reward_texture_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobbyExcel::VT_REWARD_TEXTURE_NAME, None)}
  }
  #[inline]
  pub fn bgm_id(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MemoryLobbyExcel::VT_BGM_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn audio_clip_jp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobbyExcel::VT_AUDIO_CLIP_JP, None)}
  }
  #[inline]
  pub fn audio_clip_kr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MemoryLobbyExcel::VT_AUDIO_CLIP_KR, None)}
  }
}

impl flatbuffers::Verifiable for MemoryLobbyExcel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("id", Self::VT_ID, false)?
     .visit_field::<ProductionStep>("production_step", Self::VT_PRODUCTION_STEP, false)?
     .visit_field::<u32>("localize_etc_id", Self::VT_LOCALIZE_ETC_ID, false)?
     .visit_field::<i64>("character_id", Self::VT_CHARACTER_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("prefab_name", Self::VT_PREFAB_NAME, false)?
     .visit_field::<MemoryLobbyCategory>("memory_lobby_category", Self::VT_MEMORY_LOBBY_CATEGORY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("slot_texture_name", Self::VT_SLOT_TEXTURE_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reward_texture_name", Self::VT_REWARD_TEXTURE_NAME, false)?
     .visit_field::<i64>("bgm_id", Self::VT_BGM_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("audio_clip_jp", Self::VT_AUDIO_CLIP_JP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("audio_clip_kr", Self::VT_AUDIO_CLIP_KR, false)?
     .finish();
    Ok(())
  }
}
pub struct MemoryLobbyExcelArgs<'a> {
    pub id: i64,
    pub production_step: ProductionStep,
    pub localize_etc_id: u32,
    pub character_id: i64,
    pub prefab_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub memory_lobby_category: MemoryLobbyCategory,
    pub slot_texture_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub reward_texture_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub bgm_id: i64,
    pub audio_clip_jp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub audio_clip_kr: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for MemoryLobbyExcelArgs<'a> {
  #[inline]
  fn default() -> Self {
    MemoryLobbyExcelArgs {
      id: 0,
      production_step: ProductionStep::ToDo,
      localize_etc_id: 0,
      character_id: 0,
      prefab_name: None,
      memory_lobby_category: MemoryLobbyCategory::None,
      slot_texture_name: None,
      reward_texture_name: None,
      bgm_id: 0,
      audio_clip_jp: None,
      audio_clip_kr: None,
    }
  }
}

pub struct MemoryLobbyExcelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MemoryLobbyExcelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: i64) {
    self.fbb_.push_slot::<i64>(MemoryLobbyExcel::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_production_step(&mut self, production_step: ProductionStep) {
    self.fbb_.push_slot::<ProductionStep>(MemoryLobbyExcel::VT_PRODUCTION_STEP, production_step, ProductionStep::ToDo);
  }
  #[inline]
  pub fn add_localize_etc_id(&mut self, localize_etc_id: u32) {
    self.fbb_.push_slot::<u32>(MemoryLobbyExcel::VT_LOCALIZE_ETC_ID, localize_etc_id, 0);
  }
  #[inline]
  pub fn add_character_id(&mut self, character_id: i64) {
    self.fbb_.push_slot::<i64>(MemoryLobbyExcel::VT_CHARACTER_ID, character_id, 0);
  }
  #[inline]
  pub fn add_prefab_name(&mut self, prefab_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobbyExcel::VT_PREFAB_NAME, prefab_name);
  }
  #[inline]
  pub fn add_memory_lobby_category(&mut self, memory_lobby_category: MemoryLobbyCategory) {
    self.fbb_.push_slot::<MemoryLobbyCategory>(MemoryLobbyExcel::VT_MEMORY_LOBBY_CATEGORY, memory_lobby_category, MemoryLobbyCategory::None);
  }
  #[inline]
  pub fn add_slot_texture_name(&mut self, slot_texture_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobbyExcel::VT_SLOT_TEXTURE_NAME, slot_texture_name);
  }
  #[inline]
  pub fn add_reward_texture_name(&mut self, reward_texture_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobbyExcel::VT_REWARD_TEXTURE_NAME, reward_texture_name);
  }
  #[inline]
  pub fn add_bgm_id(&mut self, bgm_id: i64) {
    self.fbb_.push_slot::<i64>(MemoryLobbyExcel::VT_BGM_ID, bgm_id, 0);
  }
  #[inline]
  pub fn add_audio_clip_jp(&mut self, audio_clip_jp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobbyExcel::VT_AUDIO_CLIP_JP, audio_clip_jp);
  }
  #[inline]
  pub fn add_audio_clip_kr(&mut self, audio_clip_kr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MemoryLobbyExcel::VT_AUDIO_CLIP_KR, audio_clip_kr);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MemoryLobbyExcelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MemoryLobbyExcelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MemoryLobbyExcel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MemoryLobbyExcel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MemoryLobbyExcel");
      ds.field("id", &self.id());
      ds.field("production_step", &self.production_step());
      ds.field("localize_etc_id", &self.localize_etc_id());
      ds.field("character_id", &self.character_id());
      ds.field("prefab_name", &self.prefab_name());
      ds.field("memory_lobby_category", &self.memory_lobby_category());
      ds.field("slot_texture_name", &self.slot_texture_name());
      ds.field("reward_texture_name", &self.reward_texture_name());
      ds.field("bgm_id", &self.bgm_id());
      ds.field("audio_clip_jp", &self.audio_clip_jp());
      ds.field("audio_clip_kr", &self.audio_clip_kr());
      ds.finish()
  }
}
}  // pub mod JP

